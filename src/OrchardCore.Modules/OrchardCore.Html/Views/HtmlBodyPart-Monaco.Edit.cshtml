@using OrchardCore
@model HtmlBodyPartViewModel
@{
    var settings = Model.TypePartDefinition.GetSettings<HtmlBodyPartSettings>();
    var monacoSettings = Model.TypePartDefinition.GetSettings<HtmlBodyPartMonacoEditorSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.ContentItem) ?? CultureInfo.CurrentUICulture;
}

@await DisplayAsync(await New.ShortcodeModal())

<div class="row mb-3">
    <label asp-for="Html" class="@Orchard.GetLabelClasses()">@Model.TypePartDefinition.DisplayName()</label>
    <div class="@Orchard.GetEndClasses()">
        <div id="@Html.IdFor(x => x.Html)_editor" asp-for="Text" style="min-height: 400px;" class="form-control" dir="@culture.GetLanguageDirection()"></div>
        <textarea asp-for="Html" class="content-preview-text" hidden>@Html.Raw(Model.Html)</textarea>
        <span class="hint">@T["The body of the content item."]</span>
    </div>
</div>

<script asp-name="monaco" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    document.addEventListener('DOMContentLoaded', function () {
        require(['vs/editor/editor.main'], function () {

            const divEditor = document.getElementById('@Html.IdFor(x => x.Html)_editor');

            if (!divEditor) {
                return;
            }

            var settings = @Html.Raw(monacoSettings.Options);
            if (settings.automaticLayout == undefined) {
                settings.automaticLayout = true;
            }
            settings.language = 'html';

            var html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(divEditor, settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.Html)');

            editor.getModel().onDidChangeContent((event) => {
                textArea.value = editor.getValue();
                $(document).trigger('contentpreview:render');
            });

            const shortcodesAction = {
                id: "shortcodes",
                label: "Add Shortcode",
                run: function (editor) {
                    shortcodesApp.init(function (value) {
                        if (value) {
                            var selection = editor.getSelection();
                            var text = value;
                            var op = { range: selection, text: text, forceMoveMarkers: true };
                            editor.executeEdits("shortcodes", [op]);
                        }
                        editor.focus();
                    })
                },
                contextMenuGroupId: 'orchardcore',
                contextMenuOrder: 0,
                keybindings: [
                    monaco.KeyMod.Alt | monaco.KeyCode.KEY_S,
                ]
            }
            editor.addAction(shortcodesAction);

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });
        });
    });
</script>
