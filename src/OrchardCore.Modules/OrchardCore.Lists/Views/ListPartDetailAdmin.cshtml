@model OrchardCore.Lists.ViewModels.ListPartViewModel
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager
@{
    var enableOrdering =
        Model.EnableOrdering &&
        Model.ContentItems.Count() > 1 &&
        Model.ListPartFilterViewModel.Status == ContentsStatus.Latest && string.IsNullOrEmpty(Model.ListPartFilterViewModel.DisplayText);


    if (enableOrdering)
    {
        <script asp-src="~/OrchardCore.Lists/Scripts/ci-list-ordering.min.js" debug-src="~/OrchardCore.Lists/Scripts/ci-list-ordering.js" asp-name="ci-list-ordering" at="Foot" depends-on="Sortable, jQuery"></script>
    }
  
}
@if (!Model.ContainedContentTypeDefinitions.Any())
{
    <div class="alert alert-warning">
        <a asp-action="EditTypePart" asp-controller="Admin" asp-route-area="OrchardCore.ContentTypes" asp-route-id="@Model.ListPart.ContentItem.ContentType" asp-route-name="ListPart">@T["Please specify at least one contained content type."]</a>
    </div>
}
else
{

    @if (Model.ContentItems.Any())
    {
        <ul class="list-group" id="ci-sortable">
            @foreach (var contentItem in Model.ContentItems)
            {
                var contentItemSummary = (dynamic)await ContentItemDisplayManager.BuildDisplayAsync(contentItem, Model.Context.Updater, "SummaryAdmin", Model.Context.GroupId);
                if (enableOrdering)
                {
                    await contentItemSummary.Selectors.AddAsync(await New.ListPart_Sortable());
                }
                <li class="list-group-item list-group-item-action">
                    @await DisplayAsync(contentItemSummary)
                </li>
            }
        </ul>

        @await DisplayAsync(Model.Pager)
        @if (enableOrdering)
        {
            <div id="ordering-url" class="d-none" data-url="@Url.Action("UpdateContentItemOrders", "Order", new { area = "OrchardCore.Lists" })" />
            <div id="container-id" class="d-none" data-id="@Model.ListPart.ContentItem.ContentItemId" />
            <div id="pager-before" class="d-none" data-before="@Model.Pager.Before" />
            <div id="pager-after" class="d-none" data-after="@Model.Pager.After" />
            <div id="pager-pagesize" class="d-none" data-pagesize="@Model.Pager.PageSize" />
            <div id="update-order-error-message" class="d-none" data-message="@T["There was an error when updating the order of the items."]" />
        }
    }
    else
    {
        <p class="alert alert-warning">@T["The list is empty."]</p>
    }
}
