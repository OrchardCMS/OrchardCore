@using OrchardCore.Autoroute.ViewModels
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Routing
@using OrchardCore
@model AutoroutePartViewModel
@inject IAuthorizationService AuthorizationService
@inject OrchardCore.Settings.ISiteService SiteService
@inject OrchardCore.ContentManagement.IContentManager ContentManager
@{
    ContentItem contentItem = Model.ContentItem;
    var hasPublished = await ContentManager.HasPublishedVersionAsync(contentItem);
    var site = await SiteService.GetSiteSettingsAsync();
    var containedContentItemsAspect = await ContentManager.PopulateAspectAsync<ContainedContentItemsAspect>(contentItem);
}

@if (Model.Settings.AllowDisabled)
{
    <div class="@Orchard.GetWrapperClasses()">
        <div class="@Orchard.GetEndClasses(true)">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" asp-for="Disabled" checked="@Model.Disabled" />
                <label class="form-check-label" asp-for="Disabled">@T["Disabled"]</label>
                <span class="hint dashed">@T["Check to disable autoroute for this content item."]</span>
            </div>
        </div>
    </div>
}

<div class="autoroute-disabled" style="@(Model.Disabled ? "display: none" : string.Empty)">
    <div class="@Orchard.GetWrapperClasses()" asp-validation-class-for="Path">
        <label asp-for="Path" class="@Orchard.GetLabelClasses(inputRequired: true)">@T["Permalink"]</label>
        <div class="@Orchard.GetEndClasses()">
            <div class="input-group">
                @if (!string.IsNullOrWhiteSpace(site.BaseUrl))
                {
                    <div class="input-group-text">@site.BaseUrl</div>
                }
                <input asp-for="Path" class="form-control" disabled="@(!Model.Settings.AllowCustomPath)" />
                @if (hasPublished)
                {
                    <div class="input-group-text"><a display-for="@contentItem" class="text-info" target="_blank"><i class="fa-solid fa-external-link" aria-hidden="true"></i></a></div>
                }
                <span asp-validation-for="Path"></span>
            </div>
            @if (!string.IsNullOrWhiteSpace(Model.Settings.Pattern) && Model.Settings.AllowCustomPath)
            {
                <span class="hint">@T["The url of the content item. Leave empty to auto-generate it."]</span>
            }
            else
            {
                <span class="hint">@T["The url of the content item. It will be automatically generated."]</span>
            }
        </div>
    </div>
    @{
        var authorized = await AuthorizationService.AuthorizeAsync(User, Permissions.SetHomepage);
        var showHomepageOption = Model.Settings.ShowHomepageOption && authorized;

        if (Model.IsHomepage)
        {
            <div class="alert alert-info">@T["This content item is the current homepage"]</div>
        }
        else
        {
            if (showHomepageOption)
            {
                <div class="@Orchard.GetWrapperClasses()">
                    <div class="@Orchard.GetEndClasses(true)">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" asp-for="SetHomepage" checked="@Model.SetHomepage" />
                            <label class="form-check-label" asp-for="SetHomepage">@T["Set as homepage"]</label>
                            <span class="hint dashed">@T["Check to set this content item as the homepage once published."]</span>
                        </div>
                    </div>
                </div>
            }
        }
    }

    @if (Model.Settings.AllowUpdatePath)
    {
        <div class="@Orchard.GetWrapperClasses()">
            <div class="@Orchard.GetEndClasses(true)">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" asp-for="UpdatePath" checked="@Model.UpdatePath" />
                    <label class="form-check-label" asp-for="UpdatePath">@T["Refresh the path"]</label>
                    <span class="hint dashed">@T["Check to refresh the path. Warning: the previous URL won't be accessible anymore."]</span>
                </div>
            </div>
        </div>
    }

    @if (containedContentItemsAspect.Accessors.Any() && Model.Settings.AllowRouteContainedItems)
    {
        <div class="@Orchard.GetWrapperClasses()">
            <div class="@Orchard.GetEndClasses(true)">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" asp-for="RouteContainedItems" checked="@Model.RouteContainedItems" />
                    <label class="form-check-label" asp-for="RouteContainedItems">@T["Route contained items"]</label>
                    <span class="hint dashed">@T["Check to enabling the routing of child content items."]</span>
                </div>
            </div>
        </div>
    }

    @if (Model.Settings.ManageContainedItemRoutes && Model.Settings.AllowAbsolutePath)
    {
        <div class="@Orchard.GetWrapperClasses()">
            <div class="@Orchard.GetEndClasses(true)">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" asp-for="Absolute" checked="@Model.Absolute" />
                    <label class="form-check-label" asp-for="Absolute">@T["Absolute"]</label>
                    <span class="hint dashed">@T["Check to specify that a child content item will be routed to an absolute path."]</span>
                </div>
            </div>
        </div>
    }
</div>

@if (Model.Settings.AllowDisabled)
{
    <script at="Foot" depends-on="jquery">
        $('#@Html.IdFor(i => i.Disabled)').change(function (e) {
            var checked = $(e.target).prop('checked');
            $('.autoroute-disabled').each(function () {
                checked ? $(this).hide() : $(this).show();
            });
        });
    </script>
}
