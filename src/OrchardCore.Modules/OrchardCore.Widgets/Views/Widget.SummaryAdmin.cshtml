@using OrchardCore.ContentManagement
@using OrchardCore.Contents
@inject IAuthorizationService AuthorizationService
@{
    ContentItem contentItem = Model.ContentItem;
}

<div class="row">
    <div class="col-lg col-12 title d-flex  d-flex align-items-center">
        <div class="summary d-flex flex-column flex-md-row">
            <div class="contentitem me-2">
                @if (await AuthorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))
                {
                    <a admin-for="@contentItem" asp-route-returnUrl="@FullRequestPath" />
                }
                else
                {
                    @contentItem
                }
            </div>
            <div class="contenttype me-1">
                <span class="badge ta-badge font-weight-normal">
                    <i class="far fa-file-alt text-secondary" aria-hidden="true"></i> @contentItem.ContentType
                </span>
            </div>
            @if (Model.Header != null)
            {
                <div class="header me-1">
                    @await DisplayAsync(Model.Header)
                </div>
            }
            @if (Model.Tags != null)
            {
                <div class="tags me-1">
                    @await DisplayAsync(Model.Tags)
                </div>
            }
            @if (Model.Meta != null)
            {
                <div class="metadata me-1">
                    @await DisplayAsync(Model.Meta)
                </div>
            }
        </div>
    </div>
    <div class="col-lg-auto col-12 d-flex justify-content-end">
        <div class="actions">
            @if (Model.Actions != null)
            {
                @await DisplayAsync(Model.Actions)
            }
            @if (Model.ActionsMenu != null)
            {
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-secondary dropdown-toggle actions" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span>@T["Actions"]</span>
                    </button>
                    <div class="actions-menu dropdown-menu dropdown-menu-end">
                        @await DisplayAsync(Model.ActionsMenu)
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (Model.Content != null)
{
    <div class="row">
        <div class="col primary">
            @await DisplayAsync(Model.Content)
        </div>
    </div>
}
