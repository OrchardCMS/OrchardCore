@using OrchardCore.DisplayManagement
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager

@{
    var contentDefinitions = await ContentDefinitionManager.ListTypeDefinitionsAsync();
    //Set Model (Current Shape) as Child content of Outer Frame, Later this Model is used to render other shapes
    var contentCardFrame = await New.ContentCard_Frame();

    var contentItem = Model.ContentItem;
    Model.ContentTypeValue = contentItem.ContentType;

    //AJAX will not have CollectionShape.
    var updater = Model.CollectionShape?.Updater ?? Model.Updater;

    if (contentDefinitions.Any(c => c.Name == contentItem.ContentType))
    {
        if (Model.BuildEditor == true)
        {
            //Assign prefix
            if (string.IsNullOrEmpty(Model.PrefixValue))
            {
                Model.PrefixValue = Guid.NewGuid().ToString("n");
            }

            //Build Editor for Content Item
            // AJAX request is new request and will not have CollectionShape.
            var isNew = Model.CollectionShape == null ? true : false;
            IShape contentItemEditor = await ContentItemDisplayManager.BuildEditorAsync(contentItem, updater, isNew, string.Empty, Model.PrefixValue);

            //We don't show Actions and Side bar the parent editor has its own buttons.
            contentItemEditor.Properties["Actions"] = null;
            contentItemEditor.Properties["Sidebar"] = null;

            //Move Content Footer to Card Footer, if any
            Model.Footer = contentItemEditor.GetProperty<IShape>("Footer");
            contentItemEditor.Properties["Footer"] = null;

            Model.ContentEditor = contentItemEditor;

            //Change Shape type to Editor, this shape will be rendered from within Other Frame
            Model.Metadata.Alternates.Clear();
            Model.Metadata.Type = "ContentCard_Editor";

            contentCardFrame.ChildContent = Model;

            contentCardFrame.ColumnSize = Model.ColumnSize;
        }
        else
        {
            //Just Create Preview
            Model.ContentPreview = await ContentItemDisplayManager.BuildDisplayAsync(contentItem, updater, Model.DisplayType ?? "Detail");

            //Hide the Delete
            Model.CanDelete = false;

            //Change Shape type to Preview, this shape will be rendered from within Other Frame
            Model.Metadata.Alternates.Clear();
            Model.Metadata.Type = "ContentCard_Preview";

            contentCardFrame.ChildContent = Model;
        }
        //Display Outer Frame
        @await DisplayAsync(contentCardFrame)
    }
}
