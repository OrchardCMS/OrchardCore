@model EditPartViewModel
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.ContentManagement.Metadata.Settings
@using OrchardCore.Mvc.Utilities

@inject OrchardCore.ContentTypes.Services.IContentDefinitionService ContentDefinitionService

@{
    var orderedFields = Model.PartDefinition.Fields
        .Select(field => new { Field = field, Order = int.Parse(field.GetSettings<ContentPartFieldSettings>().Position ?? "0") })
        .OrderBy(x => x.Order)
        .Select(x => x.Field)
        .ToList();

    var fields = (await ContentDefinitionService.GetFieldsAsync()).ToList();
}
<zone Name="Title"><h1>@RenderTitleSegments(T["Edit Content Part - {0}", Model.DisplayName])</h1></zone>

<form asp-action="EditPart">
    @Html.ValidationSummary()

    @if (Model.Editor.Shortcuts != null)
    {
        <div class="mb-3">
            @await DisplayAsync(Model.Editor.Shortcuts)
        </div>
    }

    @await DisplayAsync(Model.Editor)

    @if (orderedFields.Count > 0 || fields.Count > 0)
    {
        <div class="mb-3">
            <h3>@T["Fields"]</h3>

            @if (Model.PartDefinition != null)
            {
                <ul class="list-group sortable" id="fields" style="cursor: move;">
                    @foreach (var field in orderedFields)
                    {
                        <li class="list-group-item">
                            <div class="w-100">
                                <div class="float-end">
                                    @if (fields.Any(x => x.Name.Equals(field.FieldDefinition.Name, StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <a asp-route-action="EditField" asp-route-id="@Model.PartDefinition.Name" asp-route-name="@field.Name" asp-route-returnUrl="@FullRequestPath" class="btn btn-primary btn-sm" role="button">@T["Edit"]</a>
                                    }
                                    <a asp-route-action="RemoveFieldFrom" asp-route-id="@Model.PartDefinition.Name" asp-route-name="@field.Name" class="btn btn-danger btn-sm" role="button" data-url-af="UnsafeUrl RemoveUrl">@T["Remove"]</a>
                                </div>
                                @field.DisplayName() <span class="hint dashed">@field.FieldDefinition.Name.CamelFriendly()</span>
                            </div>
                            <input type="hidden" name="OrderedFieldNames" value="@field.Name" />
                        </li>
                    }
                </ul>
            }
        </div>
        @if (fields.Count > 0)
        {
            <div class="mb-3">
                <a asp-route-action="AddFieldTo" asp-route-id="@Model.PartDefinition.Name" asp-route-returnUrl="@FullRequestPath" class="btn btn-info btn-sm" role="button">@T["Add Field"]</a>
            </div>
        }
    }
    <div class="mb-3">
        <button class="btn btn-primary save" type="submit" name="submit.Save" value="Save">@T["Save"]</button>
        <button class="btn btn-danger delete" type="submit" name="submit.Delete" value="Delete" data-url-af="RemoveUrl">@T["Delete"]</button>
    </div>
</form>
<script asp-name="Sortable" at="Foot"></script>
<script at="Foot" depends-on="Sortable">
    document.addEventListener('DOMContentLoaded', function () {
        const fields = document.getElementById("fields");

        if (fields) {
            Sortable.create(document.getElementById("fields"));
        }
    });
</script>
