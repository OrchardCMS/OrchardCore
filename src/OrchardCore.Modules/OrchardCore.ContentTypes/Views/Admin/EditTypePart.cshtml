@model EditTypePartViewModel
@using OrchardCore.ContentManagement.Metadata.Settings
@using OrchardCore.DisplayManagement

@inject OrchardCore.DisplayManagement.Theming.IThemeManager ThemeManager
@inject OrchardCore.DisplayManagement.Descriptors.IShapeTableManager ShapeTableManager

@{
    var typePart = Model.TypePartDefinition;
    var theme = await ThemeManager.GetThemeAsync();
    var shapeTable = await ShapeTableManager.GetShapeTableAsync(theme?.Id);
    var displayShapes = shapeTable.Bindings.Keys.Where(x => x.StartsWith(Model.TypePartDefinition.PartDefinition.Name + "_DisplayOption__", StringComparison.OrdinalIgnoreCase) || x.Equals(Model.TypePartDefinition.PartDefinition.Name + "_DisplayOption", StringComparison.OrdinalIgnoreCase));
    var editorShapes = shapeTable.Bindings.Keys.Where(x => x.StartsWith(Model.TypePartDefinition.PartDefinition.Name + "_Option__", StringComparison.OrdinalIgnoreCase) || x.Equals(Model.TypePartDefinition.PartDefinition.Name + "_Option", StringComparison.OrdinalIgnoreCase));
}

<zone Name="Title"><h1>@RenderTitleSegments(T["Edit Part - {0}", Model.DisplayName])</h1></zone>

<div class="alert alert-success" role="alert">
    @T["Some part settings common to all types can also be defined at the <a href=\"{0}\">Part Definition</a> level.", Url.Action("EditPart", new { id = typePart.PartDefinition.Name })]
</div>

<form asp-action="EditTypePart">
    @Html.ValidationSummary()

    @if (typePart.PartDefinition.IsReusable())
    {
        <div class="mb-3">
            <div class="w-lg-75 w-xl-50">
                <label asp-for="DisplayName" class="form-label">@T["Display Name"]</label>
                <input asp-for="DisplayName" class="form-control" />
            </div>
            <span class="hint">@T["Name of the part as it will be displayed in screens."]</span>
        </div>

        <div class="mb-3">
            <div class="w-lg-75 w-xl-50">
                <label asp-for="Description" class="form-label">@T["Description"]</label>
                <input asp-for="Description" class="form-control" />
            </div>
            <span class="hint">@T["The description of the part as it will be displayed in screens."]</span>
        </div>
    }

    @if (Model.Shape.Content != null)
    {
        @if (Model.Shape.Shortcuts != null)
        {
            <div class="mb-3">
                @await DisplayAsync(Model.Shape.Shortcuts)
            </div>
        }

        <div class="mb-3">
            @await DisplayAsync(Model.Shape.Content)
        </div>

        @if (editorShapes.Any())
        {
            <div class="mb-3">
                <label asp-for="Editor" class="form-label">@T["What type of editor should be used?"]</label>
                <select asp-for="Editor" class="form-select" id="type-part-editor-select">
                    @foreach (var editorShape in editorShapes)
                    {
                        var shape = await Factory.CreateAsync(editorShape);
                        shape.Properties["Editor"] = Model.Editor;
                        @await DisplayAsync(shape)
                    }
                </select>
            </div>
        }

        <div id="type-part-editor-container" class="mb-3" style="display: none">
            @await DisplayAsync(Model.Shape.Editor)
        </div>

        @if (displayShapes.Any())
        {
            <div class="mb-3">
                <label asp-for="DisplayMode" class="form-label">@T["What type of display mode should be used?"]</label>
                <select asp-for="DisplayMode" class="form-select" id="type-part-display-select">
                    @foreach (var displayShape in displayShapes)
                    {
                        var shape = await Factory.CreateAsync(displayShape);
                        shape.Properties["DisplayMode"] = Model.DisplayMode;
                        @await DisplayAsync(shape)
                    }
                </select>
            </div>
        }

        <div id="type-part-display-container" class="mb-3" style="display: none">
            @await DisplayAsync(Model.Shape.DisplayMode)
        </div>
    }

    <div class="mb-3">
        <button class="btn btn-primary save" type="submit" name="submit.Save" value="Save">@T["Save"]</button>
        <a class="btn btn-secondary cancel" role="button" asp-route-action="Edit" asp-route-id="@Model.TypePartDefinition.ContentTypeDefinition.Name">@T["Cancel"]</a>
    </div>
</form>

<script at="Foot">
    //<![CDATA[
    $(function () {
        $('.type-part-editor').hide();
        $('#type-part-editor-container').show();

        var typePartEditorSelect = $('#type-part-editor-select');
        if (typePartEditorSelect.length > 0) {
            $('.type-part-editor-' + typePartEditorSelect.val().toLowerCase()).show();

            typePartEditorSelect.change(function () {
                $('.type-part-editor').hide();
                $('.type-part-editor-' + typePartEditorSelect.val().toLowerCase()).show();
            });
        }

        $('.type-part-display').hide();
        $('#type-part-display-container').show();
        var typePartDisplaySelect = $('#type-part-display-select');
        if (typePartDisplaySelect.length > 0) {
            $('.type-part-display-' + typePartDisplaySelect.val().toLowerCase()).show();

            typePartDisplaySelect.change(function () {
                $('.type-part-display').hide();
                $('.type-part-display-' + typePartDisplaySelect.val().toLowerCase()).show();
            });
        }
    });
    //]]>
</script>
