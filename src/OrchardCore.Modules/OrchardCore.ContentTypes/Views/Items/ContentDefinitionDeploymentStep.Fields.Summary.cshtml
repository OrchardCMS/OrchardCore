@using OrchardCore.DisplayManagement.Views
@using OrchardCore.ContentTypes.Deployment
@model ShapeViewModel<ContentDefinitionDeploymentStep>
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager

<h5>@T["Update Content Definitions"]</h5>

@if (Model.Value.IncludeAll)
{
    <span class="badge ta-badge">All</span>
}
else
{
    var contentTypes = Model.Value.ContentTypes;
    var contentParts = Model.Value.ContentParts;

    var allTypes = await ContentDefinitionManager.ListTypeDefinitionsAsync();
    var allParts = await ContentDefinitionManager.ListPartDefinitionsAsync();

    var parts = allParts.Where(x => !allTypes.Any(y => y.Name == x.Name));

    if (contentTypes?.Length > 0)
    {
        foreach (var def in await ContentDefinitionManager.ListTypeDefinitionsAsync())
        {
            if (contentTypes.Contains(def.Name))
            {
                <span class="badge ta-badge">@def.DisplayName</span>
            }
        }
    }

    if (contentParts?.Length > 0)
    {
        foreach (var part in parts)
        {
            if (contentParts.Contains(part.Name))
            {
                <span class="badge ta-badge">@part.Name</span>
            }
        }
    }
}
<span class="hint d-block">@T["Content Definitions should be placed before any content steps."]</span>
