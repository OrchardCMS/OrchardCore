@model OrchardCore.Queries.Sql.ViewModels.AdminQueryViewModel
@using OrchardCore.ContentManagement
@inject IContentManager ContentManager

@{
  var matchAllQuery = OrchardCore.Queries.Sql.ViewModels.AdminQueryViewModel.MatchAllQueryBase64;
}

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-mode-sql" at="Foot"></script>

<zone Name="Title"><h1>@RenderTitleSegments(T["SQL Query"])</h1></zone>

<div asp-validation-summary="All"></div>

<form asp-action="Query" method="post" class="no-multisubmit">
    <div class="row">
        <div class="col-md-6">

            <div class="mb-3">
                <label asp-for="DecodedQuery" class="form-label">@T["Template"]</label>
                <textarea asp-for="DecodedQuery" rows="12" class="form-control"></textarea>
                <span class="hint">@T["You can <a href=\"{0}\">click here</a> to query all content items.", Html.Raw(Url.Action("Query", "Admin", new { area = "OrchardCore.Queries", Query = matchAllQuery }))]</span>
                <span class="hint">@T["The SQL query uses standard SQL92 syntax and is converted based on the actual database. Tables will be prefixed automatically."]</span>
            </div>
        </div>
        <div class="col-md-6">

            <div class="mb-3">
                <label asp-for="Parameters" class="form-label">@T["Parameters"]</label>
                <textarea asp-for="Parameters" rows="1" class="form-control"></textarea>
                <span class="hint">@T["An optional Json object containing the parameter values for this query."]</span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">@T["Query"]</button>
            </div>
        </div>
    </div>
</form>
@if (Model.Elapsed != TimeSpan.Zero)
{
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label asp-for="RawSql" class="form-label">@T["Final SQL Query"]</label>
                <textarea asp-for="RawSql" rows="12" class="form-control"></textarea>
                <span class="hint">@T["The query as it will be executed by the SQL database."]</span>
            </div>

            <div class="mb-3">
                <a href="@Url.Action("Create", "Admin", new { area = "OrchardCore.Queries", id = "Sql", query = Model.DecodedQuery })" class="btn btn-success">@T["Create"]</a>
            </div>
        </div>
    </div>
}

@if (Model.Documents.Any())
{
    <span class="text-muted">@T["Query executed in {0} ms", Model.Elapsed.TotalMilliseconds]</span>

    var json = "";
    if (Model.Documents.Any())
    {
        json = "[";
        var i = 0;

        @foreach (var document in Model.Documents)
        {
            json += Json.Serialize(document);
            if (i < Model.Documents.Count() - 1)
            {
                json += ",";
            }
            i++;
        }

        json += "]";
    }

    <div class="form-control" style="min-height: 400px;">
        <div id="monaco_editor" style="min-height: 385px;" dir="@Orchard.CultureDir()"></div>
    </div>
    <textarea id="monaco_textarea" hidden>@json</textarea>
}

@{
    string sqlmode = "text/x-sql";

    if (Model.FactoryName.Contains("Sqlite"))
    {
        sqlmode = "text/x-sqlite";
    }
    else if (Model.FactoryName.Contains("Mysql"))
    {
        sqlmode = "text/x-mysql";
    }
    else if (Model.FactoryName.Contains("Npgsql"))
    {
        sqlmode = "text/x-pgsql";
    }
    else if (Model.FactoryName.Contains("Sql"))
    {
        sqlmode = "text/x-mssql";
    }
}

<script at="Foot">
    $(function () {
        CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(m => m.DecodedQuery)'), { mode: "text/x-pgsql", lineNumbers: true, viewportMargin: Infinity });
        CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(m => m.Parameters)'), { mode: "javascript", json: true, lineNumbers: true, viewportMargin: Infinity });
        if (rawSql = document.getElementById('@Html.IdFor(m => m.RawSql)')) {
            CodeMirror.fromTextArea(rawSql, { mode: "@sqlmode", lineNumbers: true, readonly: true, viewportMargin: Infinity });
        }
    });
</script>
<script asp-name="monaco" at="Foot"></script>
<script at="Foot" asp-name="jsonrecipe-editor" depends-on="monaco, admin">
    document.addEventListener('DOMContentLoaded', function () {
        require(['vs/editor/editor.main'], function () {

            const html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            const textArea = document.getElementById('monaco_textarea');
            const modelUri = monaco.Uri.parse("json://grid/settings.json");
            const jsonModel = monaco.editor.createModel(JSON.stringify(textArea, null, 4), "json", modelUri);

            var editor = monaco.editor.create(document.getElementById('monaco_editor'), {
                automaticLayout: true,
                language: "json",
                lineNumbers: false,
                minimap: { enabled: false },
                model: jsonModel
            });

            editor.getModel().setValue(textArea.value);

            //format json
            setTimeout(function () {
                editor.getAction('editor.action.formatDocument').run();
            }, 300);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });
        });
    });
</script>
