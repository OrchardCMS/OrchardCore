@{
    Layout = "_Layout";
    var previewId = ViewContext.RouteData.Values["id"];
}

<script asp-name="js-cookie" at="Foot"></script>
<script asp-name="jQuery" at="Foot"></script>

<iframe id="iframe" title="iframe" style="position:fixed; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%; border:none; margin:0; padding:0; overflow:hidden; z-index:999990;">
    Your browser doesn't support iframes
</iframe>

<div id="notConnectedWarning" class="alert alert-info alert-dismissible fade show collapse" role="alert" style="position:fixed; height:60px; top:10px;right:40px; display:none; z-index:999999;">
    <button type="button" id="close-connect-warning" class="btn-close" aria-label="Close" style="position: relative; padding: 0 0 0 1rem; margin-top: -0.2rem;"></button>
    <span>@T["Preview Disconnected"] </span>
</div>

<div id="serverErrorWarning" class="alert alert-warning alert-dismissible fade show" role="alert" style="position:fixed; top:10px;right:40px; display:none; z-index:999999;">
    <button type="button" id="close-server-warning" class="btn-close" aria-label="Close" style="position: relative; padding: 0 0 0 1rem; margin-top: -0.2rem;"></button>
    <p>@T["Preview Error"] </p>
    <ul></ul>
</div>

<div id="renderPreviewUrl" style="display:none" data-value="@Url.Action("Render", "Preview", new { area = "OrchardCore.ContentPreview" })"></div>

<resources type="Footer" />

<script>
    let iframe = document.getElementById('iframe');
    let previewRenderTimer = null, previewRendering, previewRenderData, initialized, renderPreviewUrl;

    $(function () {
        var previewEventTimer = null;
        renderPreviewUrl = document.getElementById('renderPreviewUrl').getAttribute('data-value');
        $(window).on('storage', function (ev) {
            if (ev.key.indexOf('contentpreview:not-connected:') !== -1) {
                $(notConnectedWarning).show();
            }
            else if (ev.key.indexOf('contentpreview:') !== -1) {
                if (ev.originalEvent.newValue != null) {
                    // Smooth event cascading
                    clearTimeout(previewEventTimer);
                    previewEventTimer = setTimeout(function () { renderPreview(ev.originalEvent.newValue); }, 150);
                    $(notConnectedWarning).hide();
                }
            }
        });

        // override default behaviour of Bootstrap's. We only hide, not remove the alert.
        $('#close-connect-warning').on('click', function () {
            $('#notConnectedWarning').hide();
        });

        $('#close-server-warning').on('click', function () {
            $('#serverErrorWarning').hide();
        });

        var preview = localStorage.getItem('contentpreview:@previewId');

        if (preview == null) {
            // notify the editor to render the preview
            localStorage.setItem('contentpreview:ready:@previewId', '');
            localStorage.removeItem('contentpreview:ready:@previewId');
        }
        else {
            renderPreview(preview);
        }
    });

    iframe.onload = function () {
        // The iframe may not be well setup after the first loading and then on the first editor update
        // we may lose the scrolling position. A workaround is to re-fetch the page once after or to add
        // here a delay that really block the thread before exiting. Here, we just rewrite the document.
        if (!initialized) {
            if (this.contentWindow) {
                iframe.contentWindow.document.open();
                iframe.contentWindow.document.write(previewRenderData);
                iframe.contentWindow.document.close();
            }
            initialized = true;
        }
        previewRendering = false;
    }

    function renderPreview(value) {
        if (previewRendering) {
            // Defer the last rendering
            clearTimeout(previewRenderTimer);
            previewRenderTimer = setTimeout(function () { renderPreview(value); }, 150);
            return;
        }

        previewRendering = true;
        clearTimeout(previewRenderTimer);

        try {
            var formData = JSON.parse(value);
            if (!formData) {
                previewRendering = false;
                return;
            }

            $.post(renderPreviewUrl, formData)
                .done(function (data) {
                    if (iframe && iframe.contentWindow) {
                        iframe.contentWindow.document.open();
                        iframe.contentWindow.document.write(data);
                        iframe.contentWindow.document.close();
                        previewRenderData = data;
                    }
                    $(serverErrorWarning).hide();
                })
                .fail(function (data) {
                    if (data.responseJSON && data.responseJSON.errors) {
                        var ul = $('#serverErrorWarning ul').empty();
                        data.responseJSON.errors.forEach(function (error) {
                            console.error(error);
                            $('<li />').text(error).appendTo(ul);
                        });
                        $(serverErrorWarning).show();
                    }
                    previewRendering = false;
                });
        }
        catch (e) {
            previewRendering = false;
            console.log('Error while previewing: ' + e);
        }
    }
</script>
