@using OrchardCore.Email.Workflows.ViewModels
@model EmailTaskViewModel

<div class="mb-3" asp-validation-class-for="AuthorExpression">
    <label asp-for="AuthorExpression" class="form-label">@T["From"]</label>
    <input type="text" asp-for="AuthorExpression" class="form-control code" />
    <span asp-validation-for="AuthorExpression"></span>
    <span class="hint">@T["The author's email address that defines who the email is from. Leave blank to use the configured email address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="SenderExpression">
    <label asp-for="SenderExpression" class="form-label">@T["Sender"]</label>
    <input type="text" asp-for="SenderExpression" class="form-control code" />
    <span asp-validation-for="SenderExpression"></span>
    <span class="hint">@T["The sender's email address. Required if not the same than the \"From\" email address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="ReplyToExpression">
    <label asp-for="SenderExpression" class="form-label">@T["ReplyTo"]</label>
    <input type="text" asp-for="ReplyToExpression" class="form-control code" />
    <span asp-validation-for="ReplyToExpression"></span>
    <span class="hint">@T["The \"reply to\" email address. Required if you want email replies be sent to a different address than the \"From\" address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="RecipientsExpression">
    <label asp-for="RecipientsExpression" class="form-label">@T["Recipients"]</label>
    <input type="text" asp-for="RecipientsExpression" class="form-control code" />
    <span asp-validation-for="RecipientsExpression"></span>
    <span class="hint">@T["The comma-separated list of recipient email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="CcExpression">
    <label asp-for="CcExpression" class="form-label">@T["Cc"]</label>
    <input type="text" asp-for="CcExpression" class="form-control code" />
    <span asp-validation-for="CcExpression"></span>
    <span class="hint">@T["The comma-separated list of carbon copy email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="BccExpression">
    <label asp-for="BccExpression" class="form-label">@T["Bcc"]</label>
    <input type="text" asp-for="BccExpression" class="form-control code" />
    <span asp-validation-for="BccExpression"></span>
    <span class="hint">@T["The comma-separated list of blind copy email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="SubjectExpression">
    <label asp-for="SubjectExpression" class="form-label">@T["Subject"]</label>
    <input type="text" asp-for="SubjectExpression" class="form-control code" />
    <span asp-validation-for="SubjectExpression"></span>
    <span class="hint">@T["The subject of the email message. With Liquid support."]</span>
</div>

<div class="mb-3">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="IsHtmlBody" />
        <label class="form-check-label" asp-for="IsHtmlBody">@T["Does the Body contain HTML?"]</label>
        <span class="hint dashed">@T["If checked, indicates the body of the email message will be sent as HTML."]</span>
    </div>
</div>

<div class="mb-3" id="body">
    <label asp-for="Body" class="form-label">@T["Body"]</label>
    <textarea asp-for="Body" rows="5" class="form-control"></textarea>
    <span class="hint">@T["The body of the email message. With Liquid support."]</span>
</div>

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>
<script asp-src="~/OrchardCore.Liquid/codemirror/liquid.js" at="Foot"></script>

<script at="Foot">
$(function () {
    var bodyEditor = CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(x => x.Body)'), {
        lineNumbers: true,
        styleActiveLine: true,
        matchBrackets: true,
        mode: { name: "liquid" },
    });
});
</script>
