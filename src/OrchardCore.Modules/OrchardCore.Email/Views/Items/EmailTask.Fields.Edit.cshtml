@using OrchardCore.Email.Workflows.ViewModels
@model EmailTaskViewModel
@functions
{
    private enum MailMessageFormat
    {
        Text,
        Html,
        All
    }
}

<div class="mb-3" asp-validation-class-for="AuthorExpression">
    <label asp-for="AuthorExpression" class="form-label">@T["From"]</label>
    <input type="text" asp-for="AuthorExpression" class="form-control code" />
    <span asp-validation-for="AuthorExpression"></span>
    <span class="hint">@T["The author's email address that defines who the email is from. Leave blank to use the configured email address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="SenderExpression">
    <label asp-for="SenderExpression" class="form-label">@T["Sender"]</label>
    <input type="text" asp-for="SenderExpression" class="form-control code" />
    <span asp-validation-for="SenderExpression"></span>
    <span class="hint">@T["The sender's email address. Required if not the same than the \"From\" email address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="ReplyToExpression">
    <label asp-for="SenderExpression" class="form-label">@T["ReplyTo"]</label>
    <input type="text" asp-for="ReplyToExpression" class="form-control code" />
    <span asp-validation-for="ReplyToExpression"></span>
    <span class="hint">@T["The \"reply to\" email address. Required if you want email replies be sent to a different address than the \"From\" address. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="RecipientsExpression">
    <label asp-for="RecipientsExpression" class="form-label">@T["Recipients"]</label>
    <input type="text" asp-for="RecipientsExpression" class="form-control code" />
    <span asp-validation-for="RecipientsExpression"></span>
    <span class="hint">@T["The comma-separated list of recipient email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="CcExpression">
    <label asp-for="CcExpression" class="form-label">@T["Cc"]</label>
    <input type="text" asp-for="CcExpression" class="form-control code" />
    <span asp-validation-for="CcExpression"></span>
    <span class="hint">@T["The comma-separated list of carbon copy email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="BccExpression">
    <label asp-for="BccExpression" class="form-label">@T["Bcc"]</label>
    <input type="text" asp-for="BccExpression" class="form-control code" />
    <span asp-validation-for="BccExpression"></span>
    <span class="hint">@T["The comma-separated list of blind copy email addresses. With Liquid support."]</span>
</div>

<div class="mb-3" asp-validation-class-for="SubjectExpression">
    <label asp-for="SubjectExpression" class="form-label">@T["Subject"]</label>
    <input type="text" asp-for="SubjectExpression" class="form-control code" />
    <span asp-validation-for="SubjectExpression"></span>
    <span class="hint">@T["The subject of the email message. With Liquid support."]</span>
</div>

<div class="mb-3">
    <label>@T["Format"]</label>
    <select class="form-select">
        <option value="@MailMessageFormat.Text">@nameof(MailMessageFormat.Text)</option>
        <option value="@MailMessageFormat.Html">@nameof(MailMessageFormat.Html)</option>
        <option value="@MailMessageFormat.All">@nameof(MailMessageFormat.All)</option>
    </select>
    <span class="hint">@T["The format of the email message."]</span>
</div>

<div class="mb-3" id="textBody">
    <label asp-for="TextBody">@T["Text Body"]</label>
    <textarea asp-for="TextBody" rows="5" class="form-control"></textarea>
    <span class="hint">@T["The plain text body of the email message. With Liquid support."]</span>
</div>

<div class="mb-3 d-none" id="htmlBody">
    <label asp-for="HtmlBody">@T["HTML Body"]</label>
    <textarea asp-for="HtmlBody" rows="5" class="form-control"></textarea>
    <span class="hint">@T["The HTML body of the email message. With Liquid support."]</span>
</div>

<style asp-name="codemirror"></style>
<script asp-name="codemirror" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-addon-mode-simple" at="Foot"></script>
<script asp-name="codemirror-addon-mode-multiplex" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>
<script asp-src="~/OrchardCore.Liquid/codemirror/liquid.js" at="Foot"></script>

<script at="Foot">
    $(function () {
        var textBodyEditor = CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(x => x.TextBody)'), {
            lineNumbers: true,
            styleActiveLine: true,
            matchBrackets: true,
            mode: { name: "liquid" },
        });
        var htmlBodyEditor = CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(x => x.HtmlBody)'), {
            lineNumbers: true,
            styleActiveLine: true,
            matchBrackets: true,
            mode: { name: "liquid" },
        });

        $('select').on('change', function () {
            var selectedValue = $(this).val();
            switch (selectedValue) {
                case '@MailMessageFormat.Text':
                    $('#textBody').removeClass('d-none');
                    $('#htmlBody').addClass('d-none');
                    break;
                case '@MailMessageFormat.Html':
                    $('#textBody').addClass('d-none');
                    $('#htmlBody').removeClass('d-none');
                    break;
                case '@MailMessageFormat.All':
                    $('#textBody').removeClass('d-none');
                    $('#htmlBody').removeClass('d-none');
                    break;
            }
        });
    });
</script>
