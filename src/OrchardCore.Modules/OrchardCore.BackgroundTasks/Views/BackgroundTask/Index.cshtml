@model BackgroundTaskIndexViewModel

<zone Name="Title"><h1>@RenderTitleSegments(T["Background Tasks"])</h1></zone>

<form asp-action="Index" method="post" class="no-multisubmit">
    <input type="submit" name="submit.Filter" id="submitFilter" class="visually-hidden" />

    <div class="card text-bg-theme mb-3 position-sticky action-bar">
        <div class="card-body">

            <div class="row gx-3">
                <div class="col">
                    <div class="has-search">
                        <i class="fa-solid fa-search form-control-feedback" aria-hidden="true"></i>
                        <input id="search-box" asp-for="Options.Search" class="form-control" placeholder="@T["Search"]" type="search" autofocus />
                    </div>
                </div>
            </div>

        </div>
    </div>

    <ul class="list-group">
        <li class="list-group-item text-bg-theme">
            <div class="row gx-3">
                <div class="col">
                </div>
                <div class="col-auto">
                    <div class="btn-group filter">
                        <select asp-for="Options.Status" asp-items="@Model.Options.Statuses" class="selectpicker show-tick me-2" data-header="@T["Filter by status"]" data-width="fit" data-selected-text-format="static" data-dropdown-align-right="true" title="@T["Status"]" data-style="btn-sm"></select>
                    </div>
                </div>
            </div>
        </li>
        @if (Model.Tasks.Count > 0)
        {
            foreach (var task in Model.Tasks)
            {
                <li class="list-group-item">
                    <div class="d-flex">
                        <div class="me-auto">
                            <span class="text-primary" title="@T["Settings"]"><i class="fa-solid fa-cog" aria-hidden="true"></i></span>
                            <span class="text-primary"><a asp-action="Edit" asp-route-name="@task.Name">@task.Title</a></span>
                        </div>
                        <div>
                            <a asp-action="Edit" asp-route-name="@task.Name" class="btn btn-primary btn-sm">@T["Edit"]</a>

                            @if (task.Enable)
                            {
                                <a asp-action="Disable" asp-route-name="@task.Name" class="btn btn-sm btn-danger" data-url-af="UnsafeUrl">@T["Disable"]</a>
                            }
                            else
                            {
                                <a asp-action="Enable" asp-route-name="@task.Name" class="btn btn-sm btn-success" data-url-af="UnsafeUrl">@T["Enable"]</a>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(task.Description))
                    {
                        <div class="row">
                            <div class="col">
                                <p class="mb-0"><small class="text-muted">@task.Description</small></p>
                            </div>
                        </div>
                    }
                </li>
            }
        }
        else
        {
            <li class="list-group-item">
                <div class="alert alert-info mb-0">
                    @T["<strong>Nothing here!</strong> Your search returned no results."]
                </div>
            </li>
        }
    </ul>

</form>

@await DisplayAsync(Model.Pager)

<script asp-name="bootstrap-select" depends-on="bootstrap" at="Foot"></script>

<script at="Foot">
    $(function () {
        $('.selectpicker').selectpicker();
        $('.selectpicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            $("[name='submit.Filter']").click();
        });
        $(".filter-options select, .filter-options input").on("change", function () {
            $("[name='submit.Filter']").click();
        });

        var filters = $(".filter");
        filters.show();
    });
</script>
