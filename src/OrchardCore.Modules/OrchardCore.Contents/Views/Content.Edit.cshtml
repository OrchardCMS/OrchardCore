@using OrchardCore.DisplayManagement.Zones
@using OrchardCore

<style asp-src="~/OrchardCore.Contents/Styles/Contents.min.css" debug-src="~/OrchardCore.Contents/Styles/Contents.css"></style>

<div class="edit-container @(Model.Sidebar != null ? "sidebar" : "")">
    <div class="edit-body">
        <div class="edit-item-primary">
            @if (Model.Content != null)
            {
                <div class="edit-item-content">
                    @await DisplayAsync(Model.Content)
                </div>
            }
        </div>
        <div class="edit-item-parts">
            @if (Model.Parts != null)
            {
                @await DisplayAsync(Model.Parts)
            }
        </div>

        @if (Model.Actions != null)
        {
            <div class="@Orchard.GetWrapperClasses("edit-item-secondary","group")">
                <div class="@Orchard.GetEndClasses(true, "edit-item-actions")">
                    @await DisplayAsync(Model.Actions)

                    @{
                        var returnUrl = Context.Request.Query["returnUrl"];
                    }

                    @if (!string.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
                    {
                        <a class="btn btn-secondary cancel mb-1" role="button" href="@returnUrl">@T["Cancel"]</a>
                    }
                </div>
            </div>
        }
    </div>
    @if (Model.Sidebar != null)
    {
        <div class="edit-sidebar-handler"></div>
        <div class="edit-sidebar group">
            @await DisplayAsync(Model.Sidebar)
        </div>
    }
</div>

@if (Model.Actions != null)
{
    @if (!string.IsNullOrWhiteSpace(Context.Request.Query["returnUrl"]))
    {
        @Html.Hidden("returnUrl", Context.Request.Query["returnUrl"])
    }
}
