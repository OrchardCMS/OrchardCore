@model MarkdownBodyPartViewModel
@using OrchardCore
@using OrchardCore.ContentLocalization
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.Localization
@using OrchardCore.Markdown.ViewModels
@using OrchardCore.Markdown.Settings

@{
    var settings = Model.TypePartDefinition.GetSettings<MarkdownBodyPartSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.MarkdownBodyPart.ContentItem);
}

<style asp-name="codemirror"></style>
<style asp-name="mdecss" asp-src="~/OrchardCore.Markdown/Styles/mde.min.css" debug-src="~/OrchardCore.Markdown/Styles/mde.css"></style>

@await DisplayAsync(await New.ShortcodeModal())

<div class="@Orchard.GetWrapperClasses("mde-editor")">
    <label asp-for="Markdown" class="@Orchard.GetLabelClasses()">@Model.TypePartDefinition.DisplayName()</label>
    <div class="@Orchard.GetEndClasses()">
        <span class="hint">@T["The markdown text of the content item."]</span>
        <textarea asp-for="Markdown" rows="5" class="form-control content-preview-text"></textarea>
    </div>
</div>

<script at="Foot">
    $(function () {
        var markdownElement = document.getElementById("@Html.IdFor(m => m.Markdown)");
        @* When part is rendered by a flow part only the elements scripts are rendered, so the html element will not exist. *@
        if (markdownElement) {
            var mde = new EasyMDE({
                element: markdownElement,
                forceSync: true,
                toolbar: mdeToolbar,
                autoDownloadFontAwesome: false
            });

            initializeMdeShortcodeWrapper(mde);

            mde.codemirror.on('change', function () {
                $(document).trigger('contentpreview:render');
            });

            @if (culture.IsRightToLeft())
            {
                <text>$('.editor-toolbar').attr('style', 'direction:rtl;text-align:right');
                $('.CodeMirror').attr('style', 'text-align:right');</text>
            }
        }
    });
</script>
