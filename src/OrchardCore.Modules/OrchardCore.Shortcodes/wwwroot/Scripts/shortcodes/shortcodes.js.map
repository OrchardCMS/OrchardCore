{"mappings":"osCAAA,MAuBMA,EAA2B,kDAI3BC,EAAuB,yHA0B7B,IAAIC,EAnBJC,SAASC,iBAAiB,oBAAoB,KAC3BD,SAASE,iBAAiB,0BAClCC,SAAQC,IACXA,EAAMC,mBAAmB,cAAeR,GACxCO,EAAME,cAAcD,mBAAmB,YAAaP,EAAA,IAGxCE,SAASE,iBAAiB,wBAClCC,SAAQI,IACZA,EAAON,iBAAiB,SAASO,IAC7B,MAAMJ,EAAQI,EAAMC,OAAOC,QAAQ,4BAA4BC,cAAc,0BAE7EZ,EAAca,MAAKC,IA9CT,EAACC,EAASC,KAC5B,GAAIf,SAASgB,UAETF,EAAQG,QACIjB,SAASgB,UAAUE,cAC3BC,KAAOJ,EACXD,EAAQG,aACL,GAAIH,EAAQM,gBAA6C,MAA3BN,EAAQM,eAAwB,CAEjE,MAAMC,EAAWP,EAAQM,eACnBE,EAASR,EAAQS,aACjBC,EAAYV,EAAQU,UAC1BV,EAAQW,MAAQX,EAAQW,MAAMC,UAAU,EAAGL,GAAYN,EAAUD,EAAQW,MAAMC,UAAUJ,EAAQR,EAAQW,MAAME,QAC/Gb,EAAQG,QACRH,EAAQM,eAAiBC,EAAWN,EAAQY,OAC5Cb,EAAQS,aAAeF,EAAWN,EAAQY,OAC1Cb,EAAQU,UAAYA,CACxB,MACIV,EAAQW,OAASV,EACjBD,EAAQG,OACZ,EA2BYW,CAAcxB,EAAOS,EAAA,GACzB,GACJ,GACJ,IAKJ,MAsFMgB,EAAiB7B,SAAS8B,eAAe,kBAE3CD,GAxF4B,CAACf,IAC7B,GAAIA,IAAYf,EAAe,CAC3B,IAAIgC,EAAYjB,EAAQkB,GACpBC,EAAaC,KAAKC,MAAMrB,EAAQsB,QAAQH,YAAc,MACtDI,EAAaH,KAAKC,MAAMrB,EAAQsB,QAAQC,YAAc,MAE1DtC,EAAgB,IAAIuC,IAAI,CACpBC,GAAI,IAAMR,EACVS,KAAO,WACH,MAAO,CACHC,OAAQ,GACRC,cAAeT,EACfU,mBAAoBV,EACpBI,WAAYA,EACZxB,aAAc,GACd+B,MAAO,KAEf,EACAC,MACA,CACI,MAAAJ,CAAOA,GACH,GAAIA,EAAQ,CACR,IAAIK,EAAQL,EAAOM,cACnBC,KAAKL,mBAAqBK,KAAKN,cAC1BD,QAAOQ,GAAKA,EAAEC,KAAKC,WAAWL,IACvC,MACIE,KAAKL,mBAAqBK,KAAKN,aAEvC,GAEJU,QAAS,CACL,IAAAxC,CAAKyC,GAEGA,IACAL,KAAKK,QAAUA,GAEnBL,KAAKM,cAAgB,GACrBN,KAAKJ,MAAQ,IAAIW,UAAUC,MAAMR,KAAKS,KACtCT,KAAKJ,MAAMc,OACX,MAAMC,EAAOX,KACbA,KAAKS,IAAIxD,iBAAiB,kBAAkB,SAAU2D,GAClDD,EAAKE,MAAMpB,OAAOxB,OACtB,GACJ,EACA,OAAAoC,CAAQxC,GAGR,EACA,WAAAiD,CAAYC,GAGJf,KAAKL,mBADLoB,EAC0Bf,KAAKN,cAC1BD,QAAOQ,GAAKA,EAAEZ,WAAW2B,MAAKC,GAAKA,EAAElB,gBAAkBgB,EAAShB,kBAE3CC,KAAKN,cAEnCM,KAAKP,OAAS,EAClB,EACA,SAAAyB,CAAUhB,GACN,OAAOF,KAAKL,mBAAmBqB,MAAKf,GAAKA,EAAEC,OAASA,GACxD,EACA,eAAAiB,CAAgB3D,GACZwC,KAAKnC,aAAgBL,EAAMC,OAAO2B,QAAQvB,aAC1CmC,KAAKJ,MAAMwB,OACXpB,KAAKK,QAAQL,KAAKnC,aACtB,IAKZ,GAmBAwD,CAAwBxC,E","sources":["src/OrchardCore.Modules/OrchardCore.Shortcodes/Assets/js/shortcodes.ts"],"sourcesContent":["const insertAtCaret = (element, myValue) => {\n    if (document.selection) {\n        //For browsers like Internet Explorer\n        element.focus();\n        const sel = document.selection.createRange();\n        sel.text = myValue;\n        element.focus();\n    } else if (element.selectionStart || element.selectionStart === \"0\") {\n        //For browsers like Firefox and Webkit based\n        const startPos = element.selectionStart;\n        const endPos = element.selectionEnd;\n        const scrollTop = element.scrollTop;\n        element.value = element.value.substring(0, startPos) + myValue + element.value.substring(endPos, element.value.length);\n        element.focus();\n        element.selectionStart = startPos + myValue.length;\n        element.selectionEnd = startPos + myValue.length;\n        element.scrollTop = scrollTop;\n    } else {\n        element.value += myValue;\n        element.focus();\n    }\n};\nconst shortcodeWrapperTemplate = `\n<div class=\"shortcode-modal-wrapper\"></div>\n`;\nconst shortcodeBtnTemplate = `\n<button type=\"button\" class=\"shortcode-modal-btn btn btn-sm\">\n    <span class=\"icon-shortcode\"></span>\n</button>\n`;\n// Wraps each .shortcode-modal-input class with a wrapper, and attaches detaches the shortcode app as required.\ndocument.addEventListener('DOMContentLoaded', () => {\n    const inputs = document.querySelectorAll('.shortcode-modal-input');\n    inputs.forEach(input => {\n        input.insertAdjacentHTML('beforebegin', shortcodeWrapperTemplate);\n        input.parentElement.insertAdjacentHTML('beforeend', shortcodeBtnTemplate);\n    });\n    const buttons = document.querySelectorAll('.shortcode-modal-btn');\n    buttons.forEach(button => {\n        button.addEventListener('click', event => {\n            const input = event.target.closest('.shortcode-modal-wrapper').querySelector('.shortcode-modal-input');\n            shortcodesApp.init(defaultValue => {\n                insertAtCaret(input, defaultValue);\n            });\n        });\n    });\n})\nlet shortcodesApp;\nconst initializeShortcodesApp = (element) => {\n    if (element && !shortcodesApp) {\n        let elementId = element.id;\n        let shortcodes = JSON.parse(element.dataset.shortcodes || \"[]\");\n        let categories = JSON.parse(element.dataset.categories || \"[]\");\n        shortcodesApp = new Vue({\n            el: '#' + elementId,\n            data : function () {\n                return {\n                    filter: '',\n                    allShortcodes: shortcodes,\n                    filteredShortcodes: shortcodes,\n                    categories: categories,\n                    defaultValue: '',\n                    modal: null\n                }\n            },\n            watch:\n            {\n                filter(filter) {\n                    if (filter) {\n                        let lower = filter.toLowerCase();\n                        this.filteredShortcodes = this.allShortcodes\n                            .filter(s => s.name.startsWith(lower));\n                    } else {\n                        this.filteredShortcodes = this.allShortcodes;\n                    }\n                }\n            },            \n            methods: {\n                init(onClose)\n                {\n                    if (onClose) {\n                        this.onClose = onClose;\n                    }\n                    this.selectedValue = '';\n                    this.modal = new bootstrap.Modal(this.$el);\n                    this.modal.show();\n                    const self = this;\n                    this.$el.addEventListener('shown.bs.modal', function (e) {\n                        self.$refs.filter.focus();\n                    });\n                },\n                onClose(defaultValue)\n                {\n                    return;\n                },\n                setCategory(category)\n                {\n                    if (category) {\n                        this.filteredShortcodes = this.allShortcodes\n                            .filter(s => s.categories.some(c => c.toLowerCase() === category.toLowerCase()));\n                    } else {\n                        this.filteredShortcodes = this.allShortcodes;\n                    }\n                    this.filter = '';\n                },            \n                isVisible(name) {\n                    return this.filteredShortcodes.some(s => s.name === name);\n                },\n                insertShortcode(event) {\n                    this.defaultValue =  event.target.dataset.defaultValue;\n                    this.modal.hide();\n                    this.onClose(this.defaultValue);\n                }\n            }\n        });\n        return shortcodesApp;\n    }\n}\n// initializes a code mirror editor with a shortcode modal.\nconst initializeCodeMirrorShortcodeWrapper = (editor) => {\n    const codemirrorWrapper = editor.display.wrapper;\n    codemirrorWrapper.insertAdjacentHTML('beforebegin', shortcodeWrapperTemplate);\n    codemirrorWrapper.parentElement.insertAdjacentHTML('beforeend', shortcodeBtnTemplate);\n    codemirrorWrapper.parentElement.querySelector('.shortcode-modal-btn').addEventListener('click', () => {\n        shortcodesApp.init(defaultValue => {\n            editor.replaceSelection(defaultValue);   \n        });   \n    });  \n}\nconst shortcodeModal = document.getElementById(\"shortcodeModal\");\nif (shortcodeModal) {\n    initializeShortcodesApp(shortcodeModal);\n}\n"],"names":["shortcodeWrapperTemplate","shortcodeBtnTemplate","shortcodesApp","document","addEventListener","querySelectorAll","forEach","input","insertAdjacentHTML","parentElement","button","event","target","closest","querySelector","init","defaultValue","element","myValue","selection","focus","createRange","text","selectionStart","startPos","endPos","selectionEnd","scrollTop","value","substring","length","insertAtCaret","shortcodeModal","getElementById","elementId","id","shortcodes","JSON","parse","dataset","categories","Vue","el","data","filter","allShortcodes","filteredShortcodes","modal","watch","lower","toLowerCase","this","s","name","startsWith","methods","onClose","selectedValue","bootstrap","Modal","$el","show","self","e","$refs","setCategory","category","some","c","isVisible","insertShortcode","hide","initializeShortcodesApp"],"version":3,"file":"shortcodes.js.map"}