@using Microsoft.AspNetCore.Html
@using OrchardCore.Features
@using OrchardCore.Modules
@model FeaturesViewModel
@{
    var title = T["Features"];
    if (!string.IsNullOrEmpty(Model.Name))
    {
        title = T["Features for {0} tenant", Model.Name];
    }
}

<zone Name="Title"><h1>@RenderTitleSegments(title)</h1></zone>

<form autocomplete="off" class="position-sticky action-bar">
    <div class="card text-bg-theme mb-3">
        <div class="card-body">

            <div class="row gx-3">
                <div class="col">
                    <div class="has-search">
                        <i class="fa-solid fa-search form-control-feedback" aria-hidden="true"></i>
                        <input id="search-box" class="form-control" placeholder="@T["Search"]" type="search" autofocus />
                    </div>
                </div>
                <div class="col-auto">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="bulk-action-menu-button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @T["Bulk Actions"]
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bulk-action-menu-button">
                            <li><a class="dropdown-item" href="#" data-action="@nameof(FeaturesBulkAction.Disable)">@T["Disable"]</a></li>
                            <li><a class="dropdown-item" href="#" data-action="@nameof(FeaturesBulkAction.Enable)">@T["Enable"]</a></li>
                            <li><a class="dropdown-item" href="#" data-action="@nameof(FeaturesBulkAction.Toggle)">@T["Toggle"]</a></li>
                        </ul>
                    </div>
                </div>
            </div>

        </div>
    </div>
</form>

<form asp-action="Features" method="post" class="no-multisubmit">
    <input name="BulkAction" type="hidden" />
    <input name="Force" type="hidden" value="true" />
    <input type="submit" name="submit.BulkAction" class="d-none" />
    @{
        var featureGroups = Model.Features.GroupBy(f => f.Descriptor.Category).OrderBy(o => o.Key).ToArray();
        foreach (var featureGroup in featureGroups)
        {
            var categoryName = featureGroup.First().Descriptor.Category ?? T["Uncategorized"].Value;
            var categoryClassName = string.Format("category {0}", Html.Encode(categoryName.ToString()));
            if (featureGroup == featureGroups.First())
            {
                categoryClassName += " first";
            }
            if (featureGroup == featureGroups.Last())
            {
                categoryClassName += " last";
            }
            var features = featureGroup.OrderBy(f => f.Descriptor.Name);

            var categoryFeatureNames = string.Join(" ", features.Select(f => f.Descriptor.Name));

            <div class="feature-group">
                <h4 class="mb-2 mt-3" data-filter-value="@categoryName @categoryFeatureNames">@categoryName</h4>
                <ul class="list-group" data-filter-value="@categoryName @categoryFeatureNames">
                    @{
                        foreach (var feature in features)
                        {
                            //var lifecycleStatus = feature.Descriptor.Extension.LifecycleStatus;
                            var featureId = feature.Descriptor.Id;
                            var featureName = feature.Descriptor.Name;
                            var isAlwaysEnabled = feature.IsAlwaysEnabled;

                            if (Model.IsProxy && featureId == FeaturesConstants.FeatureId)
                            {
                                isAlwaysEnabled = false;
                            }

                            var dependencies = (from d in feature.FeatureDependencies
                                                select (from f in Model.Features where f.Descriptor.Id == d.Id select f).SingleOrDefault()).Where(f => f != null).OrderBy(f => f.Descriptor.Name);

                            var dependenciesNames = string.Join(" ", dependencies.Select(d => d.Descriptor.Name));

                            var missingDependencies = feature.FeatureDependencies
                            .Where(d => !Model.Features.Any(f => f.Descriptor.Id == d.Id));
                            var showDisable = !feature.Descriptor.EnabledByDependencyOnly && !isAlwaysEnabled && categoryName != "Core" && featureName != Application.ModuleName;
                            var showEnable = !feature.Descriptor.EnabledByDependencyOnly && !missingDependencies.Any() && featureId != "OrchardCore.Setup" && featureId != "OrchardCore.AutoSetup";

                            <li class="list-group-item" data-filter-value="@categoryName @dependenciesNames @featureName">
                                <div class="row g-0 d-flex align-items-center">
                                    <div class="col-md-11">
                                        @* Display the checkbox ?*@
                                        @if ((showEnable && !feature.IsEnabled) || (showDisable && feature.IsEnabled))
                                        {
                                            <div class="form-check mb-1">
                                                <input type="checkbox" class="form-check-input" name="featureIds" id="@featureId" value="@featureId">
                                                <label class="form-check-label fw-semibold" for="@featureId">@featureName (<code>@featureId</code>)</label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="fw-semibold mb-1">@featureName (<code>@featureId</code>)</div>
                                        }

                                        <p class="text-muted mb-1">@feature.Descriptor.Description</p>

                                        @if (feature.FeatureDependencies != null && feature.FeatureDependencies.Any())
                                        {
                                            <div class="mb-1">
                                                @foreach (var d in dependencies)
                                                {
                                                    <span class="badge ta-badge">
                                                        @(string.IsNullOrEmpty(d.Descriptor.Name) ? d.Descriptor.Id : d.Descriptor.Name)
                                                    </span>
                                                }
                                                @foreach (var d in missingDependencies)
                                                {
                                                    <span class="badge text-bg-warning">
                                                        @d
                                                    </span>
                                                }
                                            </div>
                                        }

                                    </div>
                                    <div class="col-md-1 text-end">
                                        @if (feature.Descriptor.EnabledByDependencyOnly)
                                        {
                                            @if (feature.IsEnabled)
                                            {
                                                <div data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@T["This feature is automatically enabled based on dependency and cannot be manually disabled."]">
                                                    <button class="btn btn-danger btn-sm" disabled>@T["Disable"]</button>
                                                </div>
                                            }
                                            else
                                            {
                                                <div data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@T["This feature is automatically disabled based on dependency and cannot be manually enabled."]">
                                                    <button class="btn btn-primary btn-sm" disabled>@T["Enable"]</button>
                                                </div>
                                            }
                                        }
                                        else if (feature.IsEnabled && isAlwaysEnabled)
                                        {
                                            <div data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@T["This feature is always enabled and cannot be manually disabled."]">
                                                <button class="btn btn-danger btn-sm" disabled>@T["Disable"]</button>
                                            </div>
                                        }
                                        else
                                        {
                                            if (showEnable && !feature.IsEnabled)
                                            {
                                                <a id="btn-enable-@Html.GenerateIdFromName(featureId)" asp-action="Enable" asp-route-id="@featureId" asp-route-tenant="@Model.Name" class="btn btn-primary btn-sm" data-url-af="UnsafeUrl">@T["Enable"]</a>
                                            }
                                            @if (showDisable && feature.IsEnabled)
                                            {
                                                var confirmationMessage = T["Are you sure you want to disable the {0} feature? Continue?", featureName];
                                                if (feature.EnabledDependentFeatures.Any())
                                                {
                                                    var enabledDependentFeatures = new HtmlString($"<ul>{string.Join("", feature.EnabledDependentFeatures.Select(f => $"<li>{f.Name}</li>"))}</ul>");
                                                    confirmationMessage = T["Disabling the {0} feature will also disable the following dependent features:{1}Continue?", featureName, enabledDependentFeatures];
                                                }
                                                <a id="btn-disable-@Html.GenerateIdFromName(featureId)" asp-action="Disable" asp-route-id="@featureId" asp-route-tenant="@Model.Name" class="btn btn-danger btn-sm" data-title="@T["Disable Feature"]" data-message="@confirmationMessage" data-ok-text="@T["Yes"]" data-cancel-text="@T["No"]" data-url-af="UnsafeUrl RemoveUrl">@T["Disable"]</a>
                                            }
                                        }
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        }
        <div id="list-alert" class="alert alert-info d-none" role="alert">
            @T["<strong>Nothing here!</strong> Your search returned no results."]
        </div>
    }
</form>
<script at="Foot">
    $(function () {
        var searchBox = $('#search-box');

        // On each keypress filter the list of features
        searchBox.keyup(function (e) {
            var search = $(this).val().toLowerCase();
            var elementsToFilter = $("[data-filter-value]");

            // On ESC, clear the search box and display all features
            if (e.keyCode == 27 || search == '') {
                searchBox.val('');
                elementsToFilter.removeClass("d-none first-child-visible last-child-visible");
            } else {
                elementsToFilter.each(function () {
                    var text = $(this).data('filter-value').toLowerCase();
                    var found = text.indexOf(search) > -1;

                    if (found) {
                        $(this).removeClass("d-none first-child-visible last-child-visible");
                    }
                    else {
                        $(this).addClass("d-none");
                    }
                });

                $('ul.list-group').each(function () {
                    $(this).find('li').filter(":not(.d-none)").first().addClass("first-child-visible");
                    $(this).find('li').filter(":not(.d-none)").last().addClass("last-child-visible");
                });

                var visible = $('.list-group > li:visible');
                if (visible.length == 0) {
                    $('#list-alert').removeClass("d-none");
                }
                else {
                    $('#list-alert').addClass("d-none");
                }
            }
        });

        //prevent posting form on pressing enter key
        searchBox.keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key == 13) {
                return false;
            }
        });

        $(".dropdown-menu a").filter(function () {
            return $(this).data("action");
        }).on('click', function () {
            $("[name='BulkAction']").val($(this).data('action'));
            $("[name='submit.BulkAction']").click();
        });
    });
</script>
