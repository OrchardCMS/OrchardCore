{"version":3,"sources":["<anon>"],"sourcesContent":["// a wrapper around https://github.com/farbelous/fontawesome-iconpicker\n// It makes easier to use a single picker instance with several input fields.\n// How to use it: Call show() from outside , passing it the id's of the input fields you want the icon classes applied to.\nvar iconPickerVue = new Vue({\n    el: '#iconPickerVue',\n    data: {\n        targetInputField: '',\n        targetIconTag: '',\n        iconPickerModal: null,\n    },\n    mounted: function () {\n        var self = this;\n        $('.icp-auto').iconpicker({\n            title: false,\n            templates: {\n                search: '<input type=\"search\" class=\"form-control iconpicker-search\" placeholder=\"\" />' // just to leave empty the placeholder because it is not localized\n            }\n        });\n        $('#inline-picker').on('iconpickerSelected', function (e) {\n            var selected = e.iconpickerInstance.options.fullClassFormatter(e.iconpickerValue);\n            \n            if (self.targetInputField) {\n                $('#' + self.targetInputField).val(selected);\n            }\n            if (self.targetIconTag) {\n                // We need to replace the full tag with the new class.\n                // We could simply apply the new selected class to the i element.\n                // But there is an issue: when the previous class is not a valid fa icon the icon does not refresh.\n                $('#' + self.targetIconTag).replaceWith('<i id=\"' + self.targetIconTag + '\" class=\"'+ selected + '\"></i>')                \n            }\n            if (self.iconPickerModal != null)\n            {\n                self.iconPickerModal.hide();\n            }\n        });\n    },\n    methods: {\n        show: function (targetInputField, targetIconTag) {\n            this.targetInputField = targetInputField;\n            this.targetIconTag = targetIconTag;\n            if (this.iconPickerModal == null)\n            {\n                this.iconPickerModal = new bootstrap.Modal($(\"#iconPickerModal\"), {\n                    keyboard: false\n                });\n            }\n            this.iconPickerModal.show();\n        }\n    }\n})\n"],"names":["iconPickerVue","Vue","el","data","targetInputField","targetIconTag","iconPickerModal","mounted","self","$","iconpicker","title","templates","search","on","e","selected","iconpickerInstance","options","fullClassFormatter","iconpickerValue","val","replaceWith","hide","methods","show","bootstrap","Modal","keyboard"],"mappings":"AAIA,IAAIA,cAAgB,IAAIC,IAAI,CACxBC,GAAI,iBACJC,KAAM,CACFC,iBAAkB,GAClBC,cAAe,GACfC,gBAAiB,IACrB,EACAC,QAAS,WACL,IAAIC,EAAO,IAAI,CAEfC,EAAE,aAAaC,UAAU,CAAC,CACtBC,MAAO,CAAA,EACPC,UAAW,CACPC,OAAQ,+EACZ,CACJ,GAEAJ,EAAE,kBAAkBK,EAAE,CAAC,qBAAsB,SAAUC,CAAC,EACpD,IAAIC,EAAWD,EAAEE,kBAAkB,CAACC,OAAO,CAACC,kBAAkB,CAACJ,EAAEK,eAAe,CAE5EZ,CAAAA,EAAKJ,gBAAgB,EACrBK,EAAE,IAAMD,EAAKJ,gBAAgB,EAAEiB,GAAG,CAACL,GAGnCR,EAAKH,aAAa,EAIlBI,EAAE,IAAMD,EAAKH,aAAa,EAAEiB,WAAW,CAAC,UAAYd,EAAKH,aAAa,CAAG,YAAaW,EAAW,UAGzE,MAAxBR,EAAKF,eAAe,EAEpBE,EAAKF,eAAe,CAACiB,IAAI,EAEjC,EAEJ,EACAC,QAAS,CACLC,KAAM,SAAUrB,CAAgB,CAAEC,CAAa,EAC3C,IAAI,CAACD,gBAAgB,CAAGA,EACxB,IAAI,CAACC,aAAa,CAAGA,EAEO,MAAxB,IAAI,CAACC,eAAe,EAEpB,CAAA,IAAI,CAACA,eAAe,CAAG,IAAIoB,UAAUC,KAAK,CAAClB,EAAE,oBAAqB,CAC9DmB,SAAU,CAAA,CACd,EAAC,EAGL,IAAI,CAACtB,eAAe,CAACmB,IAAI,EAC7B,CACJ,CACJ"}
