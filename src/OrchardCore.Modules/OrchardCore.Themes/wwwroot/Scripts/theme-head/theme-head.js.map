{"mappings":"osCAAA,IAAAA,EAAAC,EAAA,eAIA,MAAMC,EAAgB,IAAIC,kBAAiB,SAAUC,GAEjD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAClC,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAUC,GAAGG,WAAWF,OAAQC,IAAK,CAG3B,SADRH,EAAUC,GAAGG,WAAWD,GAC5BE,WACV,EAAAT,EAAAU,WAAS,EAAAV,EAAAW,sBAGTT,EAAcU,aAEtB,CAER,IAEAV,EAAcW,QAAQC,SAASC,gBAAiB,CAC5CC,WAAW,EACXC,SAAS,G,uICuBbC,EAAAC,OAAAC,EAAA,qBACIC,IADJH,EAAAC,OAAAC,EAAA,sBAEIE,IAFJJ,EAAAC,OAAAC,EAAA,2BAGIG,IAHJL,EAAAC,OAAAC,EAAA,yBAIII,IAJJN,EAAAC,OAAAC,EAAA,mBAKIK,IALJP,EAAAC,OAAAC,EAAA,sBAMIM,IANJR,EAAAC,OAAAC,EAAA,sBAOIO,IAPJT,EAAAC,OAAAC,EAAA,mBAQIQ,IARJV,EAAAC,OAAAC,EAAA,yBASIT,IATJO,EAAAC,OAAAC,EAAA,gBAUIV,IAvDJ,IAAAmB,EAAA5B,EAAA,sCAEA,MAAMoB,EAAgB,OAChBC,EAAiB,QACjBC,EAAsB,QAEtBC,EAAoB,IAAMD,GAAuB,QAEjDE,EAAc,IAAM,IAAG,EAAAI,EAAAC,oBAAmBN,MAE1CE,EAAiB,IAAMK,aAAaC,QAAQP,KAE5CE,EAAkBM,IAChBA,GACAF,aAAaG,QAAQT,IAAeQ,EAAA,EAItCL,EAAc,IAChBO,OAAOC,WAAW,gCAAgCC,QAEhD1B,EAAoB,KACtB,MAAM2B,EAAcZ,IACpB,OAAIY,IAIGV,IAAgBP,EAAgBC,EAAA,EAGrCZ,EAAYuB,IACTA,IAIS,SAAVA,EACAnB,SAASC,gBAAgBwB,aACrB,gBACAX,IAAgBP,EAAgBC,GAGpCR,SAASC,gBAAgBwB,aAAa,gBAAiBN,GAAS,K,qNCvCxEf,EAAAC,OAAAC,EAAA,qBAASU,IAFT,MAAMA,EAAgB,IAAMhB,SAASC,gBAAgByB,aAAa,gBAAkB,S,uFCApFpB,EAAQqB,eAAiB,SAAUC,GACjC,OAAOA,GAAKA,EAAEC,WAAaD,EAAI,CAACE,QAASF,EAC3C,EAEAtB,EAAQyB,kBAAoB,SAAUH,GACpCI,OAAOC,eAAeL,EAAG,aAAc,CAACM,OAAO,GACjD,EAEA5B,EAAQ6B,UAAY,SAAUC,EAAQC,GAkBpC,OAjBAL,OAAOM,KAAKF,GAAQG,SAAQ,SAAUC,GAE1B,YAARA,GACQ,eAARA,GACAR,OAAOS,UAAUC,eAAeC,KAAKN,EAAMG,IAK7CR,OAAOC,eAAeI,EAAMG,EAAK,CAC/BI,YAAY,EACZC,IAAK,WACH,OAAOT,EAAOI,EAChB,GAEJ,IAEOH,CACT,EAEA/B,EAAQD,OAAS,SAAUgC,EAAMS,EAAUD,GACzCb,OAAOC,eAAeI,EAAMS,EAAU,CACpCF,YAAY,EACZC,IAAKA,GAET,C","sources":["src/OrchardCore.Modules/OrchardCore.Themes/Assets/ts/theme-head.ts","src/OrchardCore.Modules/OrchardCore.Themes/Assets/ts/constants.ts",".scripts/bloom/helpers/globals.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import { getPreferredTheme, setTheme } from \"./constants\";\n// We need to apply the classes BEFORE the page is rendered. \n// That is why we use a MutationObserver instead of document.Ready().\nconst themeObserver = new MutationObserver(function (mutations) {\n    for (let i = 0; i < mutations.length; i++) {\n        for (let j = 0; j < mutations[i].addedNodes.length; j++) {\n            const addedNode = mutations[i].addedNodes[j] as HTMLElement;\n            if (addedNode.tagName === 'BODY') {\n                setTheme(getPreferredTheme());\n                // we're done: \n                themeObserver.disconnect();\n            }\n        }\n    }\n});\nthemeObserver.observe(document.documentElement, {\n    childList: true,\n    subtree: true\n});\n","import { getTenantName } from \"@orchardcore/bloom/helpers/globals\";\nconst darkThemeName = \"dark\";\nconst lightThemeName = \"light\";\nconst themeStoreKeySuffix = \"theme\";\nconst getStoreKeySuffix = () => themeStoreKeySuffix || \"theme\";\nconst getStoreKey = () => `${getTenantName()}-${getStoreKeySuffix()}`;\nconst getStoredTheme = () => localStorage.getItem(getStoreKey());\nconst setStoredTheme = (theme: string | null) => {\n    if (theme) {\n        localStorage.setItem(getStoreKey(), theme);\n    }\n};\nconst isDarkMedia = () =>\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\nconst getPreferredTheme = () => {\n    const storedTheme = getStoredTheme();\n    if (storedTheme) {\n        return storedTheme;\n    }\n    return isDarkMedia() ? darkThemeName : lightThemeName;\n};\nconst setTheme = (theme: string | null) => {\n    if (!theme) {\n        return;\n    }\n    if (theme === \"auto\") {\n        document.documentElement.setAttribute(\n            \"data-bs-theme\",\n            isDarkMedia() ? darkThemeName : lightThemeName\n        );\n    } else {\n        document.documentElement.setAttribute(\"data-bs-theme\", theme ?? \"\");\n    }\n};\nexport {\n    darkThemeName,\n    lightThemeName,\n    themeStoreKeySuffix,\n    getStoreKeySuffix,\n    getStoreKey,\n    getStoredTheme,\n    setStoredTheme,\n    isDarkMedia,\n    getPreferredTheme,\n    setTheme,\n};\n","const getTenantName = () => document.documentElement.getAttribute(\"data-tenant\") || \"default\";\nexport { getTenantName };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n  return dest;\n};\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["_constants","require","themeObserver","MutationObserver","mutations","i","length","j","addedNodes","tagName","setTheme","getPreferredTheme","disconnect","observe","document","documentElement","childList","subtree","parcelHelpers","export","exports","darkThemeName","lightThemeName","themeStoreKeySuffix","getStoreKeySuffix","getStoreKey","getStoredTheme","setStoredTheme","isDarkMedia","_globals","getTenantName","localStorage","getItem","theme","setItem","window","matchMedia","matches","storedTheme","setAttribute","getAttribute","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","call","enumerable","get","destName"],"version":3,"file":"theme-head.js.map"}