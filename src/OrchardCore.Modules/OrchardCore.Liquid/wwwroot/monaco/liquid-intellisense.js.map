{"mappings":"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","sources":["src/OrchardCore.Modules/OrchardCore.Liquid/Assets/monaco/liquid-intellisense.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["/// <reference path=\"../../../../../node_modules/monaco-editor/monaco.d.ts\" />\nconst liquidTags = [\n    \"if\",\n    \"else\",\n    \"elseif\",\n    \"endif\",\n    \"render\",\n    \"assign\",\n    \"capture\",\n    \"endcapture\",\n    \"case\",\n    \"endcase\",\n    \"comment\",\n    \"endcomment\",\n    \"cycle\",\n    \"decrement\",\n    \"for\",\n    \"endfor\",\n    \"include\",\n    \"increment\",\n    \"layout\",\n    \"raw\",\n    \"endraw\",\n    \"render\",\n    \"tablerow\",\n    \"endtablerow\",\n    \"unless\",\n    \"endunless\",\n];\nconst liquidFilters = [\n    \"abs\",\n    \"append\",\n    \"at_least\",\n    \"at_most\",\n    \"capitalize\",\n    \"ceil\",\n    \"compact\",\n    \"date\",\n    \"default\",\n    \"divided_by\",\n    \"downcase\",\n    \"escape\",\n    \"escape_once\",\n    \"first\",\n    \"floor\",\n    \"join\",\n    \"json\",\n    \"last\",\n    \"lstrip\",\n    \"map\",\n    \"minus\",\n    \"modulo\",\n    \"newline_to_br\",\n    \"plus\",\n    \"prepend\",\n    \"remove\",\n    \"remove_first\",\n    \"replace\",\n    \"replace_first\",\n    \"reverse\",\n    \"round\",\n    \"rstrip\",\n    \"size\",\n    \"slice\",\n    \"sort\",\n    \"sort_natural\",\n    \"split\",\n    \"strip\",\n    \"strip_html\",\n    \"strip_newlines\",\n    \"times\",\n    \"truncate\",\n    \"truncatewords\",\n    \"uniq\",\n    \"upcase\",\n    \"url_decode\",\n    \"url_encode\",\n    \"where\",\n];\ninterface ILiquidContextInfo {\n    showFilters: boolean;\n    showTags: boolean;\n    includeEndTags: boolean;\n    inTag: boolean;\n    inObject: boolean;\n}\nfunction getLiquidContextInfo(model: monaco.editor.ITextModel, position: monaco.Position, triggerCharacter: string): ILiquidContextInfo {\n    var inTag: boolean;\n    var inObject: boolean;\n    var showTags: boolean;\n    var showFilters: boolean;\n    var findStart = model.findPreviousMatch(\"\\\\{(%|\\\\{)\", position, true, false, null, true);\n    if (findStart && findStart.matches && !position.isBefore(findStart.range.getEndPosition())) {\n        if (findStart.matches[1] == \"%\") {\n            inTag = true;\n        } else if (findStart.matches[1] == \"{\") {\n            inObject = true;\n        }\n        var searchPattern = inTag ? \"%}\" : \"}}\";\n        var findEnd = model.findNextMatch(searchPattern, position, false, false, null, true);\n        var currentRange = findStart.range.plusRange(findEnd.range);\n        if (currentRange.containsPosition(position)) {\n            if (inTag) {\n                var findTagName = model.findNextMatch(\"\\\\{%\\\\s*([a-zA-Z-_]+)\", findStart.range.getStartPosition(), true, false, null, true);\n                if (findTagName && currentRange.containsRange(findTagName.range) && findTagName.matches.length > 1) {\n                    if (findTagName.matches[1] == \"assign\") {\n                        showFilters = true;\n                    } else {\n                        showTags = false;\n                    }\n                } else {\n                    showTags = true;\n                }\n            } else {\n                showFilters = true;\n            }\n        }\n    }\n    return {\n        showFilters,\n        showTags,\n        inTag,\n        inObject,\n    } as ILiquidContextInfo;\n}\nconst completionItemProvider: monaco.languages.CompletionItemProvider = {\n    triggerCharacters: [\" \"],\n    provideCompletionItems: (model: monaco.editor.ITextModel, position: monaco.Position, context: monaco.languages.CompletionContext, token: monaco.CancellationToken) => {\n        var items: string[] = [];\n        if (context.triggerCharacter == \" \") {\n            var startTrigger = model.getValueInRange(new monaco.Range(position.lineNumber, position.column - 3, position.lineNumber, position.column - 1));\n            if (startTrigger != \"{%\" && !startTrigger.endsWith(\"|\")) {\n                return null;\n            }\n        }\n        var liquidContext: ILiquidContextInfo = getLiquidContextInfo(model, position, context.triggerCharacter);\n        if (liquidContext.showFilters) {\n            items = liquidFilters;\n        } else if (liquidContext.showTags) {\n            items = liquidTags.filter((value: string) => {\n                return !value.startsWith(\"end\");\n            });\n        }\n        const suggestions = items.map((value: string) => {\n            return {\n                label: value,\n                kind: monaco.languages.CompletionItemKind.Keyword,\n                insertText: value,\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.KeepWhitespace,\n            } as monaco.languages.CompletionItem;\n        });\n        return { suggestions } as monaco.languages.ProviderResult<monaco.languages.CompletionList>;\n    },\n};\nfunction ConfigureLiquidIntellisense(monaco: any, suggestHtml: boolean = true) {\n    if (suggestHtml) {\n        var modeConfiguration: monaco.languages.html.ModeConfiguration = {\n            completionItems: true,\n            colors: true,\n            foldingRanges: true,\n            selectionRanges: true,\n            diagnostics: false,\n            documentFormattingEdits: true,\n            documentRangeFormattingEdits: true,\n        };\n        var options: monaco.languages.html.Options = {\n            format: monaco.languages.html.htmlDefaults.options.format,\n            suggest: { html5: true },\n        };\n        monaco.languages.html.registerHTMLLanguageService(\"liquid\", options, modeConfiguration);\n    }\n    monaco.languages.registerCompletionItemProvider(\"liquid\", completionItemProvider);\n}\ndeclare global {\n    interface Window {\n        ConfigureLiquidIntellisense: (monaco: any, suggestHtml?: boolean) => void;\n        liquidFilters: string[];\n        liquidTags: string[];\n    }\n}\nwindow.ConfigureLiquidIntellisense = ConfigureLiquidIntellisense;\nwindow.liquidFilters = liquidFilters;\nwindow.liquidTags = liquidTags;\nexport { ConfigureLiquidIntellisense, liquidFilters };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n  return dest;\n};\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["parcelHelpers","export","exports","ConfigureLiquidIntellisense","liquidFilters","liquidTags","completionItemProvider","triggerCharacters","provideCompletionItems","model","position","context","token","items","triggerCharacter","startTrigger","getValueInRange","monaco","Range","lineNumber","column","endsWith","liquidContext","inTag","inObject","showTags","showFilters","findStart","findPreviousMatch","matches","isBefore","range","getEndPosition","searchPattern","findEnd","findNextMatch","currentRange","plusRange","containsPosition","findTagName","getStartPosition","containsRange","length","getLiquidContextInfo","filter","value","startsWith","suggestions","map","label","kind","languages","CompletionItemKind","Keyword","insertText","insertTextRules","CompletionItemInsertTextRule","KeepWhitespace","monaco1","suggestHtml","options","format","html","htmlDefaults","suggest","html5","registerHTMLLanguageService","completionItems","colors","foldingRanges","selectionRanges","diagnostics","documentFormattingEdits","documentRangeFormattingEdits","registerCompletionItemProvider","window","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","call","enumerable","get","destName"],"version":3,"file":"liquid-intellisense.js.map"}