@using OrchardCore.Workflows.Models
@using OrchardCore.Workflows.Trimming.Services
@using OrchardCore.Workflows.Trimming.ViewModels
@model WorkflowTrimmingViewModel

<div class="mb-3">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="Disabled" checked="@Model.Disabled" />
        <label class="form-check-label" asp-for="Disabled">@T["Disable"]</label>
        <span class="hint dashed">@T["Whether the task is disabled."]</span>
    </div>
</div>

<div class="mb-3" asp-validation-class-for="RetentionDays">
    <label asp-for="RetentionDays" class="control-label">@T["Retention period"]</label>
    <input asp-for="RetentionDays" type="number" class="form-control" />
    <span class="hint">@T["The number of days a workflow instance is retained for."]</span>
</div>

<div class="mb-3" asp-validation-class-for="LastRunUtc">
    <label asp-for="LastRunUtc" class="control-label">@T["Last run"]</label>
    <div class="form-control">
        @(Model.LastRunUtc.HasValue
            ? await DisplayAsync(await New.DateTime(Utc: Model.LastRunUtc.Value, Format: "g"))
            : T["Never"])
    </div>
    <span class="hint">@T["The last time the background trimming task was run."]</span>
</div>

@{
    var statusIterator = 0;
}

<div class="mb-3 row">
    <label asp-for="Statuses" class="control-label">@T["Statuses"]</label>
    @foreach (var status in Enum.GetValues<WorkflowStatus>())
    {
        <div class="col-xs-12">
            <div class="form-check">
                <input type="hidden" asp-for="@Model.Statuses[statusIterator].Status" />
                <input class="form-check-input workflow-status" type="checkbox" id="@Html.IdFor(m => m.Statuses[statusIterator])"
                       asp-for="@Model.Statuses[statusIterator].IsSelected">
                <label class="form-check-label" for="@Html.IdFor(m => m.Statuses[statusIterator])">
                    @{ var localizedStatus = status switch
                        {
                            WorkflowStatus.Idle => T["Idle"],
                            WorkflowStatus.Starting => T["Starting"],
                            WorkflowStatus.Resuming => T["Resuming"],
                            WorkflowStatus.Executing => T["Executing"],
                            WorkflowStatus.Halted => T["Halted"],
                            WorkflowStatus.Finished => T["Finished"],
                            WorkflowStatus.Faulted => T["Faulted"],
                            WorkflowStatus.Aborted => T["Aborted"],
                            _ => T["Status: {0}", status.ToString()]
                        };
                    } @localizedStatus
                </label>
            </div>
        </div>

        statusIterator++;
    }
    <span class="hint">@T["Workflows with the selected statuses will be trimmed."]</span>
</div>
