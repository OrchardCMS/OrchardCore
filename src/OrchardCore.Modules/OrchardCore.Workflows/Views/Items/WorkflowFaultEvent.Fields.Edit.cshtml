@using OrchardCore.Workflows.Models
@model WorkflowFaultViewModel

<div class="form-group" asp-validation-class-for="ErrorFilter" xmlns="http://www.w3.org/1999/html">
    <label asp-for="ErrorFilter" class="form-label">@T["Trigger Condition"]</label>
    <div id="@Html.IdFor(x => x.ErrorFilter)_editor" asp-for="Text" style="min-height: 400px;" class="form-control"></div>
    <textarea asp-for="ErrorFilter" hidden>@Html.Raw(Model.ErrorFilter)</textarea>
    <span asp-validation-for="ErrorFilter"></span>
    <span class="hint">@T["Check the captured workflow error information and return a Boolean value. If it is true, it will be processed by the current workflow. Javascript syntax."]</span><br />
    <span class="hint">
        @T["You can use input('{0}') to get error information, contains the following attributes：", WorkflowFaultModel.WorkflowFaultInputKey]
    </span>

    <ul class="hint">
        <li>@T["{0}：Workflow Id.", nameof(WorkflowFaultModel.WorkflowId)]</li>
        <li>@T["{0}：Workflow name.", nameof(WorkflowFaultModel.WorkflowName)]</li>
        <li>@T["{0}：Executed activity count.", nameof(WorkflowFaultModel.ExecutedActivityCount)]</li>
        <li>@T["{0}：The name of the activity.", nameof(WorkflowFaultModel.ActivityDisplayName)]</li>
        <li>@T["{0}：Activity Type Name.", nameof(WorkflowFaultModel.ActivityTypeName)]</li>
        <li>@T["{0}：Activity Id.", nameof(WorkflowFaultModel.ActivityId)]</li>
        <li>@T["{0}：Exception Information Summary.", nameof(WorkflowFaultModel.ErrorMessage)]</li>
        <li>@T["{0}：Exception Details.", nameof(WorkflowFaultModel.ExceptionDetails)]</li>
        <li>@T["{0}：Contains error messages manually raised by workflow activity.", nameof(WorkflowFaultModel.FaultMessage)]</li>
    </ul>

</div>

<script asp-name="monaco" at="Foot"></script>
<script at="Foot" depends-on="monaco">
    document.addEventListener('DOMContentLoaded', function () {
        require(['vs/editor/editor.main'], function () {
            var settings = {
                "automaticLayout": true,
                "language": "javascript"
            };

            const html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(x => x.ErrorFilter)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.ErrorFilter)');

            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });
        });
    });
</script>
