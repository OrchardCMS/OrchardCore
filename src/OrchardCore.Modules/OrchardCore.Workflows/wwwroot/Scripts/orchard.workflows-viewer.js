/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
var WorkflowCanvas = /** @class */function () {
  function WorkflowCanvas(container, workflowType) {
    var _this = this;
    this.container = container;
    this.workflowType = workflowType;
    this.minCanvasHeight = 400;
    this.getActivityElements = function () {
      return $(_this.container).find('.activity');
    };
    this.getDefaults = function () {
      return {
        Anchor: "Continuous",
        DragOptions: {
          cursor: 'pointer',
          zIndex: 2000
        },
        EndpointStyles: [{
          fillStyle: '#225588'
        }],
        Endpoints: [["Dot", {
          radius: 7
        }], ["Blank"]],
        ConnectionOverlays: [["Arrow", {
          width: 12,
          length: 12,
          location: -5
        }]],
        ConnectorZIndex: 5
      };
    };
    this.createJsPlumbInstance = function () {
      return jsPlumb.getInstance({
        DragOptions: {
          cursor: 'pointer',
          zIndex: 2000
        },
        ConnectionOverlays: [['Arrow', {
          location: 1,
          visible: true,
          width: 11,
          length: 11
        }], ['Label', {
          location: 0.5,
          id: 'label',
          cssClass: 'connection-label'
        }]],
        Container: _this.container
      });
    };
    this.getEndpointColor = function (activity) {
      return activity.isBlocking || activity.isStart ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';
    };
    this.getSourceEndpointOptions = function (activity, outcome) {
      // The definition of source endpoints.
      var paintColor = _this.getEndpointColor(activity);
      return {
        endpoint: 'Dot',
        anchor: 'Continuous',
        paintStyle: {
          stroke: paintColor,
          fill: paintColor,
          radius: 7,
          strokeWidth: 1
        },
        isSource: true,
        connector: ['Flowchart', {
          stub: [40, 60],
          gap: 0,
          cornerRadius: 5,
          alwaysRespectStubs: true
        }],
        connectorStyle: {
          strokeWidth: 2,
          stroke: '#999999',
          joinstyle: 'round',
          outlineStroke: 'white',
          outlineWidth: 2
        },
        hoverPaintStyle: {
          fill: '#216477',
          stroke: '#216477'
        },
        connectorHoverStyle: {
          strokeWidth: 3,
          stroke: '#216477',
          outlineWidth: 5,
          outlineStroke: 'white'
        },
        connectorOverlays: [['Label', {
          location: [3, -1.5],
          cssClass: 'endpointSourceLabel'
        }]],
        dragOptions: {},
        uuid: "".concat(activity.id, "-").concat(outcome.name),
        parameters: {
          outcome: outcome
        }
      };
    };
    this.getActivity = function (id, activities) {
      if (activities === void 0) {
        activities = null;
      }
      if (!activities) {
        activities = this.workflowType.activities;
      }
      return $.grep(activities, function (x) {
        return x.id === id;
      })[0];
    };
    this.updateConnections = function (plumber) {
      var workflowId = _this.workflowType.id;
      // Connect activities.
      for (var _i = 0, _a = _this.workflowType.transitions; _i < _a.length; _i++) {
        var transitionModel = _a[_i];
        var sourceEndpointUuid = "".concat(transitionModel.sourceActivityId, "-").concat(transitionModel.sourceOutcomeName);
        var sourceEndpoint = plumber.getEndpoint(sourceEndpointUuid);
        var destinationElementId = "activity-".concat(workflowId, "-").concat(transitionModel.destinationActivityId);
        plumber.connect({
          source: sourceEndpoint,
          target: destinationElementId
        });
      }
    };
    this.updateCanvasHeight = function () {
      var $container = $(this.container);
      // Get the activity element with the highest Y coordinate.
      var $activityElements = $container.find(".activity");
      var currentElementTop = 0;
      var currentActivityHeight = 0;
      for (var _i = 0, _a = $activityElements.toArray(); _i < _a.length; _i++) {
        var activityElement = _a[_i];
        var $activityElement = $(activityElement);
        var top_1 = $activityElement.position().top;
        if (top_1 > currentElementTop) {
          currentElementTop = top_1;
          currentActivityHeight = $activityElement.height();
        }
      }
      var newCanvasHeight = currentElementTop + currentActivityHeight;
      var elementBottom = currentElementTop + currentActivityHeight;
      var stretchValue = 100;
      if (newCanvasHeight - elementBottom <= stretchValue) {
        newCanvasHeight += stretchValue;
      }
      $container.height(Math.max(this.minCanvasHeight, newCanvasHeight));
    };
  }
  return WorkflowCanvas;
}();
///<reference path='../Lib/jquery/typings.d.ts' />
///<reference path='../Lib/jsplumb/typings.d.ts' />
///<reference path='./workflow-models.ts' />
///<reference path='./workflow-canvas.ts' />
var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WorkflowViewer = /** @class */function (_super) {
  __extends(WorkflowViewer, _super);
  function WorkflowViewer(container, workflowType) {
    var _this = _super.call(this, container, workflowType) || this;
    _this.container = container;
    _this.workflowType = workflowType;
    _this.getEndpointColor = function (activity) {
      return activity.isBlocking ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';
    };
    var self = _this;
    jsPlumb.ready(function () {
      jsPlumb.importDefaults(_this.getDefaults());
      var plumber = _this.createJsPlumbInstance();
      // Listen for new connections.
      plumber.bind('connection', function (connInfo, originalEvent) {
        var connection = connInfo.connection;
        var outcome = connection.getParameters().outcome;
        var label = connection.getOverlay('label');
        label.setLabel(outcome.displayName);
      });
      var activityElements = _this.getActivityElements();
      var areEqualOutcomes = function areEqualOutcomes(outcomes1, outcomes2) {
        if (outcomes1.length != outcomes2.length) {
          return false;
        }
        for (var i = 0; i < outcomes1.length; i++) {
          var outcome1 = outcomes1[i];
          var outcome2 = outcomes2[i];
          if (outcome1.name != outcome2.displayName || outcome1.displayName != outcome2.displayName) {
            return false;
          }
        }
        return true;
      };
      // Suspend drawing and initialize.
      plumber.batch(function () {
        var workflowId = _this.workflowType.id;
        activityElements.each(function (_, activityElement) {
          var $activityElement = $(activityElement);
          var activityId = $activityElement.data('activity-id');
          var activity = _this.getActivity(activityId);
          // Configure the activity as a target.
          plumber.makeTarget(activityElement, {
            dropOptions: {
              hoverClass: 'hover'
            },
            anchor: 'Continuous',
            endpoint: ['Blank', {
              radius: 8
            }]
          });
          // Add source endpoints.
          for (var _i = 0, _a = activity.outcomes; _i < _a.length; _i++) {
            var outcome = _a[_i];
            var sourceEndpointOptions = _this.getSourceEndpointOptions(activity, outcome);
            plumber.addEndpoint(activityElement, {
              connectorOverlays: [['Label', {
                label: outcome.displayName,
                cssClass: 'connection-label'
              }]]
            }, sourceEndpointOptions);
          }
        });
        // Connect activities.
        _this.updateConnections(plumber);
        // Re-query the activity elements.
        activityElements = _this.getActivityElements();
        // Make all activity elements visible.
        activityElements.show();
        _this.updateCanvasHeight();
      });
      _this.jsPlumbInstance = plumber;
    });
    return _this;
  }
  return WorkflowViewer;
}(WorkflowCanvas);
$.fn.workflowViewer = function () {
  this.each(function (index, element) {
    var $element = $(element);
    var workflowType = $element.data('workflow-type');
    $element.data('workflowViewer', new WorkflowViewer(element, workflowType));
  });
  return this;
};
$(document).ready(function () {
  var workflowViewer = $('.workflow-canvas').workflowViewer().data('workflowViewer');
});