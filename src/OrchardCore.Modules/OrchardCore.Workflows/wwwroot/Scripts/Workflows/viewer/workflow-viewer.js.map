{"mappings":"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","sources":["src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/workflow-viewer.ts","src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/workflow-canvas.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["///<reference path='../Lib/jquery/typings.d.ts' />\n///<reference path='../Lib/jsplumb/typings.d.ts' />\nimport './workflow-models';\nimport WorkflowCanvas from './workflow-canvas';\nclass WorkflowViewer extends WorkflowCanvas {\n    private jsPlumbInstance: jsPlumbInstance;\n    constructor(protected container: HTMLElement, protected workflowType: Workflows.WorkflowType) {\n        super(container, workflowType);\n        const self = this;\n        jsPlumb.ready(() => {\n            jsPlumb.importDefaults(this.getDefaults());\n            const plumber = this.createJsPlumbInstance();\n            // Listen for new connections.\n            plumber.bind('connection', function (connInfo, originalEvent) {\n                const connection: Connection = connInfo.connection;\n                const outcome: Workflows.Outcome = connection.getParameters().outcome;\n                const label: any = connection.getOverlay('label');\n                label.setLabel(outcome.displayName);\n            });\n            let activityElements = this.getActivityElements();\n            var areEqualOutcomes = function (outcomes1: Workflows.Outcome[], outcomes2: Workflows.Outcome[]): boolean {\n                if (outcomes1.length != outcomes2.length) {\n                    return false;\n                }\n                for (let i = 0; i < outcomes1.length; i++) {\n                    const outcome1 = outcomes1[i];\n                    const outcome2 = outcomes2[i];\n                    if (outcome1.name != outcome2.displayName || outcome1.displayName != outcome2.displayName) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            // Suspend drawing and initialize.\n            plumber.batch(() => {\n                var workflowId: number = this.workflowType.id;\n                activityElements.each((_, activityElement) => {\n                    const $activityElement = $(activityElement);\n                    const activityId = $activityElement.data('activity-id');\n                    const activity = this.getActivity(activityId);\n                    // Configure the activity as a target.\n                    plumber.makeTarget(activityElement, {\n                        dropOptions: { hoverClass: 'hover' },\n                        anchor: 'Continuous',\n                        endpoint: ['Blank', { radius: 8 }]\n                    });\n                    // Add source endpoints.\n                    for (let outcome of activity.outcomes) {\n                        const sourceEndpointOptions = this.getSourceEndpointOptions(activity, outcome);\n                        plumber.addEndpoint(activityElement, { connectorOverlays: [['Label', { label: outcome.displayName, cssClass: 'connection-label' }]] }, sourceEndpointOptions);\n                    }\n                });\n                // Connect activities.\n                this.updateConnections(plumber);\n                // Re-query the activity elements.\n                activityElements = this.getActivityElements();\n                // Make all activity elements visible.\n                activityElements.show();\n                this.updateCanvasHeight();\n            });\n            this.jsPlumbInstance = plumber;\n        });\n    }\n    protected getEndpointColor = (activity: Workflows.Activity) => {\n        return activity.isBlocking ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';\n    }\n}\n$.fn.workflowViewer = function (this: JQuery): JQuery {\n    this.each((index, element) => {\n        var $element = $(element);\n        var workflowType: Workflows.WorkflowType = $element.data('workflow-type');\n        $element.data('workflowViewer', new WorkflowViewer(element, workflowType));\n    });\n    return this;\n};\n$(document).ready(function () {\n    const workflowViewer: WorkflowViewer = $('.workflow-canvas').workflowViewer().data('workflowViewer');\n});\n","///<reference path='../Lib/jquery/typings.d.ts' />\n///<reference path='../Lib/jsplumb/typings.d.ts' />\nimport './workflow-models';\nabstract class WorkflowCanvas {\n    private minCanvasHeight: number = 400;\n    constructor(protected container: HTMLElement, protected workflowType: Workflows.WorkflowType) {\n    }\n    protected getActivityElements = (): JQuery => {\n        return $(this.container).find('.activity');\n    }\n    protected getDefaults = () => {\n        return {\n            Anchor: \"Continuous\",\n            DragOptions: { cursor: 'pointer', zIndex: 2000 },\n            EndpointStyles: [{ fillStyle: '#225588' }],\n            Endpoints: [[\"Dot\", { radius: 7 }], [\"Blank\"]],\n            ConnectionOverlays: [\n                [\"Arrow\", { width: 12, length: 12, location: -5 }],\n            ],\n            ConnectorZIndex: 5\n        }\n    };\n    protected createJsPlumbInstance = () => {\n        return jsPlumb.getInstance({\n            DragOptions: { cursor: 'pointer', zIndex: 2000 },\n            ConnectionOverlays: [\n                ['Arrow', {\n                    location: 1,\n                    visible: true,\n                    width: 11,\n                    length: 11\n                }],\n                ['Label', {\n                    location: 0.5,\n                    id: 'label',\n                    cssClass: 'connection-label'\n                }]\n            ],\n            Container: this.container\n        });\n    };\n    protected getEndpointColor = (activity: Workflows.Activity) => {\n        return activity.isBlocking || activity.isStart ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';\n    }\n    protected getSourceEndpointOptions = (activity: Workflows.Activity, outcome: Workflows.Outcome): EndpointOptions => {\n        // The definition of source endpoints.\n        const paintColor = this.getEndpointColor(activity);\n        return {\n            endpoint: 'Dot',\n            anchor: 'Continuous',\n            paintStyle: {\n                stroke: paintColor,\n                fill: paintColor,\n                radius: 7,\n                strokeWidth: 1\n            },\n            isSource: true,\n            connector: ['Flowchart', { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],\n            connectorStyle: {\n                strokeWidth: 2,\n                stroke: '#999999',\n                joinstyle: 'round',\n                outlineStroke: 'white',\n                outlineWidth: 2\n            },\n            hoverPaintStyle: {\n                fill: '#216477',\n                stroke: '#216477'\n            },\n            connectorHoverStyle: {\n                strokeWidth: 3,\n                stroke: '#216477',\n                outlineWidth: 5,\n                outlineStroke: 'white'\n            },\n            connectorOverlays: [['Label', { location: [3, -1.5], cssClass: 'endpointSourceLabel' }]],\n            dragOptions: {},\n            uuid: `${activity.id}-${outcome.name}`,\n            parameters: {\n                outcome: outcome\n            }\n        };\n    };\n    protected getActivity = function (id: string, activities: Array<Workflows.Activity> = null): Workflows.Activity {\n        if (!activities) {\n            activities = this.workflowType.activities;\n        }\n        return $.grep(activities, (x: Workflows.Activity) => x.id === id)[0];\n    }\n    protected updateConnections = (plumber: jsPlumbInstance) => {\n        var workflowId: number = this.workflowType.id;\n        // Connect activities.\n        for (let transitionModel of this.workflowType.transitions) {\n            const sourceEndpointUuid: string = `${transitionModel.sourceActivityId}-${transitionModel.sourceOutcomeName}`;\n            const sourceEndpoint: Endpoint = plumber.getEndpoint(sourceEndpointUuid);\n            const destinationElementId: string = `activity-${workflowId}-${transitionModel.destinationActivityId}`;\n            plumber.connect({\n                source: sourceEndpoint,\n                target: destinationElementId\n            });\n        }\n    }\n    protected updateCanvasHeight = function () {\n        const $container = $(this.container);\n        // Get the activity element with the highest Y coordinate.\n        const $activityElements = $container.find(\".activity\");\n        let currentElementTop = 0;\n        let currentActivityHeight = 0;\n        for (let activityElement of $activityElements.toArray()) {\n            const $activityElement = $(activityElement);\n            const top = $activityElement.position().top;\n            if (top > currentElementTop) {\n                currentElementTop = top;\n                currentActivityHeight = $activityElement.height();\n            }\n        }\n        let newCanvasHeight = currentElementTop + currentActivityHeight;\n        const elementBottom = currentElementTop + currentActivityHeight;\n        const stretchValue = 100;\n        if (newCanvasHeight - elementBottom <= stretchValue) {\n            newCanvasHeight += stretchValue;\n        }\n        $container.height(Math.max(this.minCanvasHeight, newCanvasHeight));\n    };\n}\nexport default WorkflowCanvas;","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n  return dest;\n};\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["_workflowCanvas","require","WorkflowViewer","_workflowCanvasDefault","default","constructor","container","workflowType","super","this","getEndpointColor","activity","isBlocking","isEvent","jsPlumb","ready","importDefaults","getDefaults","plumber","createJsPlumbInstance","bind","connInfo","originalEvent","connection","outcome","getParameters","getOverlay","setLabel","displayName","activityElements","getActivityElements","batch","id","each","_","activityElement","activityId","$","data","getActivity","makeTarget","dropOptions","hoverClass","anchor","endpoint","radius","outcomes","sourceEndpointOptions","getSourceEndpointOptions","addEndpoint","connectorOverlays","label","cssClass","updateConnections","show","updateCanvasHeight","jsPlumbInstance","fn","workflowViewer","index","element","$element","document","minCanvasHeight","find","Anchor","DragOptions","cursor","zIndex","EndpointStyles","fillStyle","Endpoints","ConnectionOverlays","width","length","location","ConnectorZIndex","getInstance","visible","Container","isStart","paintColor","paintStyle","stroke","fill","strokeWidth","isSource","connector","stub","gap","cornerRadius","alwaysRespectStubs","connectorStyle","joinstyle","outlineStroke","outlineWidth","hoverPaintStyle","connectorHoverStyle","dragOptions","uuid","name","parameters","activities","grep","x","workflowId","transitionModel","transitions","sourceEndpointUuid","sourceActivityId","sourceOutcomeName","sourceEndpoint","getEndpoint","destinationElementId","destinationActivityId","connect","source","target","$container","$activityElements","currentElementTop","currentActivityHeight","toArray","$activityElement","top","position","height","newCanvasHeight","Math","max","exports","interopDefault","a","__esModule","defineInteropFlag","Object","defineProperty","value","exportAll","dest","keys","forEach","key","prototype","hasOwnProperty","call","enumerable","get","export","destName"],"version":3,"file":"workflow-viewer.js.map"}