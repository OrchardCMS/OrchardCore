{"mappings":"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","sources":["src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/workflow-editor.ts","src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/activity-picker.ts","src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/workflow-url-generator.ts","src/OrchardCore.Modules/OrchardCore.Workflows/Assets/Scripts/workflow-canvas.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["///<reference path='../Lib/jquery/typings.d.ts' />\n///<reference path='../Lib/jsplumb/typings.d.ts' />\nimport \"./workflow-models\";\nimport \"./activity-picker\";\nimport \"./workflow-url-generator\";\nimport WorkflowCanvas from \"./workflow-canvas\";\n// TODO: Re-implement this using a MVVM approach.\nclass WorkflowEditor extends WorkflowCanvas {\n    private jsPlumbInstance: jsPlumbInstance;\n    private isPopoverVisible: boolean;\n    private hasDragged: boolean;\n    private dragStart: JQuery.Coordinates;\n    constructor(\n        protected container: HTMLElement,\n        protected workflowType: Workflows.WorkflowType,\n        private deleteActivityPrompt: string,\n        private localId: string,\n        loadLocalState: boolean,\n    ) {\n        super(container, workflowType);\n        const self = this;\n        jsPlumb.ready(() => {\n            jsPlumb.importDefaults(this.getDefaults());\n            const plumber = this.createJsPlumbInstance();\n            // Listen for new connections.\n            plumber.bind(\"connection\", function (connInfo, originalEvent) {\n                const connection: Connection = connInfo.connection;\n                const outcome: Workflows.Outcome = connection.getParameters().outcome;\n                const label: any = connection.getOverlay(\"label\");\n                label.setLabel(outcome.displayName);\n            });\n            let activityElements = this.getActivityElements();\n            var areEqualOutcomes = function (outcomes1: Workflows.Outcome[], outcomes2: Workflows.Outcome[]): boolean {\n                if (outcomes1.length != outcomes2.length) {\n                    return false;\n                }\n                for (let i = 0; i < outcomes1.length; i++) {\n                    const outcome1 = outcomes1[i];\n                    const outcome2 = outcomes2[i];\n                    if (outcome1.name != outcome2.name || outcome1.displayName != outcome2.displayName) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            // Suspend drawing and initialize.\n            plumber.batch(() => {\n                var serverworkflowType: Workflows.WorkflowType = this.workflowType;\n                var workflowId: number = this.workflowType.id;\n                if (loadLocalState) {\n                    const localState: Workflows.WorkflowType = this.loadLocalState();\n                    if (localState) {\n                        this.workflowType = localState;\n                    }\n                }\n                activityElements.each((_, activityElement) => {\n                    const $activityElement = $(activityElement);\n                    const activityId = $activityElement.data(\"activity-id\");\n                    const isDeleted = this.workflowType.removedActivities.indexOf(activityId) > -1;\n                    if (isDeleted) {\n                        $activityElement.remove();\n                        return;\n                    }\n                    let activity = this.getActivity(activityId);\n                    const serverActivity = this.getActivity(activityId, serverworkflowType.activities);\n                    // Update the activity's visual state.\n                    if (loadLocalState) {\n                        if (activity == null) {\n                            // This is a newly added activity not yet added to local state.\n                            activity = serverActivity;\n                            this.workflowType.activities.push(activity);\n                            activity.x = 50;\n                            activity.y = 50;\n                        } else {\n                            // The available outcomes might have changed when editing an activity,\n                            // so we need to check for that and update the client's activity outcomes if so.\n                            const sameOutcomes = areEqualOutcomes(activity.outcomes, serverActivity.outcomes);\n                            if (!sameOutcomes) {\n                                activity.outcomes = serverActivity.outcomes;\n                            }\n                            $activityElement.css({ left: activity.x, top: activity.y }).toggleClass(\"activity-start\", activity.isStart).data(\"activity-start\", activity.isStart);\n                        }\n                    }\n                    // Make the activity draggable.\n                    plumber.draggable(activityElement, {\n                        grid: [10, 10],\n                        containment: true,\n                        start: (args: any) => {\n                            this.dragStart = { left: args.e.screenX, top: args.e.screenY };\n                        },\n                        stop: (args: any) => {\n                            this.hasDragged = this.dragStart.left != args.e.screenX || this.dragStart.top != args.e.screenY;\n                            this.updateCanvasHeight();\n                        },\n                    });\n                    // Configure the activity as a target.\n                    plumber.makeTarget(activityElement, {\n                        dropOptions: { hoverClass: \"hover\" },\n                        anchor: \"Continuous\",\n                        endpoint: [\"Blank\", { radius: 8 }],\n                    });\n                    // Add source endpoints.\n                    for (let outcome of activity.outcomes) {\n                        const sourceEndpointOptions = this.getSourceEndpointOptions(activity, outcome);\n                        plumber.addEndpoint(\n                            activityElement,\n                            { connectorOverlays: [[\"Label\", { label: outcome.displayName, cssClass: \"connection-label\" }]] },\n                            sourceEndpointOptions,\n                        );\n                    }\n                });\n                // Connect activities.\n                this.updateConnections(plumber);\n                // Re-query the activity elements.\n                activityElements = this.getActivityElements();\n                // Make all activity elements visible.\n                activityElements.show();\n                this.updateCanvasHeight();\n            });\n            // Initialize popovers.\n            activityElements.each((_, item) => {\n                var activityElement = $(item);\n                activityElement.popover({\n                    trigger: \"manual\",\n                    html: true,\n                    content: () => {\n                        const $content: JQuery<Element> = activityElement.find(\".activity-commands\").clone();\n                        const startButton = $content.find(\".activity-start-action\");\n                        const isStart = activityElement.data(\"activity-start\") === true;\n                        const activityId: number = activityElement.data(\"activity-id\");\n                        startButton.attr(\"aria-pressed\", activityElement.data(\"activity-start\"));\n                        startButton.toggleClass(\"active\", isStart);\n                        $content.on(\"click\", \".activity-start-action\", (e) => {\n                            e.preventDefault();\n                            const button = $(e.currentTarget);\n                            let isStart = button.is(\".active\");\n                            if (isStart) {\n                                button.removeClass(\"active\");\n                                isStart = false;\n                            }\n                            else {\n                                button.addClass(\"active\");\n                                isStart = true;\n                            }\n                            activityElement.data(\"activity-start\", isStart);\n                            activityElement.toggleClass(\"activity-start\", isStart);\n                        });\n                        $content.on(\"click\", \".activity-delete-action\", (e) => {\n                            e.preventDefault();\n                            // TODO: The prompts are really annoying. Consider showing some sort of small message balloon somewhere to undo the action instead.\n                            //if (!confirm(self.deleteActivityPrompt)) {\n                            //    return;\n                            //}\n                            self.workflowType.removedActivities.push(activityId);\n                            plumber.remove(activityElement);\n                            activityElement.popover(\"dispose\");\n                        });\n                        $content.on(\"click\", \"[data-persist-workflow]\", (e) => {\n                            self.saveLocalState();\n                        });\n                        return $content.get(0);\n                    },\n                });\n            });\n            $(container).on(\"click\", \".activity\", (e) => {\n                if (this.hasDragged) {\n                    this.hasDragged = false;\n                    return;\n                }\n                // if any other popovers are visible, hide them\n                if (this.isPopoverVisible) {\n                    activityElements.popover(\"hide\");\n                }\n                const sender = $(e.currentTarget);\n                sender.popover(\"show\");\n                // handle clicking on the popover itself.\n                $(\".popover\")\n                    .off(\"click\")\n                    .on(\"click\", (e2) => {\n                        e2.stopPropagation();\n                    });\n                e.stopPropagation();\n                this.isPopoverVisible = true;\n            });\n            $(container).on(\"dblclick\", \".activity\", (e) => {\n                const sender = $(e.currentTarget);\n                const hasEditor = sender.data(\"activity-has-editor\");\n                if (hasEditor) {\n                    this.saveLocalState();\n                    sender.find(\".activity-edit-action\").get(0).click();\n                }\n            });\n            // Hide all popovers when clicking anywhere but on an activity.\n            $(\"body\").on(\"click\", (e) => {\n                activityElements.popover(\"hide\");\n                this.isPopoverVisible = false;\n            });\n            // Save local changes if the event target has the 'data-persist-workflow' attribute.\n            $(\"body\").on(\"click\", \"[data-persist-workflow]\", (e) => {\n                this.saveLocalState();\n            });\n            this.jsPlumbInstance = plumber;\n        });\n    }\n    private getState = (): Workflows.WorkflowType => {\n        const $allActivityElements = $(this.container).find(\".activity\");\n        const workflow: Workflows.WorkflowType = {\n            id: this.workflowType.id,\n            activities: [],\n            transitions: [],\n            removedActivities: this.workflowType.removedActivities,\n        };\n        // Collect activities.\n        for (let i = 0; i < $allActivityElements.length; i++) {\n            const $activityElement: JQuery = $($allActivityElements[i]);\n            const activityId: string = $activityElement.data(\"activity-id\");\n            const activityIsStart: boolean = $activityElement.data(\"activity-start\");\n            const activityIsEvent: boolean = $activityElement.data(\"activity-type\") === \"Event\";\n            const activityPosition: JQuery.Coordinates = $activityElement.position();\n            const activity: Workflows.Activity = this.getActivity(activityId);\n            workflow.activities.push({\n                id: activityId,\n                isStart: activityIsStart,\n                isEvent: activityIsEvent,\n                outcomes: activity.outcomes,\n                x: activityPosition.left,\n                y: activityPosition.top,\n            });\n        }\n        // Collect connections.\n        const allConnections = this.jsPlumbInstance.getConnections();\n        for (let i = 0; i < allConnections.length; i++) {\n            var connection = allConnections[i];\n            var sourceEndpoint: Endpoint = connection.endpoints[0];\n            var sourceOutcomeName = sourceEndpoint.getParameters().outcome.name;\n            var sourceActivityId: string = $(connection.source).data(\"activity-id\");\n            var destinationActivityId: string = $(connection.target).data(\"activity-id\");\n            workflow.transitions.push({\n                sourceActivityId: sourceActivityId,\n                destinationActivityId: destinationActivityId,\n                sourceOutcomeName: sourceOutcomeName,\n            });\n        }\n        return workflow;\n    };\n    public serialize = (): string => {\n        const workflow: Workflows.WorkflowType = this.getState();\n        return JSON.stringify(workflow);\n    };\n    private saveLocalState = (): void => {\n        sessionStorage[this.localId] = this.serialize();\n    };\n    private loadLocalState = (): Workflows.WorkflowType => {\n        return JSON.parse(sessionStorage[this.localId]);\n    };\n}\n$.fn.workflowEditor = function (this: JQuery): JQuery {\n    this.each((index, element) => {\n        var $element = $(element);\n        var workflowType: Workflows.WorkflowType = $element.data(\"workflow-type\");\n        var deleteActivityPrompt: string = $element.data(\"workflow-delete-activity-prompt\");\n        var localId: string = $element.data(\"workflow-local-id\");\n        var loadLocalState: boolean = $element.data(\"workflow-load-local-state\");\n        workflowType.removedActivities = workflowType.removedActivities || [];\n        $element.data(\"workflowEditor\", new WorkflowEditor(element, workflowType, deleteActivityPrompt, localId, loadLocalState));\n    });\n    return this;\n};\n$(document).ready(function () {\n    const workflowEditor: WorkflowEditor = $(\".workflow-canvas\").workflowEditor().data(\"workflowEditor\");\n    $(\"#workflowEditorForm\").on(\"submit\", (s, e) => {\n        const state = workflowEditor.serialize();\n        $(\"#workflowStateInput\").val(state);\n    });\n});\n","///<reference path='../Lib/jquery/typings.d.ts' />\nvar applyFilter = function (category: string, q: string) {\n    const type = $('.modal-activities').data('activity-type');\n    category = category || $('.activity-picker-categories .nav-link.active').attr('href').substr(1);\n    q = q || <string>$('.modal-activities input[type=search]').val();\n    const $cards = $('.activity.col').show();\n    // Remove activities whoes type doesn't match the configured activity type.\n    $cards.filter((i, el) => {\n        return $(el).data('activity-type') != type;\n    }).hide();\n    if (q.length > 0) {\n        // Remove activities whose title doesn't match the query.\n        $cards.filter((i, el) => {\n            return $(el).find('.card-title').text().toLowerCase().indexOf(q.toLowerCase()) < 0 && q && q.length > 0;\n        }).hide();\n    }\n    else {\n        // Remove activities whose category doesn't match the selected one.\n        $cards.filter((i, el) => {\n            return $(el).data('category').toLowerCase() != category.toLowerCase() && category.toLowerCase() != 'all';\n        }).hide();\n    }\n    // Show or hide categories based on whether there are any available activities.\n    $('.activity-picker-categories [data-category]').each((i, el) => {\n        const categoryListItem = $(el);\n        const category = categoryListItem.data('category');\n        // Count number of activities within this category and for the specified activity type (Event or Task).\n        const activityCount = $(`.activity.col[data-category='${category}'][data-activity-type='${type}']`).length;\n        activityCount == 0 ? categoryListItem.hide() : categoryListItem.show();\n    });\n};\n$(() => {\n    $('.activity-picker-categories').on('click', '.nav-link', e => {\n        applyFilter($(e.target).attr('href').substr(1), null);\n    });\n    $('.modal-activities input[type=search]').on('keyup', e => {\n        applyFilter(null, <string>$(e.target).val());\n    });\n    $('#activity-picker').on('show.bs.modal', function (event) {\n        var modalEvent = event as any;\n        var button = $(modalEvent.relatedTarget); // Button that triggered the modal.\n        var title = button.data('picker-title');\n        var type = button.data('activity-type');\n        var modal = $(this);\n        modal.find('[href=\"#all\"]').click();\n        modal.find('.modal-title').text(title);\n        modal.data('activity-type', type);\n        applyFilter(null, null);\n    })\n});\n","///<reference path=\"../Lib/jquery/typings.d.ts\" />\n$(() => {\n    const generateWorkflowUrl = function () {\n        const workflowTypeId: string = $('[data-workflow-type-id]').data('workflow-type-id');\n        const activityId: string = $('[data-activity-id]').data('activity-id');\n        var tokenLifeSpan = $('#token-lifespan').val();\n        const generateUrl: string = $('[data-generate-url]').data('generate-url') + `?workflowTypeId=${workflowTypeId}&activityId=${activityId}&tokenLifeSpan=${tokenLifeSpan}`;\n        const antiforgeryHeaderName: string = $('[data-antiforgery-header-name]').data('antiforgery-header-name');\n        const antiforgeryToken: string = $('[data-antiforgery-token]').data('antiforgery-token');\n        const headers: any = {};\n        headers[antiforgeryHeaderName] = antiforgeryToken;\n        $.post({\n            url: generateUrl,\n            headers: headers\n        }).done(url => {\n            $('#workflow-url-text').val(url);\n        });\n    };\n    $('#generate-url-button').on('click', e => {\n        generateWorkflowUrl();\n    });\n    if ($('#workflow-url-text').val() == '') {\n        generateWorkflowUrl();\n    }\n});\n","///<reference path='../Lib/jquery/typings.d.ts' />\n///<reference path='../Lib/jsplumb/typings.d.ts' />\nimport './workflow-models';\nabstract class WorkflowCanvas {\n    private minCanvasHeight: number = 400;\n    constructor(protected container: HTMLElement, protected workflowType: Workflows.WorkflowType) {\n    }\n    protected getActivityElements = (): JQuery => {\n        return $(this.container).find('.activity');\n    }\n    protected getDefaults = () => {\n        return {\n            Anchor: \"Continuous\",\n            DragOptions: { cursor: 'pointer', zIndex: 2000 },\n            EndpointStyles: [{ fillStyle: '#225588' }],\n            Endpoints: [[\"Dot\", { radius: 7 }], [\"Blank\"]],\n            ConnectionOverlays: [\n                [\"Arrow\", { width: 12, length: 12, location: -5 }],\n            ],\n            ConnectorZIndex: 5\n        }\n    };\n    protected createJsPlumbInstance = () => {\n        return jsPlumb.getInstance({\n            DragOptions: { cursor: 'pointer', zIndex: 2000 },\n            ConnectionOverlays: [\n                ['Arrow', {\n                    location: 1,\n                    visible: true,\n                    width: 11,\n                    length: 11\n                }],\n                ['Label', {\n                    location: 0.5,\n                    id: 'label',\n                    cssClass: 'connection-label'\n                }]\n            ],\n            Container: this.container\n        });\n    };\n    protected getEndpointColor = (activity: Workflows.Activity) => {\n        return activity.isBlocking || activity.isStart ? '#7ab02c' : activity.isEvent ? '#3a8acd' : '#7ab02c';\n    }\n    protected getSourceEndpointOptions = (activity: Workflows.Activity, outcome: Workflows.Outcome): EndpointOptions => {\n        // The definition of source endpoints.\n        const paintColor = this.getEndpointColor(activity);\n        return {\n            endpoint: 'Dot',\n            anchor: 'Continuous',\n            paintStyle: {\n                stroke: paintColor,\n                fill: paintColor,\n                radius: 7,\n                strokeWidth: 1\n            },\n            isSource: true,\n            connector: ['Flowchart', { stub: [40, 60], gap: 0, cornerRadius: 5, alwaysRespectStubs: true }],\n            connectorStyle: {\n                strokeWidth: 2,\n                stroke: '#999999',\n                joinstyle: 'round',\n                outlineStroke: 'white',\n                outlineWidth: 2\n            },\n            hoverPaintStyle: {\n                fill: '#216477',\n                stroke: '#216477'\n            },\n            connectorHoverStyle: {\n                strokeWidth: 3,\n                stroke: '#216477',\n                outlineWidth: 5,\n                outlineStroke: 'white'\n            },\n            connectorOverlays: [['Label', { location: [3, -1.5], cssClass: 'endpointSourceLabel' }]],\n            dragOptions: {},\n            uuid: `${activity.id}-${outcome.name}`,\n            parameters: {\n                outcome: outcome\n            }\n        };\n    };\n    protected getActivity = function (id: string, activities: Array<Workflows.Activity> = null): Workflows.Activity {\n        if (!activities) {\n            activities = this.workflowType.activities;\n        }\n        return $.grep(activities, (x: Workflows.Activity) => x.id === id)[0];\n    }\n    protected updateConnections = (plumber: jsPlumbInstance) => {\n        var workflowId: number = this.workflowType.id;\n        // Connect activities.\n        for (let transitionModel of this.workflowType.transitions) {\n            const sourceEndpointUuid: string = `${transitionModel.sourceActivityId}-${transitionModel.sourceOutcomeName}`;\n            const sourceEndpoint: Endpoint = plumber.getEndpoint(sourceEndpointUuid);\n            const destinationElementId: string = `activity-${workflowId}-${transitionModel.destinationActivityId}`;\n            plumber.connect({\n                source: sourceEndpoint,\n                target: destinationElementId\n            });\n        }\n    }\n    protected updateCanvasHeight = function () {\n        const $container = $(this.container);\n        // Get the activity element with the highest Y coordinate.\n        const $activityElements = $container.find(\".activity\");\n        let currentElementTop = 0;\n        let currentActivityHeight = 0;\n        for (let activityElement of $activityElements.toArray()) {\n            const $activityElement = $(activityElement);\n            const top = $activityElement.position().top;\n            if (top > currentElementTop) {\n                currentElementTop = top;\n                currentActivityHeight = $activityElement.height();\n            }\n        }\n        let newCanvasHeight = currentElementTop + currentActivityHeight;\n        const elementBottom = currentElementTop + currentActivityHeight;\n        const stretchValue = 100;\n        if (newCanvasHeight - elementBottom <= stretchValue) {\n            newCanvasHeight += stretchValue;\n        }\n        $container.height(Math.max(this.minCanvasHeight, newCanvasHeight));\n    };\n}\nexport default WorkflowCanvas;","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n  return dest;\n};\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["_workflowCanvas","require","WorkflowEditor","_workflowCanvasDefault","default","constructor","container","workflowType","deleteActivityPrompt","localId","loadLocalState","super","this","getState","$allActivityElements","$","find","workflow","id","activities","transitions","removedActivities","i","length","$activityElement","activityId","data","activityIsStart","activityIsEvent","activityPosition","position","activity","getActivity","push","isStart","isEvent","outcomes","x","left","y","top","allConnections","jsPlumbInstance","getConnections","connection","sourceOutcomeName","endpoints","getParameters","outcome","name","sourceActivityId","source","destinationActivityId","target","serialize","JSON","stringify","saveLocalState","sessionStorage","parse","self","jsPlumb","ready","importDefaults","getDefaults","plumber","createJsPlumbInstance","bind","connInfo","originalEvent","getOverlay","setLabel","displayName","activityElements","getActivityElements","batch","serverworkflowType","localState","each","_","activityElement","indexOf","remove","serverActivity","outcomes1","outcomes2","outcome1","outcome2","areEqualOutcomes","css","toggleClass","draggable","grid","containment","start","args","dragStart","e","screenX","screenY","stop","hasDragged","updateCanvasHeight","makeTarget","dropOptions","hoverClass","anchor","endpoint","radius","sourceEndpointOptions","getSourceEndpointOptions","addEndpoint","connectorOverlays","label","cssClass","updateConnections","show","item","popover","trigger","html","content","$content","clone","startButton","attr","on","preventDefault","button","currentTarget","is","removeClass","addClass","get","isPopoverVisible","off","e2","stopPropagation","sender","click","fn","workflowEditor","index","element","$element","document","s","state","val","applyFilter","category","q","type","substr","$cards","filter","el","hide","text","toLowerCase","categoryListItem","event","relatedTarget","title","modal","generateWorkflowUrl","workflowTypeId","tokenLifeSpan","generateUrl","antiforgeryHeaderName","antiforgeryToken","headers","post","url","done","minCanvasHeight","Anchor","DragOptions","cursor","zIndex","EndpointStyles","fillStyle","Endpoints","ConnectionOverlays","width","location","ConnectorZIndex","getInstance","visible","Container","getEndpointColor","isBlocking","paintColor","paintStyle","stroke","fill","strokeWidth","isSource","connector","stub","gap","cornerRadius","alwaysRespectStubs","connectorStyle","joinstyle","outlineStroke","outlineWidth","hoverPaintStyle","connectorHoverStyle","dragOptions","uuid","parameters","grep","workflowId","transitionModel","sourceEndpointUuid","sourceEndpoint","getEndpoint","destinationElementId","connect","$container","$activityElements","currentElementTop","currentActivityHeight","toArray","height","newCanvasHeight","Math","max","exports","interopDefault","a","__esModule","defineInteropFlag","Object","defineProperty","value","exportAll","dest","keys","forEach","key","prototype","hasOwnProperty","call","enumerable","export","destName"],"version":3,"file":"workflow-editor.js.map"}