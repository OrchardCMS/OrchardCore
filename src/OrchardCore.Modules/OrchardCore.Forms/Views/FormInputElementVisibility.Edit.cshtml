@using OrchardCore
@using OrchardCore.Forms.Models
@using OrchardCore.Forms.ViewModels
@using System.Text.Json

@model FormInputElementVisibilityViewModel

<div class="@Orchard.GetWrapperClasses()">
    <label asp-for="Action" class="@Orchard.GetLabelClasses()">@T["Action"]</label>
    <div class="@Orchard.GetEndClasses()">
        <select asp-for="Action" asp-items="Model.Actions" class="form-select"></select>
        <span class="hint">@T["The action to take when the condition is met."]</span>
    </div>
</div>

<div class="input-visibility-settings d-none" data-prefix="@Html.NameForModel()">
    <div class="main-group-container"
         data-prefix="@Html.NameForModel()"
         data-model="@JsonSerializer.Serialize(Model, JOptions.CamelCase)">
    </div>
</div>

<script asp-name="form-visibility" asp-src="~/OrchardCore.Forms/Scripts/form-visibility.min.js" debug-src="~/OrchardCore.Forms/Scripts/form-visibility.js" at="Foot" depends-on="vuejs:2"> </script>

<script at="Foot" asp-name="InitializeGroups">
    function processContainers(containers) {
        containers.forEach(container => {
            initializeOrUpdateVue(container);
            actionVisibilitySettings(container);
        });
    }

    document.addEventListener('DOMContentLoaded', () =>
    {
        const flowWidgetObserver = new MutationObserver(mutationsList => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) {
                            const containers = node.matches('.main-group-container')
                                ? [node]
                                : [...node.querySelectorAll('.main-group-container')];

                            processContainers(containers);
                        }
                    });
                }
            }
            document.querySelectorAll('.main-group-container').forEach(container =>
                actionVisibilitySettings(container));
        });

        flowWidgetObserver.observe(document.body, { childList: true, subtree:   true });

        Vue.config.productionTip = false;
        Vue.config.devtools = false;

        const containers = [...document.querySelectorAll('.main-group-container')];

        processContainers(containers);

    });

    function initializeOrUpdateVue(container) {

        var rawConfig = container.getAttribute('data-model');

        var cfg = JSON.parse(rawConfig);

        formVisibilityGroups.initialize({
            appElementSelector: container,
            prefix:             container.getAttribute('data-prefix'),
            widgetId:           container.getAttribute('data-prefix'),
            groupOptions:       cfg.groups    || [],
            operatorOptions:    cfg.operators || [],
            caseSensitive:      cfg.caseSensitive
        });
    }

    function actionVisibilitySettings(container) {

        var prefix = container.getAttribute('data-prefix');

        if (!prefix) {
            console.log("No data-prefix found; exiting.");
            return;
        }

        var findPrefix = prefix + ".Action";

        var actionElement = document.querySelector('select[name="' + findPrefix + '"]');

        if (!actionElement) {
            return;
        }

        var visibilityContainer = document.querySelector('.input-visibility-settings[data-prefix="' + prefix + '"]');

        if (!visibilityContainer) {
            return;
        }

        actionElement.addEventListener("change", function(e) {
            if (e.target.value === "None") {
                visibilityContainer.classList.add("d-none");
            } else {
                visibilityContainer.classList.remove("d-none");
            }
        });

        actionElement.dispatchEvent(new Event("change", { bubbles: true }));
    }
</script>
