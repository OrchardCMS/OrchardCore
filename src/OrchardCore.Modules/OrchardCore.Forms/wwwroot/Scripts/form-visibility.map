{"version":3,"sources":["<anon>"],"sourcesContent":["window.formVisibilityGroups = function () {\n    const defaultConfig = {\n        template:\n            `\n        <div class=\"mb-3\">\n            <!-- Loop through each group -->\n            <div class=\"card mb-1\" v-for=\"(group, groupIndex) in groups\" :key=\"groupIndex\">\n                <div class=\"card-header d-flex justify-content-between align-items-center\">\n                    <span>Group {{ groupIndex + 1 }}</span>\n                    <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].IsRemoved'\" value=\"false\" />\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeGroup(groupIndex)\">\n                        <i class=\"fa-solid fa-trash\"></i>\n                    </button>\n                </div>\n                        \n                <div class=\"card-body\">\n\n                    <!-- Loop through each rule -->\n                    <ul class=\"list-group w-100\">\n                        <!-- Loop through each rule in the group -->\n                        <li class=\"list-group-item\" v-for=\"(rule, ruleIndex) in group.rules\" :key=\"ruleIndex\">\n                            <div class=\"row\">\n                                <div class=\"col\">\n                                    <select class=\"form-select\" v-model=\"rule.field\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Field'\">\n                                        <option value=\"\">Select Field</option>\n                                    <option v-for=\"option in filteredFieldOptions(rule.field)\" :value=\"option.value\">\n                                        {{ option.text }}\n                                        </option>\n                                    </select>\n                                </div>\n                                <div class=\"col\" :class=\"{'d-none': !rule.field}\">\n                                    <select class=\"form-select\" v-model=\"rule.operator\"\n                                    :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Operator'\">\n                                        <option value=\"\">Select Operator</option>\n                                        <option v-for=\"option in operatorsList(rule.field)\" :value=\"option.value\">\n                                            {{ option.text }}\n                                        </option>\n                                    </select>\n                                </div>\n                                <div class=\"col\" :class=\"{'d-none': !shouldShowValue(rule.operator)}\">\n                                    <input type=\"text\" class=\"form-control\" v-model=\"rule.value\" placeholder=\"Value\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].Value'\" />\n                                </div>\n                                <div class=\"col-auto d-flex align-items-center\" :class=\"{'d-none': !shouldShowValue(rule.operator)}\">\n                                    <input type=\"checkbox\" class=\"form-check-input\" v-model=\"rule.caseSensitive\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].CaseSensitive'\" :value=\"true\" :false-value=\"false\" />\n                                    <label class=\"form-check-label ms-2\" :for=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].CaseSensitive'\"> Case sensitive </label>\n                                </div>\n                                <div class=\"col-auto\">\n                                    <input type=\"hidden\" :name=\"prefix + 'Groups[' + groupIndex + '].Rules[' + ruleIndex + '].IsRemoved'\" value=\"false\" />\n                                    <button type=\"button\" class=\"btn btn-sm btn-danger\" @click=\"removeRule(groupIndex, ruleIndex)\">\n                                        <i class=\"fa-solid fa-trash\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </li>\n  \n                    </ul>\n                </div>\n\n                <div class=\"card-footer\">\n                    <div class=\"d-flex justify-content-end\">\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addRule(groupIndex)\">\n                            <i class=\"fa-solid fa-plus\"></i> New Rule\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-end p-3\">\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addGroup()\">\n                    <i class=\"fa-solid fa-circle-plus\"></i> New Group\n                </button>\n            </div>\n        </div>\n        `\n    };\n\n    const initialize = (instanceConfig) => {\n        const config = Object.assign({}, defaultConfig, instanceConfig);\n        if (!config.appElementSelector) {\n            console.error('appElementSelector is required');\n            return;\n        }\n\n        const app = new Vue({\n            el: config.appElementSelector,\n            data() {\n                return {\n                    groups: config.groupOptions || [],\n                    fieldOptions: config.FieldOptions || [],\n                    operatorOptions: config.operatorOptions || [],\n                    allOperatorOptions: config.operatorOptions || [],\n                    caseSensitive: config.caseSensitive,\n                    prefix: '',\n                    widgetId: config.widgetId,\n                    preloadedOptions: [],\n                };\n            },\n\n            methods: {\n                addGroup() {\n                    var newGroup = {\n                        rules: [{\n                            field: '',\n                            operator: '',\n                            value: '',\n                            caseSensitive: this.caseSensitive\n                        }]\n                    };\n\n                    this.groups.push(newGroup);\n                    this.$set(this.groups, this.groups.length - 1, newGroup);\n                },\n\n                addRule(groupIndex) {\n                    const newRule = {\n                        field: '',\n                        operator: '',\n                        value: '',\n                        caseSensitive: this.caseSensitive\n                    };\n\n                    this.$set(this.groups[groupIndex].rules, this.groups[groupIndex].rules.length, newRule);\n                },\n\n                removeGroup(groupIndex) {\n                    this.groups.splice(groupIndex, 1);\n                },\n\n                removeRule(groupIndex, ruleIndex) {\n                    this.groups[groupIndex].rules.splice(ruleIndex, 1);\n                },\n\n                populateFields() {\n                    const inputs = this.getInputs(document);\n                    this.fieldOptions = inputs.map(function (input) {\n                        return {\n                            value: input.htmlName,\n                            text: input.htmlName,\n                            type: input.htmlInputType\n                        };\n                    });\n                },\n\n                getInputs(el) {\n                    const widgetElements = el.querySelectorAll('.widget-template');\n\n                    const results = [];\n\n                    widgetElements.forEach(function (widget) {\n                        const formElementNameInput = widget.querySelector('input[name$=\"FormInputElementPart.Name\"]');\n\n                        if (formElementNameInput) {\n                            const htmlName = formElementNameInput.value.trim();\n\n                            let selectedOption = 'text';\n\n                            let inputTypeSelect = widget.querySelector('select[name$=\"InputPart.Type\"], select[name$=\"SelectPart.Editor\"]');\n\n                            if (inputTypeSelect) {\n                                selectedOption = inputTypeSelect.options[inputTypeSelect.selectedIndex].value.toLowerCase();\n                            }\n\n                            if (!htmlName || !selectedOption) {\n                                return;\n                            }\n\n                            results.push({\n                                htmlName: htmlName,\n                                htmlInputType: selectedOption\n                            });\n                        }\n                    });\n                    return results;\n                },\n\n                filteredFieldOptions() {\n                    const widgetTemplate = this.$el.closest('.widget-template');\n\n                    if (!widgetTemplate) return this.fieldOptions;\n\n                    const containerName = widgetTemplate.querySelector('input[name$=\"FormInputElementPart.Name\"]')?.value.trim() || \"\";\n\n                    if (!containerName) {\n                        return this.fieldOptions;\n                    }\n\n                    const setValues = new Set();\n\n                    const filteredOptions = this.fieldOptions.filter(option => {\n\n                        const optionValue = String(option.value || \"\").trim();\n\n                        if (optionValue === containerName) {\n                            return false;\n                        }\n\n                        if (setValues.has(optionValue)) {\n                            return false;\n                        }\n\n                        setValues.add(optionValue);\n\n                        return true;\n                    });\n\n                    return filteredOptions;\n                },\n\n                operatorsList(fieldId) {\n                    const field = this.fieldOptions.find(field => field.value === fieldId);\n\n                    if (!field) return [];\n\n                    const mapping = this.operatorMapping();\n\n                    if (!mapping[field.type]) return [];\n\n                    return this.allOperatorOptions.filter(x =>\n                        mapping[field.type].includes(x.value)\n                    );\n                },\n\n                operatorMapping() {\n                    return {\n                        radio: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\", \"Contains\", \"DoesNotContain\", \"StartsWith\", \"EndsWith\"],\n                        checkbox: [\"Is\", \"IsNot\", \"Contains\", \"DoesNotContain\"],\n                        text: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\", \"Contains\", \"DoesNotContain\", \"StartsWith\", \"EndsWith\"],\n                        number: [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        email: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\"],\n                        tel: [\"Is\", \"IsNot\"],\n                        date: [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        time: [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        \"datetime\": [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        \"datetime-local\": [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        month: [\"Is\", \"IsNot\"],\n                        week: [\"Is\", \"IsNot\"],\n                        hidden: [\"Is\", \"IsNot\"],\n                        password: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\"],\n                        color: [\"Is\", \"IsNot\"],\n                        range: [\"Is\", \"IsNot\", \"GreaterThan\", \"LessThan\"],\n                        file: [\"Is\", \"IsNot\"],\n                        url: [\"Is\", \"IsNot\", \"Contains\"],\n                        image: [\"Is\", \"IsNot\"],\n                        reset: [\"Is\", \"IsNot\"],\n                        search: [\"Is\", \"IsNot\", \"Contains\"],\n                        dropdown: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\", \"Contains\", \"DoesNotContain\", \"StartsWith\", \"EndsWith\"],\n                        textarea: [\"Is\", \"IsNot\", \"Empty\", \"NotEmpty\", \"Contains\", \"DoesNotContain\", \"StartsWith\", \"EndsWith\"],\n                        submit: []\n                    };\n                },\n\n                toggleTabEvent() {\n                    document.addEventListener('shown.bs.tab', (event) => {\n                        if (!event.target.matches('[data-bs-toggle=\"tab\"]')) {\n                            return;\n                        }\n\n                        var container = event.target.closest('.content-part-wrapper-form-part');\n\n                        var inputs = this.getInputs(container || document);\n\n                        this.fieldOptions = inputs.map(input => ({\n                            value: input.htmlName,\n                            text: input.htmlName,\n                            type: input.htmlInputType\n                        }));\n                    });\n                },\n\n                shouldShowValue(operator) {\n                    if (!operator) {\n                        return false;\n                    }\n\n                    const check = operator;\n\n                    if (check === 'Empty' || check === 'NotEmpty') {\n                        return false;\n                    }\n\n                    return true;\n                }\n            },\n\n            mounted() {\n                if (config.prefix) {\n                    this.prefix = config.prefix + '.';\n                }\n                this.toggleTabEvent();\n                this.groups = config.groupOptions || [];\n                this.operatorOptions = config.operatorOptions || [];\n                this.allOperatorOptions = config.operatorOptions || [];\n                this.populateFields();\n                const observer = new MutationObserver(mutations => {\n                    mutations.forEach(mutation => {\n                        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n                            this.preloadedOptions = this.filteredFieldOptions();\n                        }\n                    });\n                });\n                observer.observe(this.$el, { childList: true, subtree: true });\n            }, template: config.template\n        });\n        return app;\n    };\n\n    return {\n        initialize: initialize\n    };\n}();\n"],"names":["window","formVisibilityGroups","defaultConfig","template","initialize","instanceConfig","config","Object","assign","appElementSelector","console","error","Vue","el","data","groups","groupOptions","fieldOptions","FieldOptions","operatorOptions","allOperatorOptions","caseSensitive","prefix","widgetId","preloadedOptions","methods","addGroup","newGroup","rules","field","operator","value","push","$set","length","addRule","groupIndex","newRule","removeGroup","splice","removeRule","ruleIndex","populateFields","inputs","getInputs","document","map","input","htmlName","text","type","htmlInputType","widgetElements","querySelectorAll","results","forEach","widget","formElementNameInput","querySelector","trim","selectedOption","inputTypeSelect","options","selectedIndex","toLowerCase","filteredFieldOptions","widgetTemplate","$el","closest","containerName","setValues","Set","filter","option","optionValue","String","has","add","operatorsList","fieldId","find","mapping","operatorMapping","x","includes","radio","checkbox","number","email","tel","date","time","month","week","hidden","password","color","range","file","url","image","reset","search","dropdown","textarea","submit","toggleTabEvent","addEventListener","event","target","matches","container","shouldShowValue","check","mounted","observer","MutationObserver","mutations","mutation","addedNodes","observe","childList","subtree"],"mappings":"AAAAA,OAAOC,oBAAoB,CAAG,WAC1B,IAAMC,EAAgB,CAClBC,SACI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,AACL,EAwOA,MAAO,CACHC,WAvOe,AAACC,IAChB,IAAMC,EAASC,OAAOC,MAAM,CAAC,CAAC,EAAGN,EAAeG,GAChD,GAAI,CAACC,EAAOG,kBAAkB,CAAE,CAC5BC,QAAQC,KAAK,CAAC,kCACd,MACJ,CA8NA,OA5NY,IAAIC,IAAI,CAChBC,GAAIP,EAAOG,kBAAkB,CAC7BK,KAAAA,IACW,CAAA,CACHC,OAAQT,EAAOU,YAAY,EAAI,EAAE,CACjCC,aAAcX,EAAOY,YAAY,EAAI,EAAE,CACvCC,gBAAiBb,EAAOa,eAAe,EAAI,EAAE,CAC7CC,mBAAoBd,EAAOa,eAAe,EAAI,EAAE,CAChDE,cAAef,EAAOe,aAAa,CACnCC,OAAQ,GACRC,SAAUjB,EAAOiB,QAAQ,CACzBC,iBAAkB,EAAE,AACxB,CAAA,EAGJC,QAAS,CACLC,WACI,IAAIC,EAAW,CACXC,MAAO,CAAC,CACJC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPV,cAAe,IAAI,CAACA,aAAa,AACrC,EAAE,AACN,EAEA,IAAI,CAACN,MAAM,CAACiB,IAAI,CAACL,GACjB,IAAI,CAACM,IAAI,CAAC,IAAI,CAAClB,MAAM,CAAE,IAAI,CAACA,MAAM,CAACmB,MAAM,CAAG,EAAGP,EACnD,EAEAQ,QAAQC,CAAU,EACd,IAAMC,EAAU,CACZR,MAAO,GACPC,SAAU,GACVC,MAAO,GACPV,cAAe,IAAI,CAACA,aAAa,AACrC,EAEA,IAAI,CAACY,IAAI,CAAC,IAAI,CAAClB,MAAM,CAACqB,EAAW,CAACR,KAAK,CAAE,IAAI,CAACb,MAAM,CAACqB,EAAW,CAACR,KAAK,CAACM,MAAM,CAAEG,EACnF,EAEAC,YAAYF,CAAU,EAClB,IAAI,CAACrB,MAAM,CAACwB,MAAM,CAACH,EAAY,EACnC,EAEAI,WAAWJ,CAAU,CAAEK,CAAS,EAC5B,IAAI,CAAC1B,MAAM,CAACqB,EAAW,CAACR,KAAK,CAACW,MAAM,CAACE,EAAW,EACpD,EAEAC,iBACI,IAAMC,EAAS,IAAI,CAACC,SAAS,CAACC,SAC9B,CAAA,IAAI,CAAC5B,YAAY,CAAG0B,EAAOG,GAAG,CAAC,SAAUC,CAAK,EAC1C,MAAO,CACHhB,MAAOgB,EAAMC,QAAQ,CACrBC,KAAMF,EAAMC,QAAQ,CACpBE,KAAMH,EAAMI,aAAa,AAC7B,CACJ,EACJ,EAEAP,UAAU/B,CAAE,EACR,IAAMuC,EAAiBvC,EAAGwC,gBAAgB,CAAC,oBAErCC,EAAU,EAAE,CA0BlB,OAxBAF,EAAeG,OAAO,CAAC,SAAUC,CAAM,EACnC,IAAMC,EAAuBD,EAAOE,aAAa,CAAC,4CAElD,GAAID,EAAsB,CACtB,IAAMT,EAAWS,EAAqB1B,KAAK,CAAC4B,IAAI,GAE5CC,EAAiB,OAEjBC,EAAkBL,EAAOE,aAAa,CAAC,qEAM3C,GAJIG,GACAD,CAAAA,EAAiBC,EAAgBC,OAAO,CAACD,EAAgBE,aAAa,CAAC,CAAChC,KAAK,CAACiC,WAAW,EAAC,EAG1F,CAAChB,GAAY,CAACY,EACd,OAGJN,EAAQtB,IAAI,CAAC,CACTgB,SAAUA,EACVG,cAAeS,CACnB,EACJ,CACJ,GACON,CACX,EAEAW,uBACI,IAAMC,EAAiB,IAAI,CAACC,GAAG,CAACC,OAAO,CAAC,oBAExC,GAAI,CAACF,EAAgB,OAAO,IAAI,CAACjD,YAAY,CAE7C,IAAMoD,EAAgBH,EAAeR,aAAa,CAAC,6CAA6C3B,MAAM4B,QAAU,GAEhH,GAAI,CAACU,EACD,OAAO,IAAI,CAACpD,YAAY,CAG5B,IAAMqD,EAAY,IAAIC,IAmBtB,OAjBwB,IAAI,CAACtD,YAAY,CAACuD,MAAM,CAACC,IAE7C,IAAMC,EAAcC,OAAOF,EAAO1C,KAAK,EAAI,IAAI4B,IAAI,SAEnD,EAAIe,IAAgBL,GAIhBC,EAAUM,GAAG,CAACF,MAIlBJ,EAAUO,GAAG,CAACH,GAEP,CAAA,EACX,EAGJ,EAEAI,cAAcC,CAAO,EACjB,IAAMlD,EAAQ,IAAI,CAACZ,YAAY,CAAC+D,IAAI,CAACnD,GAASA,EAAME,KAAK,GAAKgD,GAE9D,GAAI,CAAClD,EAAO,MAAO,EAAE,CAErB,IAAMoD,EAAU,IAAI,CAACC,eAAe,UAEpC,AAAKD,CAAO,CAACpD,EAAMqB,IAAI,CAAC,CAEjB,IAAI,CAAC9B,kBAAkB,CAACoD,MAAM,CAACW,GAClCF,CAAO,CAACpD,EAAMqB,IAAI,CAAC,CAACkC,QAAQ,CAACD,EAAEpD,KAAK,GAHP,EAAE,AAKvC,EAEAmD,gBAAAA,IACW,CAAA,CACHG,MAAO,CAAC,KAAM,QAAS,QAAS,WAAY,WAAY,iBAAkB,aAAc,WAAW,CACnGC,SAAU,CAAC,KAAM,QAAS,WAAY,iBAAiB,CACvDrC,KAAM,CAAC,KAAM,QAAS,QAAS,WAAY,WAAY,iBAAkB,aAAc,WAAW,CAClGsC,OAAQ,CAAC,KAAM,QAAS,cAAe,WAAW,CAClDC,MAAO,CAAC,KAAM,QAAS,QAAS,WAAW,CAC3CC,IAAK,CAAC,KAAM,QAAQ,CACpBC,KAAM,CAAC,KAAM,QAAS,cAAe,WAAW,CAChDC,KAAM,CAAC,KAAM,QAAS,cAAe,WAAW,CAChD,SAAY,CAAC,KAAM,QAAS,cAAe,WAAW,CACtD,iBAAkB,CAAC,KAAM,QAAS,cAAe,WAAW,CAC5DC,MAAO,CAAC,KAAM,QAAQ,CACtBC,KAAM,CAAC,KAAM,QAAQ,CACrBC,OAAQ,CAAC,KAAM,QAAQ,CACvBC,SAAU,CAAC,KAAM,QAAS,QAAS,WAAW,CAC9CC,MAAO,CAAC,KAAM,QAAQ,CACtBC,MAAO,CAAC,KAAM,QAAS,cAAe,WAAW,CACjDC,KAAM,CAAC,KAAM,QAAQ,CACrBC,IAAK,CAAC,KAAM,QAAS,WAAW,CAChCC,MAAO,CAAC,KAAM,QAAQ,CACtBC,MAAO,CAAC,KAAM,QAAQ,CACtBC,OAAQ,CAAC,KAAM,QAAS,WAAW,CACnCC,SAAU,CAAC,KAAM,QAAS,QAAS,WAAY,WAAY,iBAAkB,aAAc,WAAW,CACtGC,SAAU,CAAC,KAAM,QAAS,QAAS,WAAY,WAAY,iBAAkB,aAAc,WAAW,CACtGC,OAAQ,EAAE,AACd,CAAA,EAGJC,iBACI7D,SAAS8D,gBAAgB,CAAC,eAAgB,AAACC,IACvC,GAAKA,EAAMC,MAAM,CAACC,OAAO,CAAC,2BAI1B,IAAIC,EAAYH,EAAMC,MAAM,CAACzC,OAAO,CAAC,mCAEjCzB,EAAS,IAAI,CAACC,SAAS,CAACmE,GAAalE,SAEzC,CAAA,IAAI,CAAC5B,YAAY,CAAG0B,EAAOG,GAAG,CAACC,GAAU,CAAA,CACrChB,MAAOgB,EAAMC,QAAQ,CACrBC,KAAMF,EAAMC,QAAQ,CACpBE,KAAMH,EAAMI,aAAa,AAC7B,CAAA,GACJ,EACJ,EAEA6D,gBAAAA,AAAgBlF,GACZ,EAAKA,GAMDmF,AAAU,UAFAnF,GAEWmF,AAAU,aAFrBnF,CAQtB,EAEAoF,UACQ5G,EAAOgB,MAAM,EACb,CAAA,IAAI,CAACA,MAAM,CAAGhB,EAAOgB,MAAM,CAAG,GAAE,EAEpC,IAAI,CAACoF,cAAc,GACnB,IAAI,CAAC3F,MAAM,CAAGT,EAAOU,YAAY,EAAI,EAAE,CACvC,IAAI,CAACG,eAAe,CAAGb,EAAOa,eAAe,EAAI,EAAE,CACnD,IAAI,CAACC,kBAAkB,CAAGd,EAAOa,eAAe,EAAI,EAAE,CACtD,IAAI,CAACuB,cAAc,GAQnByE,AAPiB,IAAIC,iBAAiBC,IAClCA,EAAU9D,OAAO,CAAC+D,IACQ,cAAlBA,EAASpE,IAAI,EAAoBoE,EAASC,UAAU,CAACrF,MAAM,EAC3D,CAAA,IAAI,CAACV,gBAAgB,CAAG,IAAI,CAACyC,oBAAoB,EAAC,CAE1D,EACJ,GACSuD,OAAO,CAAC,IAAI,CAACrD,GAAG,CAAE,CAAEsD,UAAW,CAAA,EAAMC,QAAS,CAAA,CAAK,EAChE,EAAGvH,SAAUG,EAAOH,QAAQ,AAChC,EAEJ,CAIA,CACJ"}
