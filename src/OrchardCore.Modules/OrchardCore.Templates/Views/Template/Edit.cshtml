@model TemplateViewModel
@{
    var returnUrl = ViewData["returnUrl"]?.ToString();
    var culture = CultureInfo.CurrentUICulture;
}

@await DisplayAsync(await New.ShortcodeModal())

@if (Model.AdminTemplates)
{
    <zone Name="Title"><h1>@RenderTitleSegments(T["Edit Admin Template"])</h1></zone>
}
else
{
    <zone Name="Title"><h1>@RenderTitleSegments(T["Edit Template"])</h1></zone>
}

<div asp-validation-summary="ModelOnly"></div>
<form asp-action="Edit" asp-route-returnUrl="@ViewData["returnUrl"]" method="post" class="no-multisubmit">
    <div class="card text-bg-theme mb-3 position-sticky action-bar">
        <div class="card-body p-3 text-end">
            <div class="btn-group">
                <button type="submit" name="submit" class="btn btn-sm btn-primary save">@T["Save"]</button>
                <button type="button" class="btn btn-sm btn-primary dropdown-toggle dropdown-toggle-split" data-reference="parent" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="visually-hidden">@T["Toggle Dropdown"]</span>
                </button>
                <div class="dropdown-menu">
                    <button class="dropdown-item save-continue" name="submit" type="submit" value="SaveAndContinue">@T["and continue"]</button>
                </div>
            </div>

            @if (Url.IsLocalUrl(returnUrl))
            {
                <a class="btn btn-sm btn-secondary cancel" role="button" href="@returnUrl">@T["Cancel"]</a>
            }

            @if (!Model.AdminTemplates)
            {
                <a class="btn btn-sm btn-info" role="button" href="@Url.Action("Index", "Preview", new { area = "OrchardCore.Templates" })" target="_blank">@T["Preview"]</a>
            }
        </div>
    </div>

    <input type="hidden" value="@Model.Name" name="sourceName" />
    <input type="hidden" asp-for="AdminTemplates" />

    <div class="mb-3" asp-validation-class-for="Name">
        <label asp-for="Name" class="form-label">@T["Name"]</label>
        <input asp-for="Name" class="form-control" autofocus />
        <span asp-validation-for="Name"></span>
        <span class="hint">@T["The name of the template."]</span>
    </div>

    <div class="mb-3" asp-validation-class-for="Description">
        <label asp-for="Description" class="form-label">@T["Description"]</label>
        <input asp-for="Description" class="form-control" autofocus />
        <span class="hint">@T["The description of the template."]</span>
    </div>

    <div class="mb-3" asp-validation-class-for="Content">
        <label asp-for="Content" class="form-label">@T["Content"]</label>
        <div id="@Html.IdFor(x => x.Content)_editor" asp-for="Text" style="min-height: 600px;" class="form-control" dir="@culture.GetLanguageDirection()"></div>
        <textarea asp-for="Content" class="content-preview-text" hidden>@Html.Raw(Model.Content)</textarea>
        <span asp-validation-for="Content"></span>
        <span class="hint">@T["The Liquid template."]</span>
    </div>
</form>


<script asp-name="edit-template" at="Foot" depends-on="liquid-intellisense">
    $(document).ready(function () {
        require(['vs/editor/editor.main'], function () {
            var settings = {
                automaticLayout: true,
                language: 'liquid'
            }

            ConfigureLiquidIntellisense(monaco);

            var html = document.documentElement;
            const mutationObserver = new MutationObserver(setTheme);
            mutationObserver.observe(html, { attributes: true });

            function setTheme() {
                var theme = html.dataset.bsTheme;
                if (theme === 'dark' || (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                    monaco.editor.setTheme('vs-dark')
                } else {
                    monaco.editor.setTheme('vs')
                }
            }

            setTheme();

            var editor = monaco.editor.create(document.getElementById('@Html.IdFor(x => x.Content)_editor'), settings);
            var textArea = document.getElementById('@Html.IdFor(x => x.Content)');
            var nameInput = document.getElementById('@Html.IdFor(x => x.Name)');
            var antiforgerytoken = $("[name='__RequestVerificationToken']").val();

            var triggerPreview = null;

            sendFormData = function () {
                var formData = {
                    'Name': nameInput.value,
                    'Content': editor.getValue(),
                    '__RequestVerificationToken': antiforgerytoken
                };
                // store the form data to pass it in the event handler
                localStorage.setItem('OrchardCore.templates', JSON.stringify($.param(formData)));
            }

            const triggerPreviewDelay = 1500;

            editor.getModel().onDidChangeContent((event) => {
                clearTimeout(triggerPreview);
                triggerPreview = setTimeout(sendFormData(), triggerPreviewDelay);
            });

            const shortcodesAction = {
                id: "shortcodes",
                label: "Add Shortcode",
                run: function (editor) {
                    shortcodesApp.init(function (value) {
                        if (value) {
                            var selection = editor.getSelection();
                            var text = value;
                            var op = { range: selection, text: text, forceMoveMarkers: true };
                            editor.executeEdits("shortcodes", [op]);
                        }
                        editor.focus();
                    })
                },
                contextMenuGroupId: 'orchardcore',
                contextMenuOrder: 0,
                keybindings: [
                    monaco.KeyMod.Alt | monaco.KeyCode.KEY_S,
                ]
            }

            editor.addAction(shortcodesAction);
            editor.getModel().setValue(textArea.value);

            window.addEventListener("submit", function () {
                textArea.value = editor.getValue();
            });

            window.addEventListener('storage', function (ev) {
                if (ev.key != 'OrchardCore.templates:ready') return; // ignore other keys
                // triggered by the preview window the first time it is loaded in order
                // to pre-render the view even if no contentpreview:render is already sent
                triggerPreview = setTimeout(sendFormData(), triggerPreviewDelay);
            }, false);

            window.addEventListener('unload', function () {
                this.clearTimeout(triggerPreview);
                localStorage.removeItem('OrchardCore.templates');
                // this will raise an event in the preview window to notify that the live preview is no longer active.
                localStorage.setItem('OrchardCore.templates:not-connected', '');
                localStorage.removeItem('OrchardCore.templates:not-connected');
            });

        });
    });
</script>

<script at="Foot">
    $(function () {

        function initializeTemplatePreview(element) {

            var antiforgerytoken = $("[name='__RequestVerificationToken']").val();

            sendFormData = function (element) {

                var formData = {
                    'Name': element.name,
                    'Content': element.value,
                    '__RequestVerificationToken': antiforgerytoken
                };
                // store the form data to pass it in the event handler
                localStorage.setItem('OrchardCore.templates', JSON.stringify($.param(formData)));
            }

            window.addEventListener('storage', function (ev) {
                if (ev.key != 'OrchardCore.templates:ready') return; // ignore other keys

                // triggered by the preview window the first time it is loaded in order
                // to pre-render the view even if no contentpreview:render is already sent
                sendFormData(element);
            }, false);

            $(element).on('propertychange', function () { if (event.propertyname == "innertext") sendFormData(element); });

            $(window).on('unload', function () {
                localStorage.removeItem('OrchardCore.templates');
                // this will raise an event in the preview window to notify that the live preview is no longer active.
                localStorage.setItem('OrchardCore.templates:not-connected', '');
                localStorage.removeItem('OrchardCore.templates:not-connected');
            });
        }

        initializeTemplatePreview(document.getElementById('@Html.IdFor(x => x.Content)'));
    });
</script>

