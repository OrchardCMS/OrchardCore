"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_orchardcore_root"] = self["webpackChunk_orchardcore_root"] || []).push([["node_modules_graphiql_react_dist_dialog_es_js"],{

/***/ "./node_modules/@graphiql/react/dist/dialog.es.js":
/*!********************************************************!*\
  !*** ./node_modules/@graphiql/react/dist/dialog.es.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ dialog$2),\n/* harmony export */   d: () => (/* binding */ dialog$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codemirror.es.js */ \"./node_modules/@graphiql/react/dist/codemirror.es.js\");\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar dialog$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    function dialogDiv(cm, template, bottom) {\n      var wrap = cm.getWrapperElement();\n      var dialog2;\n      dialog2 = wrap.appendChild(document.createElement(\"div\"));\n      if (bottom)\n        dialog2.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n      else\n        dialog2.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n      if (typeof template == \"string\") {\n        dialog2.innerHTML = template;\n      } else {\n        dialog2.appendChild(template);\n      }\n      CodeMirror.addClass(wrap, \"dialog-opened\");\n      return dialog2;\n    }\n    __name(dialogDiv, \"dialogDiv\");\n    function closeNotification(cm, newVal) {\n      if (cm.state.currentNotificationClose)\n        cm.state.currentNotificationClose();\n      cm.state.currentNotificationClose = newVal;\n    }\n    __name(closeNotification, \"closeNotification\");\n    CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n      if (!options)\n        options = {};\n      closeNotification(this, null);\n      var dialog2 = dialogDiv(this, template, options.bottom);\n      var closed = false, me = this;\n      function close(newVal) {\n        if (typeof newVal == \"string\") {\n          inp.value = newVal;\n        } else {\n          if (closed)\n            return;\n          closed = true;\n          CodeMirror.rmClass(dialog2.parentNode, \"dialog-opened\");\n          dialog2.parentNode.removeChild(dialog2);\n          me.focus();\n          if (options.onClose)\n            options.onClose(dialog2);\n        }\n      }\n      __name(close, \"close\");\n      var inp = dialog2.getElementsByTagName(\"input\")[0], button;\n      if (inp) {\n        inp.focus();\n        if (options.value) {\n          inp.value = options.value;\n          if (options.selectValueOnOpen !== false) {\n            inp.select();\n          }\n        }\n        if (options.onInput)\n          CodeMirror.on(inp, \"input\", function(e) {\n            options.onInput(e, inp.value, close);\n          });\n        if (options.onKeyUp)\n          CodeMirror.on(inp, \"keyup\", function(e) {\n            options.onKeyUp(e, inp.value, close);\n          });\n        CodeMirror.on(inp, \"keydown\", function(e) {\n          if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) {\n            return;\n          }\n          if (e.keyCode == 27 || options.closeOnEnter !== false && e.keyCode == 13) {\n            inp.blur();\n            CodeMirror.e_stop(e);\n            close();\n          }\n          if (e.keyCode == 13)\n            callback(inp.value, e);\n        });\n        if (options.closeOnBlur !== false)\n          CodeMirror.on(dialog2, \"focusout\", function(evt) {\n            if (evt.relatedTarget !== null)\n              close();\n          });\n      } else if (button = dialog2.getElementsByTagName(\"button\")[0]) {\n        CodeMirror.on(button, \"click\", function() {\n          close();\n          me.focus();\n        });\n        if (options.closeOnBlur !== false)\n          CodeMirror.on(button, \"blur\", close);\n        button.focus();\n      }\n      return close;\n    });\n    CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n      closeNotification(this, null);\n      var dialog2 = dialogDiv(this, template, options && options.bottom);\n      var buttons = dialog2.getElementsByTagName(\"button\");\n      var closed = false, me = this, blurring = 1;\n      function close() {\n        if (closed)\n          return;\n        closed = true;\n        CodeMirror.rmClass(dialog2.parentNode, \"dialog-opened\");\n        dialog2.parentNode.removeChild(dialog2);\n        me.focus();\n      }\n      __name(close, \"close\");\n      buttons[0].focus();\n      for (var i = 0; i < buttons.length; ++i) {\n        var b = buttons[i];\n        (function(callback) {\n          CodeMirror.on(b, \"click\", function(e) {\n            CodeMirror.e_preventDefault(e);\n            close();\n            if (callback)\n              callback(me);\n          });\n        })(callbacks[i]);\n        CodeMirror.on(b, \"blur\", function() {\n          --blurring;\n          setTimeout(function() {\n            if (blurring <= 0)\n              close();\n          }, 200);\n        });\n        CodeMirror.on(b, \"focus\", function() {\n          ++blurring;\n        });\n      }\n    });\n    CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n      closeNotification(this, close);\n      var dialog2 = dialogDiv(this, template, options && options.bottom);\n      var closed = false, doneTimer;\n      var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5e3;\n      function close() {\n        if (closed)\n          return;\n        closed = true;\n        clearTimeout(doneTimer);\n        CodeMirror.rmClass(dialog2.parentNode, \"dialog-opened\");\n        dialog2.parentNode.removeChild(dialog2);\n      }\n      __name(close, \"close\");\n      CodeMirror.on(dialog2, \"click\", function(e) {\n        CodeMirror.e_preventDefault(e);\n        close();\n      });\n      if (duration)\n        doneTimer = setTimeout(close, duration);\n      return close;\n    });\n  });\n})();\nvar dialog = dialog$2.exports;\nvar dialog$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": dialog\n}, [dialog$2.exports]));\n\n\n\n//# sourceURL=webpack://@orchardcore/root/./node_modules/@graphiql/react/dist/dialog.es.js?");

/***/ })

}]);