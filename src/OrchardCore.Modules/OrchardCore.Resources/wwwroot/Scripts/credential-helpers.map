{"version":3,"sources":["<anon>"],"sourcesContent":["const randomUUID = (options = {}) => {\n    // Default options.\n    const defaultOptions = {\n        includeHyphens: true\n    };\n    // Extend the default options with the provided options.\n    const config = { ...defaultOptions, ...options };\n    let value;\n    if (typeof crypto === 'object' && typeof crypto.randomUUID === 'function') {\n        value = crypto.randomUUID();\n    } else {\n        value = ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n        );\n    }\n    if (!config.includeHyphens) {\n        return value.replaceAll('-', '');\n    }\n    return value;\n}\nconst togglePasswordVisibility = (passwordCtl, togglePasswordCtl) => {\n    // toggle the type attribute\n    type = passwordCtl.getAttribute('type') === 'password' ? 'text' : 'password';\n    passwordCtl.setAttribute('type', type);\n    // toggle the eye slash icon\n    icon = togglePasswordCtl.getElementsByClassName('icon')[0];\n    if (icon.getAttribute('data-icon')) { // if the icon is rendered as a svg\n        type === 'password' ? icon.setAttribute('data-icon', 'eye') : icon.setAttribute('data-icon', 'eye-slash');\n    }\n    else { // if the icon is still a <i> element\n        type === 'password' ? icon.classList.remove('fa-eye-slash') : icon.classList.remove('fa-eye');\n        type === 'password' ? icon.classList.add('fa-eye') : icon.classList.add('fa-eye-slash');\n    }\n}\nconst copyToClipboard = (str) => {\n    return navigator.clipboard.writeText(str);\n};\nconst generateStrongPassword = (options = {}) => {\n    // Default options.\n    const defaultOptions = {\n        generateBase64: false\n    };\n    // Extend the default options with the provided options.\n    const config = { ...defaultOptions, ...options };\n    // Create a Uint8Array with 32 bytes (256 bits).\n    const array = new Uint8Array(32);\n    crypto.getRandomValues(array);\n    if (config.generateBase64) {\n        // Convert the array to a binary string.\n        let binaryString = '';\n        array.forEach(byte => {\n            binaryString += String.fromCharCode(byte);\n        });\n        // Convert the binary string to a Base64 string.\n        return btoa(binaryString);\n    }\n    // Convert the array to a hexadecimal string.\n    let hexString = '';\n    array.forEach(byte => {\n        hexString += byte.toString(16).padStart(2, '0');\n    });\n    return hexString;\n}\n"],"names":["randomUUID","options","value","config","includeHyphens","crypto","replace","c","getRandomValues","Uint8Array","toString","replaceAll","togglePasswordVisibility","passwordCtl","togglePasswordCtl","type","getAttribute","setAttribute","icon","getElementsByClassName","classList","remove","add","copyToClipboard","str","navigator","clipboard","writeText","generateStrongPassword","generateBase64","array","binaryString","forEach","byte","String","fromCharCode","btoa","hexString","padStart"],"mappings":"AAAA,IAAMA,WAAa,CAACC,EAAU,CAAC,CAAC,QASxBC,EAFJ,IAAMC,EAAS,CAJXC,eAAgB,CAAA,EAIgB,GAAGH,CAAO,AAAC,QAY/C,CARIC,EADA,AAAkB,UAAlB,OAAOG,QAAuB,AAA6B,YAA7B,OAAOA,OAAOL,UAAU,CAC9CK,OAAOL,UAAU,GAGjB,AAAC,uCAAoCM,OAAO,CAAC,SAAUC,GAC3D,AAACA,CAAAA,EAAIF,OAAOG,eAAe,CAAC,IAAIC,WAAW,GAAG,CAAC,EAAE,CAAG,IAAMF,EAAI,CAAA,EAAGG,QAAQ,CAAC,KAI7EP,EAAOC,cAAc,EAInBF,EAHIA,EAAMS,UAAU,CAAC,IAAK,GAIrC,EAEMC,yBAA2B,CAACC,EAAaC,KAE3CC,KAAOF,AAAqC,aAArCA,EAAYG,YAAY,CAAC,QAAyB,OAAS,WAClEH,EAAYI,YAAY,CAAC,OAAQF,MAI7BG,AADJA,CAAAA,KAAOJ,EAAkBK,sBAAsB,CAAC,OAAO,CAAC,EAAE,AAAD,EAChDH,YAAY,CAAC,aAClBD,AAAS,aAATA,KAAsBG,KAAKD,YAAY,CAAC,YAAa,OAASC,KAAKD,YAAY,CAAC,YAAa,cAG7FF,AAAS,aAATA,KAAsBG,KAAKE,SAAS,CAACC,MAAM,CAAC,gBAAkBH,KAAKE,SAAS,CAACC,MAAM,CAAC,UACpFN,AAAS,aAATA,KAAsBG,KAAKE,SAAS,CAACE,GAAG,CAAC,UAAYJ,KAAKE,SAAS,CAACE,GAAG,CAAC,gBAEhF,EAEMC,gBAAkB,AAACC,GACdC,UAAUC,SAAS,CAACC,SAAS,CAACH,GAGnCI,uBAAyB,CAAC3B,EAAU,CAAC,CAAC,IAQxC,IAAME,EAAS,CAJX0B,eAAgB,CAAA,EAIgB,GAAG5B,CAAO,AAAC,EAGzC6B,EAAQ,IAAIrB,WAAW,IAI7B,GAFAJ,OAAOG,eAAe,CAACsB,GAEnB3B,EAAO0B,cAAc,CAAE,CAEvB,IAAIE,EAAe,GAMnB,OALAD,EAAME,OAAO,CAACC,IACVF,GAAgBG,OAAOC,YAAY,CAACF,EACxC,GAGOG,KAAKL,EAChB,CAGA,IAAIM,EAAY,GAKhB,OAJAP,EAAME,OAAO,CAACC,IACVI,GAAaJ,EAAKvB,QAAQ,CAAC,IAAI4B,QAAQ,CAAC,EAAG,IAC/C,GAEOD,CACX"}
