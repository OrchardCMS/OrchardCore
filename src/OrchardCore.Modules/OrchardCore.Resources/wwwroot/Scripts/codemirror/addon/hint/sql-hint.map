{"version":3,"sources":["<anon>"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n        // duplicate identifierQuotes\n        nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n        identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n    return start;\n  }\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[`,;]/g, ''))\n  }\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n    defaultTable = defaultTable || [];\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n    addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n    });\n    addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n    );\n    if (!disableKeywords)\n      addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n  }\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"],"names":["mod","exports","module","require","define","amd","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","QUERY_DIV","ALIAS_KEYWORD","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getText","item","text","wrapTable","name","value","columns","getTable","toUpperCase","shallowClone","object","result","key","hasOwnProperty","match","string","word","len","length","sub","substr","addMatches","search","wordlist","formatter","i","push","displayText","insertIdentifierQuotes","nameParts","split","replace","RegExp","escaped","join","findTableByAlias","alias","editor","doc","fullQuery","getValue","aliasUpperCase","previousWord","table","separator","validRange","start","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","unshift","prevItem","current","getCursor","query","getRange","eachWord","lineText","f","words","wordUpperCase","registerHelper","options","parseTables","input","defaultTableName","disableKeywords","mode","modeOption","resolveMode","cur","token","getTokenAt","ch","slice","charAt","nameCompletion","useIdentifierQuotes","cont","cleanName","line","w","pop","aliasTable","oldTable","tableInsert","objectOrClass","className","list","from","to"],"mappings":"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"}
