{"version":3,"sources":["<anon>"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n  // Tokenizer\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n  // Parser\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n  // Combinator utils\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n  // Combinators\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n    expressionAllowed: expressionAllowed,\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n});\n"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","readRegexp","inSet","current","tokenQuasi","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","brackets","atomicTypes","JSLexical","indented","column","align","prev","info","parseJS","cc","cx","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","inScope","varname","v","localVars","name","context","vars","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"mappings":"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"}
