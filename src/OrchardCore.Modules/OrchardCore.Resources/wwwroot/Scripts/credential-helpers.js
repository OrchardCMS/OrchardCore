/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var randomUUID = function randomUUID() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Default options.
  var defaultOptions = {
    includeHyphens: true
  };

  // Extend the default options with the provided options.
  var config = _objectSpread(_objectSpread({}, defaultOptions), options);
  var value;
  if ((typeof crypto === "undefined" ? "undefined" : _typeof(crypto)) === 'object' && typeof crypto.randomUUID === 'function') {
    value = crypto.randomUUID();
  } else {
    value = ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
      return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
    });
  }
  if (!config.includeHyphens) {
    return value.replaceAll('-', '');
  }
  return value;
};
var togglePasswordVisibility = function togglePasswordVisibility(passwordCtl, togglePasswordCtl) {
  // toggle the type attribute
  type = passwordCtl.getAttribute('type') === 'password' ? 'text' : 'password';
  passwordCtl.setAttribute('type', type);

  // toggle the eye slash icon
  icon = togglePasswordCtl.getElementsByClassName('icon')[0];
  if (icon.getAttribute('data-icon')) {
    // if the icon is rendered as a svg
    type === 'password' ? icon.setAttribute('data-icon', 'eye') : icon.setAttribute('data-icon', 'eye-slash');
  } else {
    // if the icon is still a <i> element
    type === 'password' ? icon.classList.remove('fa-eye-slash') : icon.classList.remove('fa-eye');
    type === 'password' ? icon.classList.add('fa-eye') : icon.classList.add('fa-eye-slash');
  }
};
var copyToClipboard = function copyToClipboard(str) {
  return navigator.clipboard.writeText(str);
};
var generateStrongPassword = function generateStrongPassword() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Default options.
  var defaultOptions = {
    generateBase64: false
  };

  // Extend the default options with the provided options.
  var config = _objectSpread(_objectSpread({}, defaultOptions), options);

  // Create a Uint8Array with 32 bytes (256 bits).
  var array = new Uint8Array(32);
  crypto.getRandomValues(array);
  if (config.generateBase64) {
    // Convert the array to a binary string.
    var binaryString = '';
    array.forEach(function (_byte) {
      binaryString += String.fromCharCode(_byte);
    });

    // Convert the binary string to a Base64 string.
    return btoa(binaryString);
  }

  // Convert the array to a hexadecimal string.
  var hexString = '';
  array.forEach(function (_byte2) {
    hexString += _byte2.toString(16).padStart(2, '0');
  });
  return hexString;
};