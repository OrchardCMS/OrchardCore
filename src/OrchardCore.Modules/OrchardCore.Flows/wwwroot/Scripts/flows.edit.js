/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
//variables used in FlowPart.Edit sortable
var widgetDragItem, lastContainer, widgetItemSourceId, widgetItemDestId;
$(function () {
  $(document).on('click', '.add-widget', function (event) {
    var type = $(this).data("widget-type");
    var targetId = $(this).data("target-id");
    var htmlFieldPrefix = $(this).data("html-field-prefix");
    var createEditorUrl = $('#' + targetId).data("buildeditorurl");
    var prefixesName = $(this).data("prefixes-name");
    var flowmetadata = $(this).data("flowmetadata");
    var parentContentType = $(this).data("parent-content-type");
    var partName = $(this).data("part-name");

    // Retrieve all index values knowing that some elements may have been moved / removed.
    var indexes = $('#' + targetId).closest("form").find("input[name*='Prefixes']").filter(function (i, e) {
      return $(e).val().substring(0, $(e).val().lastIndexOf('-')) === htmlFieldPrefix;
    }).map(function (i, e) {
      return parseInt($(e).val().substring($(e).val().lastIndexOf('-') + 1)) || 0;
    });

    // Use a prefix based on the items count (not a guid) so that the browser autofill still works.
    var index = indexes.length ? Math.max.apply(Math, _toConsumableArray(indexes)) + 1 : 0;
    var prefix = htmlFieldPrefix + '-' + index.toString();
    var contentTypesName = $(this).data("contenttypes-name");
    var contentItemsName = $(this).data("contentitems-name");
    $.ajax({
      url: createEditorUrl + "?id=" + type + "&prefix=" + prefix + "&prefixesName=" + prefixesName + "&contentTypesName=" + contentTypesName + "&contentItemsName=" + contentItemsName + "&targetId=" + targetId + "&flowmetadata=" + flowmetadata + "&parentContentType=" + parentContentType + "&partName=" + partName
    }).done(function (data) {
      var result = JSON.parse(data);
      $(document.getElementById(targetId)).append(result.Content);
      var dom = $(result.Scripts);
      dom.filter('script').each(function () {
        $.globalEval(this.text || this.textContent || this.innerHTML || '');
      });
    });
  });
  $(document).on('click', '.insert-widget', function (event) {
    var type = $(this).data("widget-type");
    var target = $(this).closest('.widget-template');
    var targetId = $(this).data("target-id");
    var htmlFieldPrefix = $(this).data("html-field-prefix");
    var createEditorUrl = $('#' + targetId).data("buildeditorurl");
    var flowmetadata = $(this).data("flowmetadata");
    var prefixesName = $(this).data("prefixes-name");
    var parentContentType = $(this).data("parent-content-type");
    var partName = $(this).data("part-name");

    // Retrieve all index values knowing that some elements may have been moved / removed.
    var indexes = $('#' + targetId).closest("form").find("input[name*='Prefixes']").filter(function (i, e) {
      return $(e).val().substring(0, $(e).val().lastIndexOf('-')) === htmlFieldPrefix;
    }).map(function (i, e) {
      return parseInt($(e).val().substring($(e).val().lastIndexOf('-') + 1)) || 0;
    });

    // Use a prefix based on the items count (not a guid) so that the browser autofill still works.
    var index = indexes.length ? Math.max.apply(Math, _toConsumableArray(indexes)) + 1 : 0;
    var prefix = htmlFieldPrefix + '-' + index.toString();
    var contentTypesName = $(this).data("contenttypes-name");
    var contentItemsName = $(this).data("contentitems-name");
    $.ajax({
      url: createEditorUrl + "?id=" + type + "&prefix=" + prefix + "&prefixesName=" + prefixesName + "&contentTypesName=" + contentTypesName + "&contentItemsName=" + contentItemsName + "&targetId=" + targetId + "&flowmetadata=" + flowmetadata + "&parentContentType=" + parentContentType + "&partName=" + partName
    }).done(function (data) {
      var result = JSON.parse(data);
      $(result.Content).insertBefore(target);
      var dom = $(result.Scripts);
      dom.filter('script').each(function () {
        $.globalEval(this.text || this.textContent || this.innerHTML || '');
      });
    });
  });
  $(document).on('click', '.widget-delete', function () {
    var $this = $(this);
    confirmDialog(_objectSpread(_objectSpread({}, $this.data()), {}, {
      callback: function callback(r) {
        if (r) {
          $this.closest('.widget-template').remove();
          $(document).trigger('contentpreview:render');
        }
      }
    }));
  });
  $(document).on('change', '.widget-editor-footer label, .widget-editor-header label', function () {
    var $tmpl = $(this).closest('.widget-template');
    var $radio = $(this).find("input:first-child");
    if ($radio[0].id !== 'undefined' && $radio[0].id.indexOf('Size') > 0) {
      var $radioSize = $(this).find("input:first-child").val();
      var classList = $tmpl.attr('class').split(' ');
      $.each(classList, function (id, item) {
        if (item.indexOf('col-md-') === 0) $tmpl.removeClass(item);
      });
      var colSize = Math.round($radioSize / 100 * 12);
      $tmpl.addClass('col-md-' + colSize);
      var dropdown = $(this).closest('.dropdown-menu');
      dropdown.prev('button').text($radioSize + '%');
    } else if ($radio[0].id !== 'undefined' && $radio[0].id.indexOf('Alignment') > 0) {
      var svg = $(this).find('svg')[0].outerHTML;
      var alignDropdown = $(this).closest('.dropdown-menu');
      var $btn = alignDropdown.prev('button');
      $btn.html(svg);
    }
    $(this).parent().find('.dropdown-item').removeClass('active');
    $(this).toggleClass('active');
    $(document).trigger('contentpreview:render');
  });
  $(document).on('click', '.widget-editor-btn-toggle', function () {
    $(this).closest('.widget-editor').toggleClass('collapsed');
  });
  $(document).on('keyup', '.widget-editor-body .form-group input.content-caption-text', function () {
    var headerTextLabel = $(this).closest('.widget-editor').find('.widget-editor-header:first .widget-editor-header-text');
    var contentTypeDisplayText = headerTextLabel.data('content-type-display-text');
    var title = $(this).val();
    var newDisplayText = title + ' ' + contentTypeDisplayText;
    headerTextLabel.text(newDisplayText);
  });
});