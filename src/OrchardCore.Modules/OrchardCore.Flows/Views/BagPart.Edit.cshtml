@using OrchardCore.Flows.Models
@using OrchardCore.Flows.ViewModels
@using OrchardCore.Mvc.Utilities
@model BagPartEditViewModel
@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager
@{
    var widgetTemplatePlaceholderId = Html.Id("widgetTemplatePlaceholder");
    var htmlFieldPrefix = ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix;
    var parentContentType = Model.BagPart.ContentItem.ContentType;
    string partName = ((dynamic)Model).Metadata.Name;
    var totalItems = Model.ContainedContentTypeDefinitions.Count();
}
<script asp-name="jQuery-ui" at="Foot"></script>

<div>
    <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder widget-template-placeholder-bagpart bagpart-@partName.HtmlClassify() row mx-0" data-buildeditorurl="@Url.Action("BuildEditor", "Admin", new { area = "OrchardCore.Flows" })">
        @{
            var index = 0;
            foreach (var widget in Model.AccessibleWidgets)
            {
                //Create a Card Shape
                dynamic contentCard = await New.ContentCard(
                // FOR Updater
                CollectionShape: Model,
                //Shape Specific
                CollectionShapeType: nameof(BagPart),
                ContentItem: widget.ContentItem,
                BuildEditor: widget.Editable,
                ParentContentType: parentContentType,
                CollectionPartName: partName,
                //Card Specific Properties
                TargetId: widgetTemplatePlaceholderId,
                Inline: false,
                CanMove: widget.Editable,
                CanDelete: widget.Deletable,
                //Input hidden
                //Prefixes
                HtmlFieldPrefix: htmlFieldPrefix,
                PrefixValue: htmlFieldPrefix + '-' + (index++).ToString(),
                PrefixesId: Html.IdFor(x => x.Prefixes),
                PrefixesName: Html.NameFor(x => x.Prefixes),
                //Content Types
                ContentTypesId: Html.IdFor(x => x.ContentTypes),
                ContentTypesName: Html.NameFor(x => x.ContentTypes),
                //Content Items
                ContentItemsId: Html.IdFor(x => x.ContentItems),
                ContentItemsName: Html.NameFor(x => x.ContentItems)
                );
                @await DisplayAsync(contentCard)
            }
        }
    </div>

    @if (totalItems == 1)
    {
        var type = Model.ContainedContentTypeDefinitions.First();

        <a class="btn btn-primary add-widget btn-sm"
       data-target-id="@widgetTemplatePlaceholderId"
       data-html-field-prefix="@htmlFieldPrefix"
       data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
       data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
       data-contentitems-name="@Html.NameFor(x => x.ContentItems)"
       data-widget-type="@type.Name"
       data-flowmetadata="false"
       data-parent-content-type="@parentContentType"
       data-part-name="@partName"
       href="javascript:;">@T["Add {0}", type.DisplayName]</a>
    }
    else if (totalItems > 1)
    {
        <div class="btn-group btn-bag-add">
            <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @T["Add Item"]
            </button>
            <div class="dropdown-menu">
                @foreach (var type in Model.ContainedContentTypeDefinitions)
                {
                    <a class="dropdown-item add-widget btn-sm"
               data-target-id="@widgetTemplatePlaceholderId"
               data-html-field-prefix="@htmlFieldPrefix"
               data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
               data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
               data-contentitems-name="@Html.NameFor(x => x.ContentItems)"
               data-widget-type="@type.Name"
               data-flowmetadata="false"
               data-parent-content-type="@parentContentType"
               data-part-name="@partName"
               href="javascript:;">@type.DisplayName</a>
                }
            </div>
        </div>
    }

    @* Rendered only once in case multiple BagPart (or FlowPart) are on the page *@
    @if (Context.Items["BagPart.Edit"] == null)
    {
        Context.Items["BagPart.Edit"] = new object();
        <script asp-name="flowpart-edit" at="Foot"></script>
        <style asp-name="flowpart-edit" at="Head"></style>
    }

    @* Rendered only once per type to initialize the scripts its editor will need *@
    @foreach (var type in Model.ContainedContentTypeDefinitions)
    {
        @if (Context.Items["BagPart.Edit:" + type.Name] == null)
        {
            Context.Items["BagPart.Edit:" + type.Name] = new object();

            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, true, "", Guid.NewGuid().ToString("n")));
        }
    }

    <script at="Foot">
        @* Only apply sortable if element is present in dom, do not call sortable on scripts for mock widgets *@
        if ($('#@widgetTemplatePlaceholderId').length == 1) {
            $("#@widgetTemplatePlaceholderId").sortable({
                handle: ".widget-editor-handle",
                cursor: "move",
                opacity: 0.7,
                tolerance: "pointer",
                scrollSensitivity: 150,
                scrollSpeed: 100,
                animation: 150,
                placeholder: {
                    element: function (currentItem) {
                        return $('<div class="widget-dragdrop-placeholder"><div></div></div>')[0];
                    },
                    update: function (container, p) {
                        return;
                    }
                },
                toleranceElement: '> div',
                start: function (event, ui) {
                    widgetDragItem = ui.item;
                    lastContainer = ui.item.parent();
                    lastContainer.toggleClass('widget-dropzone-hint');
                    widgetDragItem.find('.card').first().toggleClass('border-primary');
                    var classList = widgetDragItem.attr('class').split(' ');
                    $.each(classList, function (id, item) {
                        if (item.indexOf('col-md-') === 0) ui.placeholder.addClass(item);
                    });
                },
                stop: function (event, ui) {
                    lastContainer.toggleClass('widget-dropzone-hint');
                    widgetDragItem.find('.card').first().toggleClass('border-primary');
                    //clear the global variables
                    widgetDragItem = null;
                    lastContainer = null;
                    widgetItemSourceId = null;
                    widgetItemDestId = null;
                    $(document).trigger('contentpreview:render');
                },
                over: function (event, ui) {
                    var $self = $(this);
                    if (lastContainer[0] != this) {
                        lastContainer.toggleClass('widget-dropzone-hint');
                        lastContainer = $self;
                        $self.toggleClass('widget-dropzone-hint');
                    }
                }
            });
        }
    </script>
</div>
