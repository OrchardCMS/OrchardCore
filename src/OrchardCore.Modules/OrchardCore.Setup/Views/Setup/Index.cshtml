@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Html
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Primitives
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer T
@inject Microsoft.Extensions.Options.IOptions<IdentityOptions> IdentityOptions
@inject IOptions<RequestLocalizationOptions> LocOptions
@inject OrchardCore.IOrchardHelper Orchard
@inject OrchardCore.Modules.IClock Clock
@model OrchardCore.Setup.ViewModels.SetupViewModel

@{
    // The Setup Layout is a standard MVC layout do that it doesn't use Shapes.
    Layout = "../_Layout.cshtml";
    var localTimeZone = Clock.GetSystemTimeZone();
    var defaultRecipe = Model.Recipes.FirstOrDefault(x => x.Name == Model.RecipeName) ?? Model.Recipes.FirstOrDefault();
    var options = IdentityOptions.Value;
    var passwordOptions = new HtmlContentBuilder();
    IHtmlContent separator = HtmlString.Empty;
    string passwordRegex = "";

    if (options.Password.RequireNonAlphanumeric)
    {
        passwordOptions.AppendHtml(separator).AppendHtml(T["one non-alphanumeric"]);
        separator = new HtmlString(", ");
        passwordRegex += @"(?=.*[^A-Za-z0-9])";
    }

    if (options.Password.RequireUppercase)
    {
        passwordOptions.AppendHtml(separator).AppendHtml(T["one uppercase"]);
        separator = new HtmlString(", ");
        passwordRegex += @"(?=.*[A-Z])";
    }

    if (options.Password.RequireLowercase)
    {
        passwordOptions.AppendHtml(separator).AppendHtml(T["one lowercase"]);
        separator = T[", "];
        passwordRegex += @"(?=.*[a-z])";
    }

    if (options.Password.RequireDigit)
    {
        passwordOptions.AppendHtml(separator).AppendHtml(T["one digit"]);
        separator = new HtmlString(", ");
        passwordRegex += @"(?=.*[0-9])";
    }

    if (separator != HtmlString.Empty)
    {
        separator = T[" and "];
    }

    passwordOptions.AppendHtml(separator).AppendHtml(T["{0} characters in total", options.Password.RequiredLength]);
    passwordRegex += $".{{{options.Password.RequiredLength},}}";

    if (options.Password.RequiredUniqueChars > 1)
    {
        passwordOptions.AppendHtml(T[", with {0} unique characters", options.Password.RequiredUniqueChars]);
    }

    var passwordTooltip = T["Password must have at least {0}.", passwordOptions];
}
<form asp-action="Index">

    <div class="bg-light p-2">
        @if (LocOptions.Value.SupportedUICultures.Count() > 1)
        {
            var query = new Dictionary<string, StringValues>(Context.Request.Query);
            query.Remove("ui-culture");
            var queryString = QueryString.Create(query);

            <div class="row float-end">
                <div class="col">
                    <label for="culturesList" class="form-label mt-2">@T["Change language"]</label>
                </div>
                <div class="col">
                    <select id="culturesList" class="form-select" onchange="setLocalizationUrl()">
                        @foreach (var culture in LocOptions.Value.SupportedUICultures.OrderBy(x => x.NativeName))
                        {
                            var uriString = UriHelper.BuildRelative(Context.Request.PathBase, Context.Request.Path, queryString.Add("ui-culture", culture.Name));

                            <option value="@culture" data-url="@uriString" selected="@(culture.Name == Orchard.CultureName())">@(culture.NativeName ?? culture.Name)</option>
                        }
                    </select>
                </div>
            </div>
        }
        <h1>@T["Setup"]</h1>
        <p class="lead">@T["Please answer a few questions to configure your site."]</p>
    </div>

    <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

    @if (defaultRecipe == null)
    {
        <div class="alert alert-danger" role="alert">
            <strong>@T["No recipes available."]</strong> @T["It is not possible to set up a site without a recipe."]
        </div>
    }

    <div class="row mt-2">
        <div class="mb-3 col-md-4" asp-validation-class-for="SiteName">
            <div>
                <label asp-for="SiteName" class="form-label">@T["What is the name of your site?"]</label>
                <input asp-for="SiteName" class="form-control" autofocus required />
                <span asp-validation-for="SiteName" class="text-danger"></span>
                <span class="text-muted form-text small">@T["This is used as the default title of your pages."]</span>
            </div>
        </div>
        @if (!Model.RecipeNamePreset)
        {
            <div class="mb-3 col-md-4">
                <input type="hidden" asp-for="RecipeName" required />
                <nav>
                    <div asp-validation-class-for="RecipeName">
                        <label asp-for="RecipeName" class="form-label">@T["Recipe"]</label>
                        @if (defaultRecipe == null)
                        {
                            <div id="noRecipes" class="dropdown disabled">
                                <button id="noRecipeButton" title="@T["No Recipes Available"]" class="btn btn-secondary dropdown-toggle disabled" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @T["No Recipes Available"]
                                </button>
                            </div>
                        }
                        else
                        {
                            <div id="recipes" class="dropdown">
                                <button id="recipeButton" title="@defaultRecipe.Description" class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @defaultRecipe.DisplayName
                                </button>
                                <div class="dropdown-menu">
                                    @foreach (var recipe in Model.Recipes.OrderBy(x => x.Name))
                                    {
                                        <a href="#" data-recipe-name="@recipe.Name" data-recipe-description="@recipe.Description" data-recipe-display-name="@recipe.DisplayName" class="dropdown-item">@recipe.DisplayName <span class="text-muted form-text small">@recipe.Description</span></a>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </nav>
                <span class="text-muted form-text small">@T["Recipes allow you to setup your site with additional pre-configured options, features and settings out of the box."]</span>
            </div>
        }
        <div class="mb-3 col-md-4" asp-validation-class-for="SiteTimeZone">
            <label asp-for="SiteTimeZone" class="form-label">@T["Default Time Zone"]</label>
            <select asp-for="SiteTimeZone" class="form-select">
                @foreach (var timeZone in Clock.GetTimeZones())
                {
                    <option value="@timeZone.TimeZoneId" selected="@(timeZone.TimeZoneId == localTimeZone.TimeZoneId)">
                        @timeZone
                    </option>
                }
            </select>
            <span asp-validation-for="SiteTimeZone"></span>
            <span class="text-muted form-text small">@T["Determines the default time zone used when displaying and editing dates and times."]</span>
        </div>
    </div>
    @if (!Model.DatabaseConfigurationPreset)
    {
        <div class="row">
            <div class="mb-3 col-md-6">
                <label asp-for="DatabaseProvider" class="form-label">@T["What type of database to use?"]</label>
                <select asp-for="DatabaseProvider" class="form-select" required>
                    @foreach (var provider in Model.DatabaseProviders)
                    {
                        <option value="@provider.Value" data-connection-string="@provider.HasConnectionString" data-table-prefix="@provider.HasTablePrefix" data-connection-string-sample="@T["The connection string to your database instance, e.g. {0}.", provider.SampleConnectionString]">@provider.Name</option>
                    }
                </select>
                <span asp-validation-for="DatabaseProvider" class="text-danger"></span>
                <span class="text-muted form-text small">@T["The database is used to store the site's configuration and its contents."]</span>
            </div>

            <div class="mb-3 col-md-6 tablePrefix" asp-validation-class-for="TablePrefix">
                <label asp-for="TablePrefix" class="form-label">@T["Table Prefix"]</label>
                <input asp-for="TablePrefix" class="form-control" />
                <span asp-validation-for="TablePrefix" class="text-danger"></span>
                <span class="text-muted form-text small">@T["You can specify a table prefix if you intend to reuse the same database for multiple sites."]</span>
            </div>
        </div>

        <div class="row connectionString" asp-validation-class-for="ConnectionString">
            <div class="mb-3 col-md-12">
                <label asp-for="ConnectionString" class="form-label">@T["Connection string"]</label>
                <div class="input-group mb-2 mb-sm-0">
                    <input asp-for="ConnectionString" class="form-control pwd" type="password" required />
                    <button type="button" id="toggleConnectionString" class="btn btn-secondary" tabindex="-1" aria-hidden="true" title="@T["Show/hide connection string"]"><i class="icon fa fa-eye"></i></button>
                </div>
                <span asp-validation-for="ConnectionString" class="text-danger"></span>
                <span id="connectionStringHint" class="text-muted form-text small"></span>
            </div>
        </div>

        <div class="row row-cols-1 row-cols-md-2">
            <div class="mb-3 col tablePrefix">
                <label asp-for="Schema" class="form-label">@T["Table Schema"]</label>
                <input asp-for="Schema" class="form-control" />
                <span asp-validation-for="Schema" class="text-danger"></span>
                <div class="text-muted form-text small">@T["When left blank, the default value on the server will be used."] @T["For example, '{0}' for SQL Server.", "dbo"]</div>
            </div>
        </div>
    }
    <fieldset>
        <legend>@T["Super User"]</legend>
        <span class="text-muted form-text small">@T["The super user has all the rights. It should be used only during Setup and for disaster recovery."]</span>
        <div class="row">
            <div class="mb-3 col-md-6" asp-validation-class-for="UserName">
                <label asp-for="UserName" class="form-label">@T["User name"]</label>
                <input asp-for="UserName" class="form-control" required />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="mb-3 col-md-6" asp-validation-class-for="Email">
                <label asp-for="Email" class="form-label">@T["Email"]</label>
                <input asp-for="Email" class="form-control" type="email" required />
                <span asp-validation-for="Email" class="text-danger">@T["The email is invalid."]</span>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col-md-6" asp-validation-class-for="Password">
                <label asp-for="Password" class="form-label">@T["Password"]</label>
                <div class="input-group">
                    <input asp-for="Password" class="form-control" autocomplete="new-password" data-bs-toggle="popover" data-bs-placement="top" data-trigger="focus" data-title="@T["Password strength"]" data-bs-content="@passwordTooltip" required pattern="@passwordRegex" />
                    <button tabindex="-1" class="btn btn-secondary" type="button" id="togglePassword"><i class="icon fa fa-eye"></i></button>
                </div>
                <div id="passwordStrength"></div>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            <div class="mb-3 col-md-6" asp-validation-class-for="PasswordConfirmation">
                <label asp-for="PasswordConfirmation" class="form-label">@T["Password Confirmation"]</label>
                <div class="input-group">
                    <input asp-for="PasswordConfirmation" class="form-control" autocomplete="new-password" title="@passwordTooltip" required pattern="@passwordRegex" />
                    <button tabindex="-1" class="btn btn-secondary" type="button" id="togglePasswordConfirmation"><i class="icon fa fa-eye"></i></button>
                </div>
                <span asp-validation-for="PasswordConfirmation" class="text-danger"></span>
            </div>
        </div>
    </fieldset>
    <div class="row">
        <div class="mb-3 col-md-4">
            <input type="hidden" asp-for="Secret" value="@Model.Secret" />
            <button class="btn btn-primary" type="submit" id="SubmitButton">@T["Finish Setup"]</button>
        </div>
    </div>
</form>
<script src="~/OrchardCore.Setup/Scripts/setup.min.js"></script>
<script>
    $(function () {
        $('#Password').strength({
            minLength: @(options.Password.RequiredLength),
            upperCase: @(options.Password.RequireUppercase ? "true" : "false"),
            lowerCase: @(options.Password.RequireLowercase ? "true" : "false"),
            numbers: @(options.Password.RequireDigit ? "true" : "false"),
            specialchars: @(options.Password.RequireNonAlphanumeric ? "true" : "false"),
            target: '#passwordStrength',
            style: "margin-top: 7px; height: 7px; border-radius: 5px"
        });

        $('#Password').popover({
            trigger: 'focus'
        });

        toggleConnectionString = document.querySelector('#toggleConnectionString');
        if (toggleConnectionString) {
            toggleConnectionString.addEventListener('click', function (e) {
                togglePasswordVisibility(document.querySelector('#ConnectionString'), document.querySelector('#toggleConnectionString'))
            });
        }

        togglePassword = document.querySelector('#togglePassword');
        togglePassword.addEventListener('click', function (e) {
            togglePasswordVisibility(document.querySelector('#Password'), document.querySelector('#togglePassword'))
        });

        togglePasswordConfirmation = document.querySelector('#togglePasswordConfirmation');
        togglePasswordConfirmation.addEventListener('click', function (e) {
            togglePasswordVisibility(document.querySelector('#PasswordConfirmation'), document.querySelector('#togglePasswordConfirmation'))
        });
    })
</script>
