{"mappings":"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","sources":["src/OrchardCore.Modules/OrchardCore.Setup/Assets/ts/setup.ts",".scripts/bloom/components/password-strength.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import strenght from \"@orchardcore/bloom/components/password-strength\";\n// Show or hide the connection string or table prefix section when the database provider is selected\nconst toggleConnectionStringAndPrefix = () => {\n    const selectedOption = document.querySelector(\n        \"#DatabaseProvider option:checked\"\n    );\n    if (selectedOption) {\n        const connectionString =\n            selectedOption\n                .getAttribute(\"data-connection-string\")\n                ?.toLowerCase() === \"true\";\n        const tablePrefix =\n            selectedOption.getAttribute(\"data-table-prefix\")?.toLowerCase() ===\n            \"true\";\n        const connectionStringElements =\n            document.querySelectorAll<HTMLDivElement>(\".connectionString\");\n        connectionStringElements.forEach(\n            (el) => (el.style.display = connectionString ? \"block\" : \"none\")\n        );\n        const tablePrefixElements =\n            document.querySelectorAll<HTMLDivElement>(\".tablePrefix\");\n        tablePrefixElements.forEach(\n            (el) => (el.style.display = tablePrefix ? \"block\" : \"none\")\n        );\n        document.querySelectorAll(\".pwd\").forEach((el) => {\n            if (connectionString) {\n                el.setAttribute(\"required\", \"required\");\n            } else {\n                el.removeAttribute(\"required\");\n            }\n        });\n        const connectionStringHint = document.getElementById(\n            \"connectionStringHint\"\n        );\n        if (connectionStringHint) {\n            connectionStringHint.textContent =\n                selectedOption.getAttribute(\"data-connection-string-sample\") ||\n                \"\";\n        }\n    }\n};\nconst refreshDescription = (target: Element) => {\n    const recipeName = target.getAttribute(\"data-recipe-name\");\n    const recipeDisplayName = target.getAttribute(\"data-recipe-display-name\");\n    const recipeDescription = target.getAttribute(\"data-recipe-description\");\n    const recipeButton = document.getElementById(\"recipeButton\");\n    const recipeNameInput = document.getElementById(\n        \"RecipeName\"\n    ) as HTMLInputElement;\n    if (recipeButton && recipeNameInput) {\n        recipeButton.textContent = recipeDisplayName || \"\";\n        recipeNameInput.value = recipeName || \"\";\n        recipeButton.setAttribute(\"title\", recipeDescription || \"\");\n        recipeButton.focus();\n    }\n};\nconst setLocalizationUrl = () => {\n    const culturesList = document.getElementById(\n        \"culturesList\"\n    ) as HTMLSelectElement;\n    culturesList.addEventListener(\"change\", () => {\n        const selectedOption = culturesList.options[culturesList.selectedIndex];\n        if (selectedOption) {\n            window.location.href = selectedOption.dataset.url || \"\";\n        }\n    });\n};\nconst togglePasswordVisibility = (\n    passwordCtl: HTMLInputElement | null,\n    togglePasswordCtl: HTMLElement | null\n) => {\n    if (!passwordCtl || !togglePasswordCtl) {\n        return;\n    }\n    // toggle the type attribute\n    const type =\n        passwordCtl.getAttribute(\"type\") === \"password\" ? \"text\" : \"password\";\n    passwordCtl.setAttribute(\"type\", type);\n    // toggle the eye slash icon\n    const icon = togglePasswordCtl.getElementsByClassName(\"icon\")[0];\n    if (icon) {\n        if (icon.getAttribute(\"data-icon\")) {\n            // if the icon is rendered as a svg\n            icon.setAttribute(\n                \"data-icon\",\n                type === \"password\" ? \"eye\" : \"eye-slash\"\n            );\n        } else {\n            // if the icon is still a <i> element\n            icon.classList.toggle(\"fa-eye\", type === \"password\");\n            icon.classList.toggle(\"fa-eye-slash\", type !== \"password\");\n        }\n    }\n};\nconst init = () => {\n    toggleConnectionStringAndPrefix();\n    // Show hide the connection string when a provider is selected\n    document\n        .getElementById(\"DatabaseProvider\")\n        ?.addEventListener(\"change\", function () {\n            toggleConnectionStringAndPrefix();\n        });\n    // Refresh the recipe description\n    document.querySelectorAll(\"#recipes div a\").forEach(function (element) {\n        element.addEventListener(\"click\", function () {\n            refreshDescription(this);\n        });\n    });\n    const passwordElement = <HTMLInputElement>(\n        document.getElementById(\"Password\")\n    );\n    const options = JSON.parse(passwordElement?.dataset.strength ?? \"\") ?? {\n        requiredLength: 6,\n        requiredUniqueChars: 1,\n        requireNonAlphanumeric: true,\n        requireLowercase: true,\n        requireUppercase: true,\n        requireDigit: true,\n    };\n    if (passwordElement) {\n        strenght(passwordElement, options);\n    }\n    if (passwordElement) {\n        passwordElement.addEventListener(\"focus\", function () {\n            const popover = document.createElement(\"div\");\n            popover.className = \"popover bs-popover-top\";\n            popover.role = \"tooltip\";\n            popover.innerHTML = `<div class=\"popover-arrow\" style=\"position: absolute; left: 0px; transform: translate(119px, 0px);\"></div><div class=\"popover-header\">Password requirements: </div><div class=\"popover-body\"><ul><li>Minimum length: ${\n                options.requiredLength\n            }</li><li>Unique Chars: ${\n                options.requiredUniqueChars\n            }</li><li>Uppercase: ${\n                options.requireUppercase ? \"required\" : \"not required\"\n            }</li><li>Lowercase: ${\n                options.requireLowercase ? \"required\" : \"not required\"\n            }</li><li>Digit: ${\n                options.requireDigit ? \"required\" : \"not required\"\n            }</li><li>Non alphanumeric: ${\n                options.requireNonAlphanumeric ? \"required\" : \"not required\"\n            }</li></ul></div>`;\n            const rect = passwordElement.getBoundingClientRect();\n            popover.style.position = \"absolute\";\n            popover.style.top = `${rect.top - 228}px`;\n            popover.style.left = `${rect.left}px`;\n            document.body.appendChild(popover);\n            function removePopover() {\n                popover.remove();\n                passwordElement?.removeEventListener(\"blur\", removePopover);\n            }\n            passwordElement.addEventListener(\"blur\", removePopover);\n        });\n    }\n    const toggleConnectionString = document.querySelector(\n        \"#toggleConnectionString\"\n    );\n    if (toggleConnectionString) {\n        toggleConnectionString.addEventListener(\"click\", function (e) {\n            togglePasswordVisibility(\n                document.querySelector(\"#ConnectionString\"),\n                document.querySelector(\"#toggleConnectionString\")\n            );\n        });\n    }\n    const togglePassword = document.querySelector(\"#togglePassword\");\n    togglePassword?.addEventListener(\"click\", function (e) {\n        togglePasswordVisibility(\n            document.querySelector(\"#Password\"),\n            document.querySelector(\"#togglePassword\")\n        );\n    });\n    const togglePasswordConfirmation = document.querySelector(\n        \"#togglePasswordConfirmation\"\n    );\n    togglePasswordConfirmation?.addEventListener(\"click\", function (e) {\n        togglePasswordVisibility(\n            document.querySelector(\"#PasswordConfirmation\"),\n            document.querySelector(\"#togglePasswordConfirmation\")\n        );\n    });\n    setLocalizationUrl();\n};\ninit();","interface PasswordStrengthOptions {\n    requiredLength?: number;\n    requireUppercase?: boolean;\n    requireLowercase?: boolean;\n    requireDigit?: boolean;\n    requireNonAlphanumeric?: boolean;\n    target?: string;\n    style?: string;\n}\n/**\n * This function initializes a password strength checker on a given input element.\n * It evaluates the password based on specified requirements such as minimum length,\n * presence of uppercase, lowercase, digits, and special characters.\n * A visual progress bar is displayed to indicate the strength level of the password.\n *\n * @param {HTMLElement} element - The input element to which the strength checker is applied.\n * @param {Object} options - Configuration options for password requirements and display settings.\n * @param {number} options.requiredLength - Minimum required length of the password.\n * @param {boolean} options.requireUppercase - Whether an uppercase letter is required.\n * @param {boolean} options.requireLowercase - Whether a lowercase letter is required.\n * @param {boolean} options.requireDigit - Whether a digit is required.\n * @param {boolean} options.requireNonAlphanumeric - Whether a special character is required.\n * @param {string} options.target - CSS selector for the element where the strength progress bar is displayed.\n * @param {string} options.style - CSS style string for the progress bar.\n */\nexport default (element: HTMLInputElement, options: PasswordStrengthOptions) => {\n    const settings = Object.assign(\n        {\n            requiredLength: 8,\n            requireUppercase: false,\n            requireLowercase: false,\n            requireDigit: false,\n            requireNonAlphanumeric: false,\n            target: \"#passwordStrength\",\n            style: \"margin-top: 7px; height: 7px; border-radius: 5px\",\n        },\n        options,\n    );\n    let capitalletters = 0;\n    let lowerletters = 0;\n    let numbers = 0;\n    let specialchars = 0;\n    const upperCase = /[A-Z]/;\n    const lowerCase = /[a-z]/;\n    const number = /[0-9]/;\n    const specialchar = /[^\\da-zA-Z]/;\n    let valid = false;\n    const getPercentage = (a: number, b: number) => (b / a) * 100;\n    const getLevel = (value: number) => {\n        if (value >= 100) {\n            return \"bg-success\";\n        }\n        if (value >= 50) {\n            return \"bg-warning\";\n        }\n        if (value == 0) {\n            return \"\"; // grayed\n        }\n        return \"bg-danger\";\n    };\n    const checkStrength = (value: string) => {\n        const minLength = value.length >= settings.requiredLength ? 1 : 0;\n        capitalletters = !settings.requireUppercase || value.match(upperCase) ? 1 : 0;\n        lowerletters = !settings.requireLowercase || value.match(lowerCase) ? 1 : 0;\n        numbers = !settings.requireDigit || value.match(number) ? 1 : 0;\n        specialchars = !settings.requireNonAlphanumeric || value.match(specialchar) ? 1 : 0;\n        const total = minLength + capitalletters + lowerletters + numbers + specialchars;\n        const percentage = getPercentage(5, total);\n        valid = percentage >= 100;\n        createProgressBar(percentage, getLevel(percentage));\n    };\n    const createProgressBar = (percentage: string | number, level: string) => {\n        const el = document.createElement(\"div\");\n        el.className = \"progress\";\n        el.setAttribute(\"value\", percentage.toString());\n        el.setAttribute(\"style\", settings.style);\n        el.setAttribute(\"max\", \"100\");\n        el.setAttribute(\"aria-describedby\", \"\");\n        const bar = document.createElement(\"div\");\n        bar.className = \"progress-bar \" + level;\n        bar.style.width = percentage + \"%\";\n        el.appendChild(bar);\n        const target = document.querySelector(settings.target);\n        target.innerHTML = \"\";\n        target.appendChild(el);\n    };\n    element.addEventListener(\"keyup\", () => checkStrength(element.value));\n    element.addEventListener(\"keydown\", () => checkStrength(element.value));\n    element.addEventListener(\"change\", () => checkStrength(element.value));\n    element.addEventListener(\"drop\", (event) => {\n        event.preventDefault();\n        checkStrength(event.dataTransfer?.getData(\"text\") ?? \"\");\n    });\n    element.form?.addEventListener(\"submit\", (event) => {\n        checkStrength(element.value);\n        if (!valid) {\n            event.preventDefault();\n        }\n    });\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n  return dest;\n};\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["_passwordStrength","require","toggleConnectionStringAndPrefix","selectedOption","document","querySelector","connectionString","getAttribute","toLowerCase","tablePrefix","querySelectorAll","forEach","el","style","display","setAttribute","removeAttribute","connectionStringHint","getElementById","textContent","togglePasswordVisibility","passwordCtl","togglePasswordCtl","type","icon","getElementsByClassName","classList","toggle","addEventListener","element","target","recipeName","recipeDisplayName","recipeDescription","recipeButton","recipeNameInput","value","focus","refreshDescription","this","passwordElement","options","JSON","parse","dataset","strength","requiredLength","requiredUniqueChars","requireNonAlphanumeric","requireLowercase","requireUppercase","requireDigit","_passwordStrengthDefault","default","popover","createElement","className","role","innerHTML","rect","getBoundingClientRect","position","top","left","body","appendChild","removePopover","remove","removeEventListener","toggleConnectionString","e","togglePassword","togglePasswordConfirmation","culturesList","selectedIndex","window","location","href","url","setLocalizationUrl","init","exports","settings","Object","assign","capitalletters","lowerletters","numbers","specialchars","upperCase","lowerCase","number","specialchar","valid","checkStrength","minLength","length","match","percentage","createProgressBar","getLevel","level","toString","bar","width","event","preventDefault","dataTransfer","getData","form","interopDefault","a","__esModule","defineInteropFlag","defineProperty","exportAll","source","dest","keys","key","prototype","hasOwnProperty","call","enumerable","get","export","destName"],"version":3,"file":"setup.js.map"}