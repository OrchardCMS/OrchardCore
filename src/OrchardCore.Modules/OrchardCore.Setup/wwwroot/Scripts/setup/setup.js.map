{"mappings":"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","sources":["src/OrchardCore.Modules/OrchardCore.Setup/Assets/ts/setup.ts",".scripts/bloom/components/password-strength.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["import strenght from \"@orchardcore/bloom/components/password-strength\";\r\n\r\n// Show or hide the connection string or table prefix section when the database provider is selected\r\nconst toggleConnectionStringAndPrefix = () => {\r\n    const selectedOption = document.querySelector(\r\n        \"#DatabaseProvider option:checked\"\r\n    );\r\n    if (selectedOption) {\r\n        const connectionString =\r\n            selectedOption\r\n                .getAttribute(\"data-connection-string\")\r\n                ?.toLowerCase() === \"true\";\r\n        const tablePrefix =\r\n            selectedOption.getAttribute(\"data-table-prefix\")?.toLowerCase() ===\r\n            \"true\";\r\n\r\n        const connectionStringElements =\r\n            document.querySelectorAll<HTMLDivElement>(\".connectionString\");\r\n        connectionStringElements.forEach(\r\n            (el) => (el.style.display = connectionString ? \"block\" : \"none\")\r\n        );\r\n\r\n        const tablePrefixElements =\r\n            document.querySelectorAll<HTMLDivElement>(\".tablePrefix\");\r\n        tablePrefixElements.forEach(\r\n            (el) => (el.style.display = tablePrefix ? \"block\" : \"none\")\r\n        );\r\n\r\n        document.querySelectorAll(\".pwd\").forEach((el) => {\r\n            if (connectionString) {\r\n                el.setAttribute(\"required\", \"required\");\r\n            } else {\r\n                el.removeAttribute(\"required\");\r\n            }\r\n        });\r\n\r\n        const connectionStringHint = document.getElementById(\r\n            \"connectionStringHint\"\r\n        );\r\n        if (connectionStringHint) {\r\n            connectionStringHint.textContent =\r\n                selectedOption.getAttribute(\"data-connection-string-sample\") ||\r\n                \"\";\r\n        }\r\n    }\r\n};\r\n\r\nconst refreshDescription = (target: Element) => {\r\n    const recipeName = target.getAttribute(\"data-recipe-name\");\r\n    const recipeDisplayName = target.getAttribute(\"data-recipe-display-name\");\r\n    const recipeDescription = target.getAttribute(\"data-recipe-description\");\r\n\r\n    const recipeButton = document.getElementById(\"recipeButton\");\r\n    const recipeNameInput = document.getElementById(\r\n        \"RecipeName\"\r\n    ) as HTMLInputElement;\r\n\r\n    if (recipeButton && recipeNameInput) {\r\n        recipeButton.textContent = recipeDisplayName || \"\";\r\n        recipeNameInput.value = recipeName || \"\";\r\n        recipeButton.setAttribute(\"title\", recipeDescription || \"\");\r\n        recipeButton.focus();\r\n    }\r\n};\r\n\r\nconst setLocalizationUrl = () => {\r\n    const culturesList = document.getElementById(\r\n        \"culturesList\"\r\n    ) as HTMLSelectElement;\r\n\r\n    culturesList.addEventListener(\"change\", () => {\r\n        const selectedOption = culturesList.options[culturesList.selectedIndex];\r\n        if (selectedOption) {\r\n            window.location.href = selectedOption.dataset.url || \"\";\r\n        }\r\n    });\r\n};\r\n\r\nconst togglePasswordVisibility = (\r\n    passwordCtl: HTMLInputElement | null,\r\n    togglePasswordCtl: HTMLElement | null\r\n) => {\r\n    if (!passwordCtl || !togglePasswordCtl) {\r\n        return;\r\n    }\r\n\r\n    // toggle the type attribute\r\n    const type =\r\n        passwordCtl.getAttribute(\"type\") === \"password\" ? \"text\" : \"password\";\r\n    passwordCtl.setAttribute(\"type\", type);\r\n\r\n    // toggle the eye slash icon\r\n    const icon = togglePasswordCtl.getElementsByClassName(\"icon\")[0];\r\n    if (icon) {\r\n        if (icon.getAttribute(\"data-icon\")) {\r\n            // if the icon is rendered as a svg\r\n            icon.setAttribute(\r\n                \"data-icon\",\r\n                type === \"password\" ? \"eye\" : \"eye-slash\"\r\n            );\r\n        } else {\r\n            // if the icon is still a <i> element\r\n            icon.classList.toggle(\"fa-eye\", type === \"password\");\r\n            icon.classList.toggle(\"fa-eye-slash\", type !== \"password\");\r\n        }\r\n    }\r\n};\r\n\r\nconst init = () => {\r\n    toggleConnectionStringAndPrefix();\r\n\r\n    // Show hide the connection string when a provider is selected\r\n    document\r\n        .getElementById(\"DatabaseProvider\")\r\n        ?.addEventListener(\"change\", function () {\r\n            toggleConnectionStringAndPrefix();\r\n        });\r\n\r\n    // Refresh the recipe description\r\n    document.querySelectorAll(\"#recipes div a\").forEach(function (element) {\r\n        element.addEventListener(\"click\", function () {\r\n            refreshDescription(this);\r\n        });\r\n    });\r\n\r\n    const passwordElement = <HTMLInputElement>(\r\n        document.getElementById(\"Password\")\r\n    );\r\n\r\n    const options = JSON.parse(passwordElement?.dataset.strength ?? \"\") ?? {\r\n        requiredLength: 6,\r\n        requiredUniqueChars: 1,\r\n        requireNonAlphanumeric: true,\r\n        requireLowercase: true,\r\n        requireUppercase: true,\r\n        requireDigit: true,\r\n    };\r\n\r\n    if (passwordElement) {\r\n        strenght(passwordElement, options);\r\n    }\r\n\r\n    if (passwordElement) {\r\n        passwordElement.addEventListener(\"focus\", function () {\r\n            const popover = document.createElement(\"div\");\r\n            popover.className = \"popover bs-popover-top\";\r\n            popover.role = \"tooltip\";\r\n            popover.innerHTML = `<div class=\"popover-arrow\" style=\"position: absolute; left: 0px; transform: translate(119px, 0px);\"></div><div class=\"popover-header\">Password requirements: </div><div class=\"popover-body\"><ul><li>Minimum length: ${\r\n                options.requiredLength\r\n            }</li><li>Unique Chars: ${\r\n                options.requiredUniqueChars\r\n            }</li><li>Uppercase: ${\r\n                options.requireUppercase ? \"required\" : \"not required\"\r\n            }</li><li>Lowercase: ${\r\n                options.requireLowercase ? \"required\" : \"not required\"\r\n            }</li><li>Digit: ${\r\n                options.requireDigit ? \"required\" : \"not required\"\r\n            }</li><li>Non alphanumeric: ${\r\n                options.requireNonAlphanumeric ? \"required\" : \"not required\"\r\n            }</li></ul></div>`;\r\n\r\n            const rect = passwordElement.getBoundingClientRect();\r\n            popover.style.position = \"absolute\";\r\n            popover.style.top = `${rect.top - 228}px`;\r\n            popover.style.left = `${rect.left}px`;\r\n            document.body.appendChild(popover);\r\n\r\n            function removePopover() {\r\n                popover.remove();\r\n                passwordElement?.removeEventListener(\"blur\", removePopover);\r\n            }\r\n\r\n            passwordElement.addEventListener(\"blur\", removePopover);\r\n        });\r\n    }\r\n\r\n    const toggleConnectionString = document.querySelector(\r\n        \"#toggleConnectionString\"\r\n    );\r\n    if (toggleConnectionString) {\r\n        toggleConnectionString.addEventListener(\"click\", function (e) {\r\n            togglePasswordVisibility(\r\n                document.querySelector(\"#ConnectionString\"),\r\n                document.querySelector(\"#toggleConnectionString\")\r\n            );\r\n        });\r\n    }\r\n\r\n    const togglePassword = document.querySelector(\"#togglePassword\");\r\n    togglePassword?.addEventListener(\"click\", function (e) {\r\n        togglePasswordVisibility(\r\n            document.querySelector(\"#Password\"),\r\n            document.querySelector(\"#togglePassword\")\r\n        );\r\n    });\r\n\r\n    const togglePasswordConfirmation = document.querySelector(\r\n        \"#togglePasswordConfirmation\"\r\n    );\r\n    togglePasswordConfirmation?.addEventListener(\"click\", function (e) {\r\n        togglePasswordVisibility(\r\n            document.querySelector(\"#PasswordConfirmation\"),\r\n            document.querySelector(\"#togglePasswordConfirmation\")\r\n        );\r\n    });\r\n\r\n    setLocalizationUrl();\r\n};\r\n\r\ninit();","/**\r\n * This function initializes a password strength checker on a given input element.\r\n * It evaluates the password based on specified requirements such as minimum length,\r\n * presence of uppercase, lowercase, digits, and special characters.\r\n * A visual progress bar is displayed to indicate the strength level of the password.\r\n *\r\n * @param {HTMLElement} element - The input element to which the strength checker is applied.\r\n * @param {Object} options - Configuration options for password requirements and display settings.\r\n * @param {number} options.requiredLength - Minimum required length of the password.\r\n * @param {boolean} options.requireUppercase - Whether an uppercase letter is required.\r\n * @param {boolean} options.requireLowercase - Whether a lowercase letter is required.\r\n * @param {boolean} options.requireDigit - Whether a digit is required.\r\n * @param {boolean} options.requireNonAlphanumeric - Whether a special character is required.\r\n * @param {string} options.target - CSS selector for the element where the strength progress bar is displayed.\r\n * @param {string} options.style - CSS style string for the progress bar.\r\n */\r\nexport default (element: HTMLInputElement, options: any) => {\r\n    const settings = Object.assign(\r\n        {\r\n            requiredLength: 8,\r\n            requireUppercase: false,\r\n            requireLowercase: false,\r\n            requireDigit: false,\r\n            requireNonAlphanumeric: false,\r\n            target: \"#passwordStrength\",\r\n            style: \"margin-top: 7px; height: 7px; border-radius: 5px\",\r\n        },\r\n        options,\r\n    );\r\n\r\n    let capitalletters = 0;\r\n    let lowerletters = 0;\r\n    let numbers = 0;\r\n    let specialchars = 0;\r\n\r\n    const upperCase = /[A-Z]/;\r\n    const lowerCase = /[a-z]/;\r\n    const number = /[0-9]/;\r\n    const specialchar = /[^\\da-zA-Z]/;\r\n\r\n    let valid = false;\r\n\r\n    const getPercentage = (a: number, b: number) => (b / a) * 100;\r\n\r\n    const getLevel = (value: number) => {\r\n        if (value >= 100) {\r\n            return \"bg-success\";\r\n        }\r\n\r\n        if (value >= 50) {\r\n            return \"bg-warning\";\r\n        }\r\n\r\n        if (value == 0) {\r\n            return \"\"; // grayed\r\n        }\r\n\r\n        return \"bg-danger\";\r\n    };\r\n\r\n    const checkStrength = (value: string) => {\r\n        const minLength = value.length >= settings.requiredLength ? 1 : 0;\r\n        capitalletters = !settings.requireUppercase || value.match(upperCase) ? 1 : 0;\r\n        lowerletters = !settings.requireLowercase || value.match(lowerCase) ? 1 : 0;\r\n        numbers = !settings.requireDigit || value.match(number) ? 1 : 0;\r\n        specialchars = !settings.requireNonAlphanumeric || value.match(specialchar) ? 1 : 0;\r\n\r\n        const total = minLength + capitalletters + lowerletters + numbers + specialchars;\r\n        const percentage = getPercentage(5, total);\r\n\r\n        valid = percentage >= 100;\r\n\r\n        createProgressBar(percentage, getLevel(percentage));\r\n    };\r\n\r\n    const createProgressBar = (percentage: string | number, level: string) => {\r\n        const el = document.createElement(\"div\");\r\n        el.className = \"progress\";\r\n        el.setAttribute(\"value\", percentage.toString());\r\n        el.setAttribute(\"style\", settings.style);\r\n        el.setAttribute(\"max\", \"100\");\r\n        el.setAttribute(\"aria-describedby\", \"\");\r\n        const bar = document.createElement(\"div\");\r\n        bar.className = \"progress-bar \" + level;\r\n        bar.style.width = percentage + \"%\";\r\n        el.appendChild(bar);\r\n        const target = document.querySelector(settings.target);\r\n        target.innerHTML = \"\";\r\n        target.appendChild(el);\r\n    };\r\n\r\n    element.addEventListener(\"keyup\", () => checkStrength(element.value));\r\n    element.addEventListener(\"keydown\", () => checkStrength(element.value));\r\n    element.addEventListener(\"change\", () => checkStrength(element.value));\r\n    element.addEventListener(\"drop\", (event) => {\r\n        event.preventDefault();\r\n        checkStrength(event.dataTransfer?.getData(\"text\") ?? \"\");\r\n    });\r\n\r\n    element.form?.addEventListener(\"submit\", (event) => {\r\n        checkStrength(element.value);\r\n        if (!valid) {\r\n            event.preventDefault();\r\n        }\r\n    });\r\n};\r\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["_passwordStrength","require","toggleConnectionStringAndPrefix","selectedOption","document","querySelector","connectionString","getAttribute","toLowerCase","tablePrefix","querySelectorAll","forEach","el","style","display","setAttribute","removeAttribute","connectionStringHint","getElementById","textContent","togglePasswordVisibility","passwordCtl","togglePasswordCtl","type","icon","getElementsByClassName","classList","toggle","addEventListener","element","target","recipeName","recipeDisplayName","recipeDescription","recipeButton","recipeNameInput","value","focus","refreshDescription","this","passwordElement","options","JSON","parse","dataset","strength","requiredLength","requiredUniqueChars","requireNonAlphanumeric","requireLowercase","requireUppercase","requireDigit","_passwordStrengthDefault","default","popover","createElement","className","role","innerHTML","rect","getBoundingClientRect","position","top","left","body","appendChild","removePopover","remove","removeEventListener","toggleConnectionString","e","togglePassword","togglePasswordConfirmation","culturesList","selectedIndex","window","location","href","url","setLocalizationUrl","init","settings","Object","assign","capitalletters","lowerletters","numbers","specialchars","upperCase","lowerCase","number","specialchar","valid","checkStrength","minLength","length","match","percentage","createProgressBar","getLevel","level","toString","bar","width","event","preventDefault","dataTransfer","getData","form","exports","interopDefault","a","__esModule","defineInteropFlag","defineProperty","exportAll","source","dest","keys","key","prototype","hasOwnProperty","call","enumerable","get","export","destName"],"version":3,"file":"setup.js.map"}