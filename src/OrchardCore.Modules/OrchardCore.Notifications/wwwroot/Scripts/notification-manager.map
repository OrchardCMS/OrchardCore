{"version":3,"sources":["<anon>"],"sourcesContent":["notificationManager = function () {\n    const removeItem = (values, value) => {\n        const index = values.indexOf(value);\n        if (index > -1) {\n            values.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n    const initialize = (readUrl, unreadBadgeSelector, wrapperSelector) => {\n        if (!readUrl) {\n            console.log('No readUrl was provided.');\n            return;\n        }\n        const reading = [];\n        let totalUnread = 0;\n        let unreadElement = null;\n        if (unreadBadgeSelector) {\n            unreadElement = document.querySelector(unreadBadgeSelector);\n            if (unreadElement) {\n                totalUnread = parseInt(unreadElement.innerText)\n            }\n        }\n        var elements = document.getElementsByClassName('mark-notification-as-read');\n        for (let i = 0; i < elements.length; i++) {\n            ['click', 'mouseover'].forEach((evt) => {\n                elements[i].addEventListener(evt, (e) => {\n                    if (e.target.getAttribute('data-is-read') != \"false\") {\n                        return;\n                    }\n                    var messageId = e.target.getAttribute('data-message-id');\n                    if (!messageId) {\n                        return;\n                    }\n                    if (reading.includes(messageId)) {\n                        // If a message is pending request, no need to send another request.\n                        return;\n                    }\n                    reading.push(messageId);\n                    fetch(readUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ messageId: messageId })\n                    }).then(response => response.json())\n                        .then(result => {\n                            if (result.updated) {\n                                if (unreadElement) {\n                                    if (totalUnread > 1) {\n                                        unreadElement.innerText = --totalUnread;\n                                    } else {\n                                        unreadElement.style.display = 'none';\n                                    }\n                                }\n                                if (wrapperSelector) {\n                                    var wrapper = e.target.closest(wrapperSelector);\n                                    if (wrapper) {\n                                        wrapper.classList.remove('notification-is-unread');\n                                        wrapper.classList.add('notification-is-read');\n                                        wrapper.setAttribute('data-is-read', true);\n                                        removeItem(reading, messageId);\n                                    }\n                                } else {\n                                    e.target.classList.remove('notification-is-unread');\n                                    e.target.classList.add('notification-is-read');\n                                    e.target.setAttribute('data-is-read', true);\n                                    removeItem(reading, messageId);\n                                }\n                            }\n                            var targetUrl = e.target.getAttribute('data-target-url');\n                            if (targetUrl) {\n                                window.location.href = targetUrl;\n                            }\n                        });\n                });\n            });\n        }\n    }\n    return {\n        initializeContainer: initialize\n    };\n}();\n"],"names":["notificationManager","removeItem","values","value","index","indexOf","splice","initializeContainer","readUrl","unreadBadgeSelector","wrapperSelector","console","log","reading","totalUnread","unreadElement","document","querySelector","parseInt","innerText","elements","getElementsByClassName","i","length","forEach","evt","addEventListener","e","target","getAttribute","messageId","includes","push","fetch","method","headers","body","JSON","stringify","then","response","json","result","updated","style","display","wrapper","closest","classList","remove","add","setAttribute","targetUrl","window","location","href"],"mappings":"AAAAA,oBAAsB,WAElB,IAAMC,EAAa,CAACC,EAAQC,KACxB,IAAMC,EAAQF,EAAOG,OAAO,CAACF,UAE7B,AAAIC,EAAQ,KACRF,EAAOI,MAAM,CAACF,EAAO,GAEd,CAAA,EAIf,EA2FA,MAAO,CACHG,oBA1Fe,CAACC,EAASC,EAAqBC,KAE9C,GAAI,CAACF,EAAS,CACVG,QAAQC,GAAG,CAAC,4BAEZ,MACJ,CAEA,IAAMC,EAAU,EAAE,CACdC,EAAc,EACdC,EAAgB,KAEhBN,GACAM,CAAAA,EAAgBC,SAASC,aAAa,CAACR,EAAmB,GAGtDK,CAAAA,EAAcI,SAASH,EAAcI,SAAS,CAAA,EAItD,IAAIC,EAAWJ,SAASK,sBAAsB,CAAC,6BAE/C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAASG,MAAM,CAAED,IAEjC,CAAC,QAAS,YAAY,CAACE,OAAO,CAAC,AAACC,IAC5BL,CAAQ,CAACE,EAAE,CAACI,gBAAgB,CAACD,EAAK,AAACE,IAE/B,GAAIA,AAAyC,SAAzCA,EAAEC,MAAM,CAACC,YAAY,CAAC,iBAI1B,IAAIC,EAAYH,EAAEC,MAAM,CAACC,YAAY,CAAC,qBAElC,CAACC,GAIDjB,EAAQkB,QAAQ,CAACD,MAKrBjB,EAAQmB,IAAI,CAACF,GAEbG,MAAMzB,EAAS,CACX0B,OAAQ,OACRC,QAAS,CACL,eAAgB,kBACpB,EACAC,KAAMC,KAAKC,SAAS,CAAC,CAAER,UAAWA,CAAU,EAChD,GAAGS,IAAI,CAACC,GAAYA,EAASC,IAAI,IAC5BF,IAAI,CAACG,IACF,GAAIA,EAAOC,OAAO,EAUd,GARI5B,IACID,EAAc,EACdC,EAAcI,SAAS,CAAG,EAAEL,EAE5BC,EAAc6B,KAAK,CAACC,OAAO,CAAG,QAIlCnC,EAAiB,CACjB,IAAIoC,EAAUnB,EAAEC,MAAM,CAACmB,OAAO,CAACrC,GAC3BoC,IACAA,EAAQE,SAAS,CAACC,MAAM,CAAC,0BACzBH,EAAQE,SAAS,CAACE,GAAG,CAAC,wBACtBJ,EAAQK,YAAY,CAAC,eAAgB,CAAA,GACrClD,EAAWY,EAASiB,GAE5B,MACIH,EAAEC,MAAM,CAACoB,SAAS,CAACC,MAAM,CAAC,0BAC1BtB,EAAEC,MAAM,CAACoB,SAAS,CAACE,GAAG,CAAC,wBACvBvB,EAAEC,MAAM,CAACuB,YAAY,CAAC,eAAgB,CAAA,GACtClD,EAAWY,EAASiB,GAI5B,IAAIsB,EAAYzB,EAAEC,MAAM,CAACC,YAAY,CAAC,mBAElCuB,GACAC,CAAAA,OAAOC,QAAQ,CAACC,IAAI,CAAGH,CAAQ,CAEvC,IACR,EACJ,EAER,CAIA,CACJ"}
