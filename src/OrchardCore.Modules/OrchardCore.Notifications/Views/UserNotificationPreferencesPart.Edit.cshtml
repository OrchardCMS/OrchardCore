@model UserNotificationViewModel
@{
    var methodsHtmlId = Html.IdFor(x => x.Methods);
}

<div class="mb-3">
    <label asp-for="Methods" class="form-label">@T["Notification Methods"]</label>

    <span class="hint">
        @T["Select all notification methods to receive."]
    </span>
    <ul class="list-group" id="@methodsHtmlId">
        @foreach (var option in Model.AvailableMethods)
        {
            var htmlId = $"{methodsHtmlId}_Method_{option.Value}";

            <li class="list-group-item">
                <div class="form-check">
                    <input type="hidden" name="@Html.NameFor(x => x.SortedMethods)" value="@option.Value" />
                    <input class="form-check-input" type="checkbox" name="@Html.NameFor(x => x.Methods)" value="@option.Value" id="@htmlId" @(Model.Methods.Contains(option.Value, StringComparer.OrdinalIgnoreCase) ? " checked " : "")>
                    <label class="form-check-label" for="@htmlId">
                        @option.Text
                    </label>
                </div>
            </li>
        }
    </ul>
    @if (Model.AvailableMethods.Count() > 1)
    {
        <span class="hint">@T["From the list above, you can sort the notification priority where the most important method is on the top."]</span>
    }
</div>

<script at="Foot">
    (function () {
        const list = document.getElementById('@methodsHtmlId')

        const getMouseOffset = (evt) => {
            const targetRect = evt.target.getBoundingClientRect()
            const offset = {
                x: evt.pageX - targetRect.left,
                y: evt.pageY - targetRect.top
            }
            return offset
        }

        const getElementVerticalCenter = (el) => {
            const rect = el.getBoundingClientRect()
            return (rect.bottom - rect.top) / 2
        }

        const appendPlaceholder = (evt, idx) => {
            evt.preventDefault()
            if (idx === dragIndex) {
                return
            }

            const offset = getMouseOffset(evt)
            const middleY = getElementVerticalCenter(evt.target)
            const placeholder = list.children[dragIndex]

            if (offset.y > middleY) {
                list.insertBefore(evt.target, placeholder)
            } else if (list.children[idx + 1]) {
                list.insertBefore(evt.target.nextSibling || evt.target, placeholder)
            }
            return
        }

        function sortable(rootEl, onUpdate) {
            var dragEl;

            // Making all siblings movable
            [].slice.call(rootEl.children).forEach(function (itemEl) {
                itemEl.draggable = true;
            });

            // Function responsible for sorting
            function _onDragOver(evt) {
                evt.preventDefault();
                evt.dataTransfer.dropEffect = 'move';

                var target = evt.target;
                if (target && target !== dragEl) {
                    // Sorting
                    const offset = getMouseOffset(evt)
                    const middleY = getElementVerticalCenter(evt.target)

                    if (offset.y > middleY) {
                        rootEl.insertBefore(dragEl, target.nextSibling)
                    } else {
                        rootEl.insertBefore(dragEl, target)
                    }
                }
            }

            // End of sorting
            function _onDragEnd(evt) {
                evt.preventDefault();

                dragEl.classList.remove('ghost');
                rootEl.removeEventListener('dragover', _onDragOver, false);
                rootEl.removeEventListener('dragend', _onDragEnd, false);

                // Notification about the end of sorting
                onUpdate(dragEl);
            }

            // Sorting starts
            rootEl.addEventListener('dragstart', function (evt) {
                dragEl = evt.target; // Remembering an element that will be moved

                // Limiting the movement type
                evt.dataTransfer.effectAllowed = 'move';
                evt.dataTransfer.setData('Text', dragEl.textContent);

                // Subscribing to the events at dnd
                rootEl.addEventListener('dragover', _onDragOver, false);
                rootEl.addEventListener('dragend', _onDragEnd, false);
                setTimeout(function () {
                    // If this action is performed without setTimeout, then
                    // the moved object will be of this class.
                    dragEl.classList.add('ghost');
                }, 0)
            }, false);
        }

        sortable(list);
    })();
</script>
