@using Microsoft.AspNetCore.Mvc.Localization
@using OrchardCore.DisplayManagement.ModelBinding
@using Microsoft.AspNetCore.Authorization
@using OrchardCore.Admin
@using OrchardCore.Notifications.Endpoints.Management

@inject IDisplayManager<Notification> NotificationDisplayDriver
@inject IUpdateModelAccessor UpdateModelAccessor
@inject IAuthorizationService AuthorizationService

@model UserNotificationNavbarViewModel

<li class="nav-item">
    <div class="dropdown">
        <button type="button" class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false" aria-label="@T["Notifications"]">
            @if (Model.TotalUnread > 0)
            {
                LocalizedHtmlString title;
                if (Model.TotalUnread > Model.MaxVisibleNotifications)
                {
                    title = T["You have more than {0} unread notifications", Model.MaxVisibleNotifications];
                }
                else
                {
                    title = T.Plural(Model.TotalUnread, "You have {1} unread notification", "You have {0} unread notifications", Model.TotalUnread);
                }

                <i class="fa-solid fa-bell" aria-hidden="true" data-bs-toggle="tooltip" data-bs-original-title="@title"></i>

                <span class="position-absolute start-50 translate-middle badge rounded-pill text-bg-danger" id="UnreadNotificationBadge">@Model.TotalUnread</span>
            }
            else
            {
                <i class="fa-regular fa-bell" aria-hidden="true" data-bs-toggle="tooltip" data-bs-original-title="@T["You have no unread notifications"]"></i>
            }
        </button>
        <ul class="dropdown-menu dropdown-menu-end notification-navbar scrollable position-absolute p-0">
            @if (Model.Notifications.Count > 0)
            {
                var maxCount = Math.Min(Model.MaxVisibleNotifications, Model.Notifications.Count);
                for (int i = 0; i < maxCount; i++)
                {
                    var notification = Model.Notifications[i];
                    var shape = await NotificationDisplayDriver.BuildDisplayAsync(notification, UpdateModelAccessor.ModelUpdater, "Header");
                    shape.Properties[nameof(Notification)] = notification;

                    @await DisplayAsync(shape)
                }
            }
            else
            {
                <li class="dropdown-item text-center"><small>@T["You have no unread notifications."]</small></li>
            }

            @if (await AuthorizationService.AuthorizeAsync(ViewContext.HttpContext.User, AdminPermissions.AccessAdminPanel))
            {
                <li class="dropdown-item bg-primary text-center">
                    <small><a class="text-white" asp-action="List" asp-controller="Admin" asp-area="@NotificationConstants.Features.Notifications">@T["Notification Center"]</a></small>
                </li>
            }
        </ul>
    </div>
</li>

<style at="Head">
    #UnreadNotificationBadge {
        top: 5px;
    }

    .notification-navbar {
        min-width: 300px;
    }

        .notification-navbar > li.dropdown-item {
            border-bottom: 1px solid #dee2e6;
        }

        .notification-navbar .notification-is-unread {
            font-weight: 600 !important;
        }
</style>
