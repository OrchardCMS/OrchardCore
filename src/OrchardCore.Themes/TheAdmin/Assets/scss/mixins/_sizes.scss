@import '../../../node_modules/bootstrap/scss/mixins/_breakpoints';
@import '../../../node_modules/bootstrap/scss/_variables';

$sizes: () !default;
$sizes: map-merge( ( 25: 25%, 50: 50%, 75: 75%, 100: 100%, auto: auto ), $sizes );

/* responsive version for sizes, we don't generate xs because it is already generated by bootstrap */
@each $breakpoint in map-keys($grid-breakpoints) {
    @if $breakpoint != "xs" {
        @include media-breakpoint-up($breakpoint) {
            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

            @each $prop, $abbrev in (width: w, height: h) {
                @each $size, $length in $sizes {
                    .#{$abbrev}#{$infix}-#{$size} {
                        #{$prop}: $length !important;
                    }
                }
            }
        }
    }
}

// Size Column Groupings
// Creates mixins to target sizes contained inside a column grouping to expand small sizes.
// ------------------------------
@mixin make-col-sizes-fix($breakpoint) {
    @each $prop, $abbrev in (width: w, height: h) {
        @each $size in map-keys($sizes) {
            .#{$abbrev}-#{$breakpoint}-#{$size} {
                #{$prop}: 100% !important;
            }
        }
    }
}

@mixin make-col-sizes-grouping($grouping) {
    &.col-#{$grouping} {
        @each $breakpoint in map-keys($grid-breakpoints) {
            @include make-col-sizes-fix($breakpoint);
        }
    }
}

.ta-col-grouping {
    @each $breakpoint in map-keys($grid-breakpoints) {
        @if $grid-row-columns > 0 {
            @include make-col-sizes-grouping($breakpoint);

            @for $i from 1 through math.div($grid-columns, 2) {
                @include make-col-sizes-grouping(#{$breakpoint}-#{$i});
            }
        }
    }
}
