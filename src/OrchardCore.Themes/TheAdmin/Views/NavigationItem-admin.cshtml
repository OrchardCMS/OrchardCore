@using OrchardCore.Navigation
@{
    TagBuilder li = Tag(Model, "li");

    // Morphing the shape to keep Model untouched.
    Model.Metadata.Alternates.Clear();
    Model.Metadata.Type = "NavigationItemLink";

    if (Model.Id != null)
    {
        Model.Metadata.Alternates.Add("NavigationItemLink_Id__" + Model.Id);
    }

    // Extract classes that are not icons from 'Model.Classes'.
    var notIconClasses = ((IEnumerable<string>)Model.Classes)
        .Where(c => !c.StartsWith(NavigationConstants.CssClassPrefix, StringComparison.OrdinalIgnoreCase))
        .ToArray();

    if (notIconClasses.Length > 0)
    {
        li.Attributes["class"] = string.Join(' ', notIconClasses);
    }
    else
    {
        // This removes the class attribute on the li element when
        // an empty class attribute gets rendered.
        li.Attributes.Remove("class");
    }

    if ((bool)Model.Selected)
    {
        li.AddCssClass("active");
    }

    // Render sub-items (MenuItem).
    if (Model.HasItems)
    {
        li.AddCssClass("has-items");
        var figure = new TagBuilder("figure");
        var figCaption = new TagBuilder("figcaption");

        if (li.Attributes.Where(a => a.Key == "id").Count() > 0)
        {
            figure.Attributes["aria-labelledby"] = li.Attributes["id"];
            figCaption.Attributes["id"] = li.Attributes["id"];
            li.Attributes["id"] = null;
        }

        var ul = new TagBuilder("ul");
        ul.Attributes["Id"] = "m" + Model.GetHashCode().ToString();
        ul.Attributes["data-title"] = Model.Text;

        if ((bool)Model.Selected)
        {
            ul.AddCssClass("collapse show");
        }
        else
        {
            ul.AddCssClass("collapse");
        }

        foreach (var item in Model)
        {
            ul.InnerHtml.AppendHtml(await DisplayAsync(item));
        }

        figCaption.InnerHtml.AppendHtml(await DisplayAsync(Model));
        figure.InnerHtml.AppendHtml(figCaption);
        figure.InnerHtml.AppendHtml(ul);

        li.InnerHtml.AppendHtml(figure);
    }
    else
    {
        li.InnerHtml.AppendHtml(await DisplayAsync(Model));
    }
}

@li
