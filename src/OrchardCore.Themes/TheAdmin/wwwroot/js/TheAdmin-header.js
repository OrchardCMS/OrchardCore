/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

themeStoreKeySuffix = 'admintheme';
var getAdminPreferenceKey = function getAdminPreferenceKey() {
  return getTenantName() + '-adminPreferences';
};
var getAdminPreferences = function getAdminPreferences() {
  return JSON.parse(localStorage.getItem(getAdminPreferenceKey()));
};
var setAdminPreferences = function setAdminPreferences(adminPreferences) {
  var key = getAdminPreferenceKey();
  localStorage.setItem(key, JSON.stringify(adminPreferences));
  Cookies.set(key, JSON.stringify(adminPreferences), {
    expires: 360
  });
};
// We add some classes to the body tag to restore the sidebar to the state is was before reload.
// That state was saved to localstorage by userPreferencesPersistor.js
// We need to apply the classes BEFORE the page is rendered. 
// That is why we use a MutationObserver instead of document.Ready().
var themeObserver = new MutationObserver(function (mutations) {
  for (var i = 0; i < mutations.length; i++) {
    for (var j = 0; j < mutations[i].addedNodes.length; j++) {
      if (mutations[i].addedNodes[j].tagName == 'BODY') {
        setTheme(getPreferredTheme());

        // we're done: 
        themeObserver.disconnect();
      }
      ;
    }
  }
});
themeObserver.observe(document.documentElement, {
  childList: true,
  subtree: true
});
(function () {
  'use strict';

  var showActiveTheme = function showActiveTheme(theme) {
    var focus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var themeSwitcher = document.querySelector('#bd-theme');
    if (!themeSwitcher) {
      return;
    }
    var themeSwitcherText = document.querySelector('#bd-theme-text');
    var activeThemeIcon = document.querySelector('.theme-icon-active');
    var btnToActive = document.querySelector("[data-bs-theme-value=\"".concat(theme, "\"]"));
    var svgOfActiveBtn = btnToActive.querySelector('.theme-icon');
    btnToActive.classList.add('active');
    btnToActive.setAttribute('aria-pressed', 'true');
    activeThemeIcon.innerHTML = svgOfActiveBtn.innerHTML;
    var themeSwitcherLabel = "".concat(themeSwitcherText.textContent, " (").concat(btnToActive.dataset.bsThemeValue, ")");
    themeSwitcher.setAttribute('aria-label', themeSwitcherLabel);
    var btnsToInactive = document.querySelectorAll("[data-bs-theme-value]:not([data-bs-theme-value=\"".concat(theme, "\"])"));
    for (var i = 0; i < btnsToInactive.length; i++) {
      btnsToInactive[i].classList.remove('active');
      btnsToInactive[i].setAttribute('aria-pressed', 'false');
    }
    if (focus) {
      themeSwitcher.focus();
    }
  };
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {
    var storedTheme = getStoredTheme();
    if (storedTheme !== lightThemeName && storedTheme !== darkThemeName) {
      setTheme(getPreferredTheme());
    }
  });
  window.addEventListener('DOMContentLoaded', function () {
    showActiveTheme(getPreferredTheme());
    document.querySelectorAll('[data-bs-theme-value]').forEach(function (toggle) {
      toggle.addEventListener('click', function () {
        var theme = toggle.getAttribute('data-bs-theme-value');
        setStoredTheme(theme);
        setTheme(theme);
        showActiveTheme(theme, true);
      });
    });
  });
})();