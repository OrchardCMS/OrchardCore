//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

namespace Bloom.Services {

export interface IClient {
    /**
     * @return OK
     */
    liquidIntellisense_js(): Promise<void>;
    /**
     * @return OK
     */
    contentGET(contentItemId: string): Promise<void>;
    /**
     * @return OK
     */
    contentDELETE(contentItemId: string): Promise<void>;
    /**
     * @param draft (optional) 
     * @param body (optional) 
     * @return OK
     */
    contentPOST(draft: boolean | undefined, body: ContentItem | undefined): Promise<void>;
    /**
     * @param parameters (optional) 
     * @return OK
     */
    queriesPOST(name: string, parameters: string | undefined): Promise<void>;
    /**
     * @param parameters (optional) 
     * @return OK
     */
    queriesGET(name: string, parameters: string | undefined): Promise<void>;
    /**
     * @return OK
     */
    create(body: TenantApiModel): Promise<void>;
    /**
     * @return OK
     */
    edit(body: TenantApiModel): Promise<void>;
    /**
     * @return OK
     */
    disable(tenantName: string): Promise<void>;
    /**
     * @return OK
     */
    enable(tenantName: string): Promise<void>;
    /**
     * @return OK
     */
    remove(tenantName: string): Promise<void>;
    /**
     * @return OK
     */
    setup(body: SetupApiViewModel): Promise<void>;
}

export class Client implements IClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "https://localhost:5001/";

    }

    /**
     * @return OK
     */
    liquidIntellisense_js( cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/OrchardCore.Liquid/Scripts/liquid-intellisense.js";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLiquidIntellisense_js(_response);
        });
    }

    protected processLiquidIntellisense_js(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    contentGET(contentItemId: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/content/{contentItemId}";
        if (contentItemId === undefined || contentItemId === null)
            throw new Error("The parameter 'contentItemId' must be defined.");
        url_ = url_.replace("{contentItemId}", encodeURIComponent("" + contentItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processContentGET(_response);
        });
    }

    protected processContentGET(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    contentDELETE(contentItemId: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/content/{contentItemId}";
        if (contentItemId === undefined || contentItemId === null)
            throw new Error("The parameter 'contentItemId' must be defined.");
        url_ = url_.replace("{contentItemId}", encodeURIComponent("" + contentItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processContentDELETE(_response);
        });
    }

    protected processContentDELETE(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param draft (optional) 
     * @param body (optional) 
     * @return OK
     */
    contentPOST(draft: boolean | undefined, body: ContentItem | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/content?";
        if (draft === null)
            throw new Error("The parameter 'draft' cannot be null.");
        else if (draft !== undefined)
            url_ += "draft=" + encodeURIComponent("" + draft) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processContentPOST(_response);
        });
    }

    protected processContentPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param parameters (optional) 
     * @return OK
     */
    queriesPOST(name: string, parameters: string | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/queries/{name}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        if (parameters === null)
            throw new Error("The parameter 'parameters' cannot be null.");
        else if (parameters !== undefined)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQueriesPOST(_response);
        });
    }

    protected processQueriesPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param parameters (optional) 
     * @return OK
     */
    queriesGET(name: string, parameters: string | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/queries/{name}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        if (parameters === null)
            throw new Error("The parameter 'parameters' cannot be null.");
        else if (parameters !== undefined)
            url_ += "parameters=" + encodeURIComponent("" + parameters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQueriesGET(_response);
        });
    }

    protected processQueriesGET(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    create(body: TenantApiModel, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    edit(body: TenantApiModel, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    disable(tenantName: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/disable/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDisable(_response);
        });
    }

    protected processDisable(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    enable(tenantName: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/enable/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEnable(_response);
        });
    }

    protected processEnable(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    remove(tenantName: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/remove/{tenantName}";
        if (tenantName === undefined || tenantName === null)
            throw new Error("The parameter 'tenantName' must be defined.");
        url_ = url_.replace("{tenantName}", encodeURIComponent("" + tenantName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    setup(body: SetupApiViewModel, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/tenants/setup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetup(_response);
        });
    }

    protected processSetup(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ContentItem implements IContentItem {

    [key: string]: any;

    constructor(data?: IContentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): ContentItem {
        data = typeof data === 'object' ? data : {};
        let result = new ContentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IContentItem {

    [key: string]: any;
}

export class SetupApiViewModel implements ISetupApiViewModel {
    name!: string | undefined;
    siteName!: string | undefined;
    databaseProvider?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    userName!: string | undefined;
    email!: string | undefined;
    password?: string | undefined;
    recipeName?: string | undefined;
    recipe?: string | undefined;
    siteTimeZone?: string | undefined;
    schema?: string | undefined;

    [key: string]: any;

    constructor(data?: ISetupApiViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.siteName = _data["siteName"];
            this.databaseProvider = _data["databaseProvider"];
            this.connectionString = _data["connectionString"];
            this.tablePrefix = _data["tablePrefix"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.recipeName = _data["recipeName"];
            this.recipe = _data["recipe"];
            this.siteTimeZone = _data["siteTimeZone"];
            this.schema = _data["schema"];
        }
    }

    static fromJS(data: any): SetupApiViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SetupApiViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["siteName"] = this.siteName;
        data["databaseProvider"] = this.databaseProvider;
        data["connectionString"] = this.connectionString;
        data["tablePrefix"] = this.tablePrefix;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["recipeName"] = this.recipeName;
        data["recipe"] = this.recipe;
        data["siteTimeZone"] = this.siteTimeZone;
        data["schema"] = this.schema;
        return data;
    }
}

export interface ISetupApiViewModel {
    name: string | undefined;
    siteName: string | undefined;
    databaseProvider?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    userName: string | undefined;
    email: string | undefined;
    password?: string | undefined;
    recipeName?: string | undefined;
    recipe?: string | undefined;
    siteTimeZone?: string | undefined;
    schema?: string | undefined;

    [key: string]: any;
}

export class TenantApiModel implements ITenantApiModel {
    description?: string | undefined;
    name!: string | undefined;
    category?: string | undefined;
    databaseProvider?: string | undefined;
    requestUrlPrefix?: string | undefined;
    requestUrlHost?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    schema?: string | undefined;
    recipeName?: string | undefined;
    featureProfiles?: string[] | undefined;
    isNewTenant?: boolean;

    [key: string]: any;

    constructor(data?: ITenantApiModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
            this.category = _data["category"];
            this.databaseProvider = _data["databaseProvider"];
            this.requestUrlPrefix = _data["requestUrlPrefix"];
            this.requestUrlHost = _data["requestUrlHost"];
            this.connectionString = _data["connectionString"];
            this.tablePrefix = _data["tablePrefix"];
            this.schema = _data["schema"];
            this.recipeName = _data["recipeName"];
            if (Array.isArray(_data["featureProfiles"])) {
                this.featureProfiles = [] as any;
                for (let item of _data["featureProfiles"])
                    this.featureProfiles!.push(item);
            }
            this.isNewTenant = _data["isNewTenant"];
        }
    }

    static fromJS(data: any): TenantApiModel {
        data = typeof data === 'object' ? data : {};
        let result = new TenantApiModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        data["category"] = this.category;
        data["databaseProvider"] = this.databaseProvider;
        data["requestUrlPrefix"] = this.requestUrlPrefix;
        data["requestUrlHost"] = this.requestUrlHost;
        data["connectionString"] = this.connectionString;
        data["tablePrefix"] = this.tablePrefix;
        data["schema"] = this.schema;
        data["recipeName"] = this.recipeName;
        if (Array.isArray(this.featureProfiles)) {
            data["featureProfiles"] = [];
            for (let item of this.featureProfiles)
                data["featureProfiles"].push(item);
        }
        data["isNewTenant"] = this.isNewTenant;
        return data;
    }
}

export interface ITenantApiModel {
    description?: string | undefined;
    name: string | undefined;
    category?: string | undefined;
    databaseProvider?: string | undefined;
    requestUrlPrefix?: string | undefined;
    requestUrlHost?: string | undefined;
    connectionString?: string | undefined;
    tablePrefix?: string | undefined;
    schema?: string | undefined;
    recipeName?: string | undefined;
    featureProfiles?: string[] | undefined;
    isNewTenant?: boolean;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

}